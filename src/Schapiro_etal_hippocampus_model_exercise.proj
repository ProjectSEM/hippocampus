// ta_Dump File v3.0 -- code v7.0.1.0 rev7465
LeabraProject .projects["Schapiro_etal_hippocampus_model_exercise"] { 
Doc_Group @.docs = [0] {
};

Wizard_Group @.wizards = [1] {
LeabraWizard @["LeabraWizard_1"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NO_CLIP"] { };
};
};
};

ControlPanel_Group @.ctrl_panels = [2] {
ControlPanel @["ControlPanel"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["user_pinned"] { };
};

EditMbrItem_Group @.mbrs = [8] {
EditMbrItem @[0] { };
EditMbrItem @[1] { };
EditMbrItem @[2] { };
EditMbrItem @[3] { };
EditMbrItem @[4] { };
EditMbrItem @[5] { };
EditMbrItem @[6] { };
EditMbrItem @[7] { };
};

EditMthItem_Group @.mths = [8] {
EditMthItem @[0] { };
EditMthItem @[1] { };
EditMthItem @[2] { };
EditMthItem @[3] { };
EditMthItem @[4] { };
EditMthItem @[5] { };
EditMthItem @[6] { };
EditMthItem @[7] { };
};
};
ClusterRun @["ClusterRun"] { 
EditMbrItem_Group @.mbrs = [0] {
};

EditMthItem_Group @.mths = [0] {
};

DataTableCols @.jobs_running.data = [26] {
String_Data @["tag"] { };
String_Data @["notes"] { };
String_Data @["params"] { };
String_Data @["status"] { };
String_Data @["status_info"] { };
String_Data @["submit_time"] { };
String_Data @["start_time"] { };
String_Data @["end_time"] { };
String_Data @["job_no"] { };
String_Data @["job_out"] { };
String_Data @["job_out_file"] { };
String_Data @["dat_files"] { };
String_Data @["other_files"] { };
int_Data @["command_id"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
};
};
String_Data @["command"] { };
String_Data @["repo_url"] { };
String_Data @["cluster"] { };
String_Data @["queue"] { };
String_Data @["run_time"] { };
int_Data @["ram_gb"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
};
};
int_Data @["n_threads"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
};
};
int_Data @["mpi_nodes"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
};
};
int_Data @["pb_batches"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
};
};
int_Data @["pb_nodes"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
};
};
String_Data @["submit_svn"] { };
String_Data @["submit_job"] { };
};

DataTableCols @.jobs_done.data = [26] {
String_Data @["tag"] { };
String_Data @["notes"] { };
String_Data @["params"] { };
String_Data @["status"] { };
String_Data @["status_info"] { };
String_Data @["submit_time"] { };
String_Data @["start_time"] { };
String_Data @["end_time"] { };
String_Data @["job_no"] { };
String_Data @["job_out"] { };
String_Data @["job_out_file"] { };
String_Data @["dat_files"] { };
String_Data @["other_files"] { };
int_Data @["command_id"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
};
};
String_Data @["command"] { };
String_Data @["repo_url"] { };
String_Data @["cluster"] { };
String_Data @["queue"] { };
String_Data @["run_time"] { };
int_Data @["ram_gb"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
};
};
int_Data @["n_threads"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
};
};
int_Data @["mpi_nodes"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
};
};
int_Data @["pb_batches"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
};
};
int_Data @["pb_nodes"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
};
};
String_Data @["submit_svn"] { };
String_Data @["submit_job"] { };
};

DataTableCols @.jobs_archive.data = [26] {
String_Data @["tag"] { };
String_Data @["notes"] { };
String_Data @["params"] { };
String_Data @["status"] { };
String_Data @["status_info"] { };
String_Data @["submit_time"] { };
String_Data @["start_time"] { };
String_Data @["end_time"] { };
String_Data @["job_no"] { };
String_Data @["job_out"] { };
String_Data @["job_out_file"] { };
String_Data @["dat_files"] { };
String_Data @["other_files"] { };
int_Data @["command_id"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
};
};
String_Data @["command"] { };
String_Data @["repo_url"] { };
String_Data @["cluster"] { };
String_Data @["queue"] { };
String_Data @["run_time"] { };
int_Data @["ram_gb"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
};
};
int_Data @["n_threads"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
};
};
int_Data @["mpi_nodes"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
};
};
int_Data @["pb_batches"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
};
};
int_Data @["pb_nodes"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
};
};
String_Data @["submit_svn"] { };
String_Data @["submit_job"] { };
};

DataTableCols @.file_list.data = [9] {
String_Data @["file_name"] { };
String_Data @["tag"] { };
String_Data @["size"] { };
String_Data @["kind"] { };
String_Data @["date_modified"] { };
String_Data @["date_created"] { };
String_Data @["svn_file_path"] { };
String_Data @["proj_file_path"] { };
String_Data @["file_path"] { };
};

DataTableCols @.cluster_info.data = [6] {
String_Data @["queue"] { };
String_Data @["job_no"] { };
String_Data @["user"] { };
String_Data @["state"] { };
String_Data @["procs"] { };
String_Data @["start_time"] { };
};

ParamSearchAlgo_List @.search_algos = [0] {
};
};
};

DataTable_Group @.data = [0] {
DataTable_Group @.gp["InputData"] = [3] { 
DataTable @["Train_pairs"] { 
DataTableCols @.data = [3] {
String_Data @["Name"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["Input"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["EC_out"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
};
};
DataTable @["Train_pairs_without_transitions"] { 
DataTableCols @.data = [3] {
String_Data @["Name"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["Input"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["EC_out"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
};
};
DataTable @["Test_pairs"] { 
DataTableCols @.data = [3] {
String_Data @["Name"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["Input"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["EC_out"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
};
};
};
DataTable_Group @.gp["OutputData"] = [6] { 
DataTable @["TrialOutputData"] { 
DataTableCols @.data = [15] {
int_Data @["batch"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
UserDataItem @["view_panel_wd"] { };
};
};
int_Data @["epoch"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
UserDataItem @["view_panel_wd"] { };
};
};
int_Data @["trial"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
UserDataItem @["view_panel_wd"] { };
};
};
String_Data @["trial_name"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
String_Data @["group_name"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
int_Data @["phase_no"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["minus_cycles"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["sse"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["ext_rew"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["Input_avg_act"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["EC_in_avg_act"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["EC_out_avg_act"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["DG_avg_act"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["CA3_avg_act"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["CA1_avg_act"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
};
};
DataTable @["EpochOutputData"] { 
DataTableCols @.data = [8] {
int_Data @["batch"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
UserDataItem @["view_panel_wd"] { };
};
};
int_Data @["epoch"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["avg_sse"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["cnt_err"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["avg_ext_rew"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["avg_cycles"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["epoch_time_tot"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["epoch_time_usr"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
};
};
DataTable @["TrialTestOutputData"] { 
DataTableCols @.data = [7] {
int_Data @["batch"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
UserDataItem @["view_panel_wd"] { };
};
};
int_Data @["epoch"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
UserDataItem @["view_panel_wd"] { };
};
};
int_Data @["trial"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
UserDataItem @["view_panel_wd"] { };
};
};
String_Data @["trial_name"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["minus_cycles"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["sse"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["EC_out_act"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
};
};
DataTable @["LastTestOutputData"] { 
DataTableCols @.data = [7] {
int_Data @["batch"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
UserDataItem @["view_panel_wd"] { };
};
};
int_Data @["epoch"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
UserDataItem @["view_panel_wd"] { };
};
};
int_Data @["trial"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
UserDataItem @["view_panel_wd"] { };
};
};
String_Data @["trial_name"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["minus_cycles"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["sse"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["EC_out_act"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
};
};
DataTable @["EpochTestOutputData"] { 
DataTableCols @.data = [2] {
int_Data @["batch"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
UserDataItem @["view_panel_wd"] { };
};
};
int_Data @["epoch"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
UserDataItem @["view_panel_wd"] { };
};
};
};
};
DataTable @["SlotEpochOutputData"] { 
DataTableCols @.data = [8] {
int_Data @["batch"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
UserDataItem @["view_panel_wd"] { };
};
};
int_Data @["epoch"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["NARROW"] { };
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["avg_sse"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["cnt_err"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["avg_ext_rew"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["avg_cycles"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["epoch_time_tot"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
float_Data @["epoch_time_usr"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_wd"] { };
};
};
};
};
};
DataTable_Group @.gp["AnalysisData"] { 
};
};

Program_TopGroup @.programs = [0] {
Program_Group @.gp["LeabraAll_Std"] = [10] { 
Program @["LeabraBatch"] { 
ProgObjList @.objs = [0] {
};

ProgType_List @.types = [0] {
};

ProgVar_List @.args = [2] {
ProgVar @["network"] { };
ProgVar @["input_data"] { };
};

ProgVar_List @.vars = [3] {
ProgVar @["batch"] { };
ProgVar @["init_batch"] { };
ProgVar @["max_batch"] { };
};

Function_List @.functions = [0] {
};

ProgEl_List @.init_code = [1] {
NetCounterInit @[0] { };
};

ProgEl_List @.prog_code = [3] {
If @[0] { 
ProgEl_List @.true_code = [1] {
NetCounterInit @[0] { };
};
};
Else @[1] { 
ProgEl_List @.else_code = [1] {
MemberAssign @[0] { };
};
};
WhileLoop @[2] { 
ProgEl_List @.loop_code = [2] {
ProgramCall @[0] { 
ProgArg_List @.prog_args = [4] {
ProgArg @[0] { };
ProgArg @[1] { };
ProgArg @[2] { };
ProgArg @[3] { };
};
};
NetCounterIncr @[1] { };
};
};
};
};
Program @["LeabraTrain"] { 
ProgObjList @.objs = [1] {
RndSeed @["rnd_seed"] { };
};

ProgType_List @.types = [1] {
DynEnumType @["RndInitType"] { 
DynEnumItem_List @.enums = [2] {
DynEnumItem @["OLD_SEED"] { };
DynEnumItem @["NEW_SEED"] { };
};
};
};

ProgVar_List @.args = [4] {
ProgVar @["network"] { };
ProgVar @["input_data"] { };
ProgVar @["no_prompts"] { };
ProgVar @["batch"] { };
};

ProgVar_List @.vars = [22] {
ProgVar @["max_epoch"] { };
ProgVar @["epoch"] { };
ProgVar @["MSP_learning_rate"] { };
ProgVar @["MSP_sparse_projs"] { };
ProgVar @["CA1_prop_act"] { };
ProgVar @["train_mode"] { };
ProgVar @["rnd_init"] { };
ProgVar @["err_stopcrit"] { };
ProgVar @["rnd_seed"] { };
ProgVar @["train_timer"] { };
ProgVar @["output_table"] { };
ProgVar @["test_data"] { };
ProgVar @["fname"] { };
ProgVar @["fname_prefix"] { };
ProgVar @["runtest"] { };
ProgVar @["e_c_in__c_a1"] { };
ProgVar @["c_a1__e_c_out"] { };
ProgVar @["e_c_out__c_a1"] { };
ProgVar @["c_a1"] { };
ProgVar @["ECout_from_CA1"] { };
ProgVar @["CA1_from_ECin"] { };
ProgVar @["CA1_from_ECout"] { };
};

Function_List @.functions = [0] {
};

ProgEl_List @.init_code = [6] {
AssignExpr @[0] { };
MethodCall @[1] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
AssignExpr @[2] { };
If @[3] { 
ProgEl_List @.true_code = [1] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [0] {
};
};
};
};
Else @[4] { 
ProgEl_List @.else_code = [1] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [0] {
};
};
};
};
IfGuiPrompt @[5] { 
ProgEl_List @.yes_code = [3] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [0] {
};
};
MethodCall @[1] { 
ProgArg_List @.meth_args = [0] {
};
};
PrintExpr @[2] { };
};
};
};

ProgEl_List @.prog_code = [11] {
AssignExpr @[0] { };
MethodCall @[1] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
MemberAssign @[2] { };
If @[3] { 
ProgEl_List @.true_code = [3] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [0] {
};
};
MethodCall @[1] { 
ProgArg_List @.meth_args = [0] {
};
};
PrintExpr @[2] { };
};
};
MemberAssign @[4] { };
MemberAssign @[5] { };
MemberAssign @[6] { };
MemberAssign @[7] { };
AssignExpr @[8] { };
WhileLoop @[9] { 
ProgEl_List @.loop_code = [4] {
If @[0] { 
ProgEl_List @.true_code = [8] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [0] {
};
};
ProgramCall @[1] { 
ProgArg_List @.prog_args = [3] {
ProgArg @[0] { };
ProgArg @[1] { };
ProgArg @[2] { };
};
};
AssignExpr @[2] { };
VarIncr @[3] { };
VarIncr @[4] { };
VarIncr @[5] { };
VarIncr @[6] { };
MethodCall @[7] { 
ProgArg_List @.meth_args = [4] {
ProgArg @[0] { };
ProgArg @[1] { };
ProgArg @[2] { };
ProgArg @[3] { };
};
};
};
};
ProgramCall @[1] { 
ProgArg_List @.prog_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
NetCounterIncr @[2] { };
IfBreak @[3] { };
};
};
MethodCall @[10] { 
ProgArg_List @.meth_args = [0] {
};
};
};
};
Program @["LeabraEpoch"] { 
ProgObjList @.objs = [0] {
};

ProgType_List @.types = [0] {
};

ProgVar_List @.args = [2] {
ProgVar @["network"] { };
ProgVar @["input_data"] { };
};

ProgVar_List @.vars = [7] {
ProgVar @["data_loop_order"] { };
ProgVar @["trial"] { };
ProgVar @["trial_mon_data"] { };
ProgVar @["epoch_timer"] { };
ProgVar @["data_loop_index"] { };
ProgVar @["max_num_trials"] { };
ProgVar @["fm__e_c_out"] { };
};

Function_List @.functions = [0] {
};

ProgEl_List @.init_code = [2] {
NetCounterInit @[0] { };
AssignExpr @[1] { };
};

ProgEl_List @.prog_code = [12] {
MemberAssign @[0] { };
NetCounterInit @[1] { };
AssignExpr @[2] { };
MethodCall @[3] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
MethodCall @[4] { 
ProgArg_List @.meth_args = [0] {
};
};
NetDataLoop @[5] { 
ProgEl_List @.loop_code = [2] {
ProgramCall @[0] { 
ProgArg_List @.prog_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
If @[1] { 
ProgEl_List @.true_code = [1] {
AssignExpr @[0] { };
};
};
};
};
If @[6] { 
ProgEl_List @.true_code = [1] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [0] {
};
};
};
};
MethodCall @[7] { 
ProgArg_List @.meth_args = [0] {
};
};
MethodCall @[8] { 
ProgArg_List @.meth_args = [0] {
};
};
MethodCall @[9] { 
ProgArg_List @.meth_args = [0] {
};
};
MethodCall @[10] { 
ProgArg_List @.meth_args = [0] {
};
};
ProgramCall @[11] { 
ProgArg_List @.prog_args = [1] {
ProgArg @[0] { };
};
};
};
};
Program @["LeabraTrial"] { 
ProgObjList @.objs = [0] {
};

ProgType_List @.types = [0] {
};

ProgVar_List @.args = [2] {
ProgVar @["network"] { };
ProgVar @["input_data"] { };
};

ProgVar_List @.vars = [3] {
ProgVar @["phase_no"] { };
ProgVar @["update_net_view"] { };
ProgVar @["trial"] { };
};

Function_List @.functions = [0] {
};

ProgEl_List @.init_code = [1] {
NetCounterInit @[0] { };
};

ProgEl_List @.prog_code = [8] {
NetCounterInit @[0] { };
MethodCall @[1] { 
ProgArg_List @.meth_args = [0] {
};
};
WhileLoop @[2] { 
ProgEl_List @.loop_code = [3] {
ProgramCall @[0] { 
ProgArg_List @.prog_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
NetCounterIncr @[1] { };
MethodCall @[2] { 
ProgArg_List @.meth_args = [0] {
};
};
};
};
MethodCall @[3] { 
ProgArg_List @.meth_args = [0] {
};
};
MethodCall @[4] { 
ProgArg_List @.meth_args = [0] {
};
};
If @[5] { 
ProgEl_List @.true_code = [1] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [0] {
};
};
};
};
ProgramCall @[6] { 
ProgArg_List @.prog_args = [1] {
ProgArg @[0] { };
};
};
NetUpdateView @[7] { };
};
};
Program @["LeabraSettle"] { 
ProgObjList @.objs = [0] {
};

ProgType_List @.types = [0] {
};

ProgVar_List @.args = [2] {
ProgVar @["network"] { };
ProgVar @["input_data"] { };
};

ProgVar_List @.vars = [3] {
ProgVar @["cycle"] { };
ProgVar @["min_cycles"] { };
ProgVar @["update_net_view"] { };
};

Function_List @.functions = [0] {
};

ProgEl_List @.init_code = [1] {
NetCounterInit @[0] { };
};

ProgEl_List @.prog_code = [11] {
NetCounterInit @[0] { };
MethodCall @[1] { 
ProgArg_List @.meth_args = [0] {
};
};
ProgramCall @[2] { 
ProgArg_List @.prog_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
MethodCall @[3] { 
ProgArg_List @.meth_args = [0] {
};
};
If @[4] { 
ProgEl_List @.true_code = [1] {
AssignExpr @[0] { };
};
};
Else @[5] { 
ProgEl_List @.else_code = [1] {
AssignExpr @[0] { };
};
};
WhileLoop @[6] { 
ProgEl_List @.loop_code = [4] {
ProgramCall @[0] { 
ProgArg_List @.prog_args = [1] {
ProgArg @[0] { };
};
};
NetCounterIncr @[1] { };
IfContinue @[2] { };
IfBreak @[3] { };
};
};
MethodCall @[7] { 
ProgArg_List @.meth_args = [0] {
};
};
If @[8] { 
ProgEl_List @.true_code = [1] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [0] {
};
};
};
};
If @[9] { 
ProgEl_List @.true_code = [1] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [0] {
};
};
};
};
NetUpdateView @[10] { };
};
};
Program @["LeabraCycle"] { 
ProgObjList @.objs = [0] {
};

ProgType_List @.types = [0] {
};

ProgVar_List @.args = [1] {
ProgVar @["network"] { };
};

ProgVar_List @.vars = [1] {
ProgVar @["update_net_view"] { };
};

Function_List @.functions = [0] {
};

ProgEl_List @.init_code = [0] {
};

ProgEl_List @.prog_code = [2] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [0] {
};
};
NetUpdateView @[1] { };
};
};
Program @["ApplyInputs"] { 
ProgObjList @.objs = [1] {
LayerWriter @["LayerWriter_0"] { 
LayerDataEl_List @.layer_data = [3] {
LayerWriterEl @[0] { };
LayerWriterEl @[1] { };
LayerWriterEl @[2] { };
};
};
};

ProgType_List @.types = [0] {
};

ProgVar_List @.args = [2] {
ProgVar @["network"] { };
ProgVar @["input_data"] { };
};

ProgVar_List @.vars = [1] {
ProgVar @["LayerWriter_0"] { };
};

Function_List @.functions = [0] {
};

ProgEl_List @.init_code = [2] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
MethodCall @[1] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
};

ProgEl_List @.prog_code = [2] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
MethodCall @[1] { 
ProgArg_List @.meth_args = [0] {
};
};
};
};
Program @["LeabraTrialMonitor"] { 
ProgObjList @.objs = [1] {
NetMonitor @["trial_netmon"] { 
NetMonItem_List @.items = [10] {
NetMonItem @["batch"] { };
NetMonItem @["epoch"] { };
NetMonItem @["trial"] { };
NetMonItem @["trial_name"] { };
NetMonItem @["group_name"] { };
NetMonItem @["phase_no"] { };
NetMonItem @["minus_cycles"] { };
NetMonItem @["sse"] { };
NetMonItem @["ext_rew"] { };
NetMonItem @["avg_act"] { };
};
};
};

ProgType_List @.types = [0] {
};

ProgVar_List @.args = [1] {
ProgVar @["network"] { };
};

ProgVar_List @.vars = [2] {
ProgVar @["trial_mon_data"] { };
ProgVar @["trial_netmon"] { };
};

Function_List @.functions = [0] {
};

ProgEl_List @.init_code = [3] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
MethodCall @[1] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
MethodCall @[2] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
};

ProgEl_List @.prog_code = [4] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [0] {
};
};
MethodCall @[1] { 
ProgArg_List @.meth_args = [0] {
};
};
MethodCall @[2] { 
ProgArg_List @.meth_args = [0] {
};
};
MethodCall @[3] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
};
};
Program @["LeabraEpochMonitor"] { 
ProgObjList @.objs = [1] {
NetMonitor @["epoch_netmon"] { 
NetMonItem_List @.items = [8] {
NetMonItem @["batch"] { };
NetMonItem @["epoch"] { };
NetMonItem @["avg_sse"] { };
NetMonItem @["cnt_err"] { };
NetMonItem @["avg_ext_rew"] { };
NetMonItem @["avg_cycles"] { };
NetMonItem @["epoch_time_tot"] { };
NetMonItem @["epoch_time_usr"] { };
};
};
};

ProgType_List @.types = [0] {
};

ProgVar_List @.args = [1] {
ProgVar @["network"] { };
};

ProgVar_List @.vars = [3] {
ProgVar @["epoch_mon_data"] { };
ProgVar @["epoch_netmon"] { };
ProgVar @["epoch_timer"] { };
};

Function_List @.functions = [0] {
};

ProgEl_List @.init_code = [4] {
AssignExpr @[0] { };
MethodCall @[1] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
MethodCall @[2] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
MethodCall @[3] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
};

ProgEl_List @.prog_code = [6] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [0] {
};
};
MethodCall @[1] { 
ProgArg_List @.meth_args = [0] {
};
};
AssignExpr @[2] { };
MethodCall @[3] { 
ProgArg_List @.meth_args = [4] {
ProgArg @[0] { };
ProgArg @[1] { };
ProgArg @[2] { };
ProgArg @[3] { };
};
};
MethodCall @[4] { 
ProgArg_List @.meth_args = [4] {
ProgArg @[0] { };
ProgArg @[1] { };
ProgArg @[2] { };
ProgArg @[3] { };
};
};
MethodCall @[5] { 
ProgArg_List @.meth_args = [0] {
};
};
};
};
Program @["SaveWeights"] { 
ProgObjList @.objs = [0] {
};

ProgType_List @.types = [0] {
};

ProgVar_List @.args = [1] {
ProgVar @["network"] { };
};

ProgVar_List @.vars = [6] {
ProgVar @["tag"] { };
ProgVar @["wts_subdir"] { };
ProgVar @["fname"] { };
ProgVar @["epoch_str"] { };
ProgVar @["batch_str"] { };
ProgVar @["final_tag"] { };
};

Function_List @.functions = [0] {
};

ProgEl_List @.init_code = [0] {
};

ProgEl_List @.prog_code = [6] {
IfReturn @[0] { };
MiscCall @[1] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
MiscCall @[2] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
AssignExpr @[3] { };
MethodCall @[4] { 
ProgArg_List @.meth_args = [4] {
ProgArg @[0] { };
ProgArg @[1] { };
ProgArg @[2] { };
ProgArg @[3] { };
};
};
MethodCall @[5] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
};
};
};
Program_Group @.gp["LeabraAll_Test"] = [7] { 
Program @["LeabraEpochTest"] { 
ProgObjList @.objs = [0] {
};

ProgType_List @.types = [0] {
};

ProgVar_List @.args = [3] {
ProgVar @["network"] { };
ProgVar @["input_data"] { };
ProgVar @["cycle_stop"] { };
};

ProgVar_List @.vars = [9] {
ProgVar @["data_loop_order"] { };
ProgVar @["trial"] { };
ProgVar @["low_inhib_test"] { };
ProgVar @["trial_mon_data"] { };
ProgVar @["last_trial_mon"] { };
ProgVar @["epoch_timer"] { };
ProgVar @["data_loop_index"] { };
ProgVar @["ec_out_pairs"] { };
ProgVar @["ec_in_pairs"] { };
};

Function_List @.functions = [0] {
};

ProgEl_List @.init_code = [2] {
NetCounterInit @[0] { };
AssignExpr @[1] { };
};

ProgEl_List @.prog_code = [12] {
NetCounterInit @[0] { };
MemberAssign @[1] { };
AssignExpr @[2] { };
MethodCall @[3] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
MethodCall @[4] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
NetDataLoop @[5] { 
ProgEl_List @.loop_code = [1] {
ProgramCall @[0] { 
ProgArg_List @.prog_args = [3] {
ProgArg @[0] { };
ProgArg @[1] { };
ProgArg @[2] { };
};
};
};
};
If @[6] { 
ProgEl_List @.true_code = [1] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [0] {
};
};
};
};
MethodCall @[7] { 
ProgArg_List @.meth_args = [0] {
};
};
MethodCall @[8] { 
ProgArg_List @.meth_args = [0] {
};
};
MethodCall @[9] { 
ProgArg_List @.meth_args = [0] {
};
};
ProgramCall @[10] { 
ProgArg_List @.prog_args = [1] {
ProgArg @[0] { };
};
};
MemberAssign @[11] { };
};
};
Program @["LeabraTrialTest"] { 
ProgObjList @.objs = [0] {
};

ProgType_List @.types = [0] {
};

ProgVar_List @.args = [3] {
ProgVar @["network"] { };
ProgVar @["input_data"] { };
ProgVar @["cycle_stop"] { };
};

ProgVar_List @.vars = [2] {
ProgVar @["phase_no"] { };
ProgVar @["update_net_view"] { };
};

Function_List @.functions = [0] {
};

ProgEl_List @.init_code = [1] {
NetCounterInit @[0] { };
};

ProgEl_List @.prog_code = [8] {
NetCounterInit @[0] { };
MethodCall @[1] { 
ProgArg_List @.meth_args = [0] {
};
};
WhileLoop @[2] { 
ProgEl_List @.loop_code = [3] {
ProgramCall @[0] { 
ProgArg_List @.prog_args = [3] {
ProgArg @[0] { };
ProgArg @[1] { };
ProgArg @[2] { };
};
};
NetCounterIncr @[1] { };
MethodCall @[2] { 
ProgArg_List @.meth_args = [0] {
};
};
};
};
MethodCall @[3] { 
ProgArg_List @.meth_args = [0] {
};
};
MethodCall @[4] { 
ProgArg_List @.meth_args = [0] {
};
};
If @[5] { 
ProgEl_List @.true_code = [1] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [0] {
};
};
};
};
ProgramCall @[6] { 
ProgArg_List @.prog_args = [1] {
ProgArg @[0] { };
};
};
NetUpdateView @[7] { };
};
};
Program @["LeabraSettleTest"] { 
ProgObjList @.objs = [0] {
};

ProgType_List @.types = [0] {
};

ProgVar_List @.args = [3] {
ProgVar @["network"] { };
ProgVar @["input_data"] { };
ProgVar @["cyc_stop"] { };
};

ProgVar_List @.vars = [3] {
ProgVar @["cycle"] { };
ProgVar @["min_cycles"] { };
ProgVar @["update_net_view"] { };
};

Function_List @.functions = [0] {
};

ProgEl_List @.init_code = [1] {
NetCounterInit @[0] { };
};

ProgEl_List @.prog_code = [12] {
NetCounterInit @[0] { };
MethodCall @[1] { 
ProgArg_List @.meth_args = [0] {
};
};
ProgramCall @[2] { 
ProgArg_List @.prog_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
MethodCall @[3] { 
ProgArg_List @.meth_args = [0] {
};
};
If @[4] { 
ProgEl_List @.true_code = [1] {
AssignExpr @[0] { };
};
};
Else @[5] { 
ProgEl_List @.else_code = [1] {
AssignExpr @[0] { };
};
};
WhileLoop @[6] { 
ProgEl_List @.loop_code = [4] {
ProgramCall @[0] { 
ProgArg_List @.prog_args = [1] {
ProgArg @[0] { };
};
};
NetCounterIncr @[1] { };
IfContinue @[2] { };
IfBreak @[3] { };
};
};
MethodCall @[7] { 
ProgArg_List @.meth_args = [0] {
};
};
MethodCall @[8] { 
ProgArg_List @.meth_args = [0] {
};
};
If @[9] { 
ProgEl_List @.true_code = [0] {
};
};
If @[10] { 
ProgEl_List @.true_code = [1] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [0] {
};
};
};
};
NetUpdateView @[11] { };
};
};
Program @["LeabraCycleTest"] { 
ProgObjList @.objs = [0] {
};

ProgType_List @.types = [0] {
};

ProgVar_List @.args = [1] {
ProgVar @["network"] { };
};

ProgVar_List @.vars = [1] {
ProgVar @["update_net_view"] { };
};

Function_List @.functions = [0] {
};

ProgEl_List @.init_code = [0] {
};

ProgEl_List @.prog_code = [2] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [0] {
};
};
NetUpdateView @[1] { };
};
};
Program @["ApplyInputsTest"] { 
ProgObjList @.objs = [1] {
LayerWriter @["LayerWriter_0"] { 
LayerDataEl_List @.layer_data = [3] {
LayerWriterEl @[0] { };
LayerWriterEl @[1] { };
LayerWriterEl @[2] { };
};
};
};

ProgType_List @.types = [0] {
};

ProgVar_List @.args = [2] {
ProgVar @["network"] { };
ProgVar @["input_data"] { };
};

ProgVar_List @.vars = [2] {
ProgVar @["LayerWriter_0"] { };
ProgVar @["group_name"] { };
};

Function_List @.functions = [0] {
};

ProgEl_List @.init_code = [2] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
MethodCall @[1] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
};

ProgEl_List @.prog_code = [4] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
MethodCall @[1] { 
ProgArg_List @.meth_args = [0] {
};
};
AssignExpr @[2] { };
MemberAssign @[3] { };
};
};
Program @["LeabraTrialMonitorTest"] { 
ProgObjList @.objs = [1] {
NetMonitor @["trial_netmon"] { 
NetMonItem_List @.items = [7] {
NetMonItem @["batch"] { };
NetMonItem @["epoch"] { };
NetMonItem @["trial"] { };
NetMonItem @["trial_name"] { };
NetMonItem @["minus_cycles"] { };
NetMonItem @["sse"] { };
NetMonItem @["EC_out_act"] { };
};
};
};

ProgType_List @.types = [0] {
};

ProgVar_List @.args = [1] {
ProgVar @["network"] { };
};

ProgVar_List @.vars = [3] {
ProgVar @["trial_mon_data"] { };
ProgVar @["last_trial_mon_data"] { };
ProgVar @["trial_netmon"] { };
};

Function_List @.functions = [0] {
};

ProgEl_List @.init_code = [3] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
MethodCall @[1] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
MethodCall @[2] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
};

ProgEl_List @.prog_code = [6] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [0] {
};
};
MethodCall @[1] { 
ProgArg_List @.meth_args = [0] {
};
};
MethodCall @[2] { 
ProgArg_List @.meth_args = [0] {
};
};
MethodCall @[3] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
AddNewDataRow @[4] { };
MethodCall @[5] { 
ProgArg_List @.meth_args = [3] {
ProgArg @[0] { };
ProgArg @[1] { };
ProgArg @[2] { };
};
};
};
};
Program @["LeabraEpochMonitorTest"] { 
ProgObjList @.objs = [1] {
NetMonitor @["epoch_netmon"] { 
NetMonItem_List @.items = [2] {
NetMonItem @["batch"] { };
NetMonItem @["epoch"] { };
};
};
};

ProgType_List @.types = [0] {
};

ProgVar_List @.args = [1] {
ProgVar @["network"] { };
};

ProgVar_List @.vars = [2] {
ProgVar @["epoch_mon_data"] { };
ProgVar @["epoch_netmon"] { };
};

Function_List @.functions = [0] {
};

ProgEl_List @.init_code = [3] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [2] {
ProgArg @[0] { };
ProgArg @[1] { };
};
};
MethodCall @[1] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
MethodCall @[2] { 
ProgArg_List @.meth_args = [1] {
ProgArg @[0] { };
};
};
};

ProgEl_List @.prog_code = [3] {
MethodCall @[0] { 
ProgArg_List @.meth_args = [0] {
};
};
MethodCall @[1] { 
ProgArg_List @.meth_args = [0] {
};
};
MethodCall @[2] { 
ProgArg_List @.meth_args = [0] {
};
};
};
};
};
};

taViewer_List @.viewers = [1] {
MainWindowViewer @["Browser3"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_win_lft"] { };
UserDataItem @["view_win_top"] { };
UserDataItem @["view_win_wd"] { };
UserDataItem @["view_win_ht"] { };
UserDataItem @["view_win_iconified"] { };
UserDataItem @["view_splitter_state"] { };
};

ToolBar_List @.toolbars = [1] {
ToolBar @["Application"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_win_visible"] { };
};
};
};

FrameViewer_List @.frames = [3] {
BrowseViewerTaBase @["Tree"] { };
PanelViewer @["Panels"] { };
T3PanelViewer @["T3Frames"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_panel_selected"] { };
};

T3Panel_List @.panels = [1] {
T3Panel @["SLnet_pairs"] { 
T3DataView_List @.root_view.children = [1] {
NetView @["SLnet_pairs_View"] { 
T3Annotation_List @.annotations = [0] {
};

T3DataView_List @.annote_children = [0] {
};

ScaleRange_List @.scale_ranges = [10] {
ScaleRange @[0] { };
ScaleRange @[1] { };
ScaleRange @[2] { };
ScaleRange @[3] { };
ScaleRange @[4] { };
ScaleRange @[5] { };
ScaleRange @[6] { };
ScaleRange @[7] { };
ScaleRange @[8] { };
ScaleRange @[9] { };
};
};
};

T3SavedView_List @.saved_views = [10] {
T3SavedView @["Vw_0"] { };
T3SavedView @["Vw_1"] { };
T3SavedView @["Vw_2"] { };
T3SavedView @["Vw_3"] { };
T3SavedView @["Vw_4"] { };
T3SavedView @["Vw_5"] { };
T3SavedView @["Vw_6"] { };
T3SavedView @["Vw_7"] { };
T3SavedView @["Vw_8"] { };
T3SavedView @["Vw_9"] { };
};
};
};
};
};

DockViewer_List @.docks = [1] {
ToolBoxDockViewer @["Tools"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["view_win_lft"] { };
UserDataItem @["view_win_top"] { };
UserDataItem @["view_win_wd"] { };
UserDataItem @["view_win_ht"] { };
UserDataItem @["view_win_iconified"] { };
UserDataItem @["view_visible"] { };
};
};
};
};
};

Network_Group @.networks = [1] {
LeabraNetwork @["SLnet_pairs"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["trial_cos_diff"] { };
UserDataItem @["avg_act_diff"] { };
UserDataItem @["cos_diff"] { };
UserDataItem @["cos_err"] { };
UserDataItem @["norm_err"] { };
UserDataItem @["ext_rew"] { };
UserDataItem @["maxda"] { };
UserDataItem @["minus_output_name"] { };
UserDataItem @["minus_cycles"] { };
UserDataItem @["ct_cycle"] { };
UserDataItem @["phase_no"] { };
UserDataItem @["phase"] { };
UserDataItem @["sse"] { };
UserDataItem @["output_name"] { };
UserDataItem @["trial_name"] { };
UserDataItem @["group_name"] { };
UserDataItem @["time"] { };
UserDataItem @["cycle"] { };
UserDataItem @["tick"] { };
UserDataItem @["trial"] { };
UserDataItem @["group"] { };
UserDataItem @["epoch"] { };
UserDataItem @["batch"] { };
};

BaseSpec_Group @.specs = [1] {
LeabraLayerSpec @["Input_Output"] { 
BaseSpec_Group @.children = [0] {
};
};
BaseSpec_Group @.gp["HippoSpecs"] = [4] { 
LeabraUnitSpec @["HippoUnitSpec"] { 
BaseSpec_Group @.children = [0] {
};

Schedule @.noise_sched = [0] {
};
};
HippoEncoderConSpec @["EC_CA1ConSpecs"] { 
BaseSpec_Group @.children = [6] {
HippoEncoderConSpec @["EC_in_CA1"] { 
BaseSpec_Group @.children = [0] {
};

Schedule @.lrate_sched = [0] {
};
};
HippoEncoderConSpec @["CA1_EC_out"] { 
BaseSpec_Group @.children = [0] {
};

Schedule @.lrate_sched = [0] {
};
};
HippoEncoderConSpec @["EC_out_CA1"] { 
BaseSpec_Group @.children = [0] {
};

Schedule @.lrate_sched = [0] {
};
};
HippoEncoderConSpec @["EC_in_EC_out"] { 
BaseSpec_Group @.children = [0] {
};

Schedule @.lrate_sched = [0] {
};
};
HippoEncoderConSpec @["EC_out_EC_in"] { 
BaseSpec_Group @.children = [0] {
};

Schedule @.lrate_sched = [0] {
};
};
LeabraConSpec @["Input_EC_in"] { 
BaseSpec_Group @.children = [0] {
};

Schedule @.lrate_sched = [0] {
};
};
};

Schedule @.lrate_sched = [0] {
};
};
XCalCHLConSpec @["HippoConSpecs"] { 
BaseSpec_Group @.children = [5] {
LeabraBiasSpec @["HippoBiasSpec"] { 
BaseSpec_Group @.children = [0] {
};

Schedule @.lrate_sched = [0] {
};
};
XCalCHLConSpec @["PerfPath"] { 
BaseSpec_Group @.children = [0] {
};

Schedule @.lrate_sched = [0] {
};
};
XCalCHLConSpec @["Mossy"] { 
BaseSpec_Group @.children = [0] {
};

Schedule @.lrate_sched = [0] {
};
};
XCalCHLConSpec @["CA3_CA3"] { 
BaseSpec_Group @.children = [0] {
};

Schedule @.lrate_sched = [0] {
};
};
XCalCHLConSpec @["CA3_CA1"] { 
BaseSpec_Group @.children = [0] {
};

Schedule @.lrate_sched = [0] {
};
};
};

Schedule @.lrate_sched = [0] {
};
};
ThetaPhaseLayerSpec @["HippoLayerSpec"] { 
BaseSpec_Group @.children = [4] {
ECoutLayerSpec @["EC_out"] { 
BaseSpec_Group @.children = [1] {
ECinLayerSpec @["EC_in"] { 
BaseSpec_Group @.children = [0] {
};
};
};
};
LeabraLayerSpec @["DG"] { 
BaseSpec_Group @.children = [0] {
};
};
CA3LayerSpec @["CA3"] { 
BaseSpec_Group @.children = [0] {
};
};
CA1LayerSpec @["CA1"] { 
BaseSpec_Group @.children = [0] {
};
};
};
};
BaseSpec_Group @.gp["HippoPrjns"] = [6] { 
FullPrjnSpec @["FullPrjn"] { 
BaseSpec_Group @.children = [0] {
};
};
OneToOnePrjnSpec @["OneToOne"] { 
BaseSpec_Group @.children = [0] {
};
};
GpOneToOnePrjnSpec @["GpOneToOne"] { 
BaseSpec_Group @.children = [0] {
};
};
UniformRndPrjnSpec @["RandomPerfPath"] { 
BaseSpec_Group @.children = [0] {
};
};
UniformRndPrjnSpec @["UniformRndMossy"] { 
BaseSpec_Group @.children = [0] {
};
};
SymmetricPrjnSpec @["SymmetricPrjnSpec"] { 
BaseSpec_Group @.children = [0] {
};
};
};
};
};

Layer_Group @.layers = [1] {
LeabraLayer @["Input"] { 
Projection_Group @.projections = [0] {
};

Unit_Group @.units = [8] {
};
};
Layer_Group @.gp["Hippocampus"] = [5] { 
LeabraLayer @["EC_in"] { 
Projection_Group @.projections = [2] {
LeabraPrjn @["Fm_EC_out"] { };
LeabraPrjn @["Fm_Input"] { };
};

Unit_Group @.units = [8] {
};
};
LeabraLayer @["EC_out"] { 
UserDataItem_List @*(.user_data_) {
UserDataItem @["enc_sse"] { };
UserDataItem @["enc_norm_err"] { };
};

Projection_Group @.projections = [1] {
LeabraPrjn @["Fm_CA1"] { };
};

Unit_Group @.units = [8] {
};
};
LeabraLayer @["DG"] { 
Projection_Group @.projections = [1] {
LeabraPrjn @["Fm_EC_in"] { };
};

Unit_Group @.units = [400] {
};
};
LeabraLayer @["CA3"] { 
Projection_Group @.projections = [3] {
LeabraPrjn @["Fm_EC_in"] { };
LeabraPrjn @["Fm_DG"] { };
LeabraPrjn @["Fm_CA3"] { };
};

Unit_Group @.units = [80] {
};
};
LeabraLayer @["CA1"] { 
Projection_Group @.projections = [3] {
LeabraPrjn @["Fm_EC_in"] { };
LeabraPrjn @["Fm_EC_out"] { };
LeabraPrjn @["Fm_CA3"] { };
};

Unit_Group @.units = [100] {
};
};
};
};

Weights_List @.weights = [0] {
};
};
};
};
LeabraProject .projects["Schapiro_etal_hippocampus_model_exercise"] {
name="Schapiro_etal_hippocampus_model_exercise";
desc="


";
tags=;
version {
major=0;
minor=0;
step=0;
};
license {
owner=;
license=NO_LIC;
org=;
year="2011";
custom=;
};
wiki_url {
sync=0;
wiki=;
url=;
};
docs {
name="docs";
el_typ=taDoc;
el_def=0;
};
wizards {
name="wizards";
el_typ=LeabraWizard;
el_def=0;
LeabraWizard @["LeabraWizard_1"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItemBase;
el_def=0;
UserDataItem @["NO_CLIP"] {
name="NO_CLIP";
value 1 0=1;
val_type_fixed=0;
};
};
name="LeabraWizard_1";
};
};
ctrl_panels {
name="ctrl_panels";
el_typ=ControlPanel;
el_def=0;
ControlPanel @["ControlPanel"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["user_pinned"] {
name="user_pinned";
value 1 0=1;
val_type_fixed=0;
};
};
name="ControlPanel";
running_updt=0;
desc="Control panel for Hippocampus Simulation";
mbrs {
name="mbrs";
el_typ=EditMbrItem;
el_def=0;
EditMbrItem @[0] {
label="train_patterns";
desc="datatable with training patterns -- not used by this program, but passed to train program";
cust_desc=1;
base=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["input_data"]$$;
mbr=ProgVar::object_val;
is_numeric=0;
is_single=1;
param_search {
srch=NO;
min_val=0;
max_val=1;
next_val=0;
incr=0.1;
};
};
EditMbrItem @[1] {
label="writeout_filename";
desc=" string value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
cust_desc=0;
base=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["fname_prefix"]$$;
mbr=ProgVar::string_val;
is_numeric=0;
is_single=1;
param_search {
srch=NO;
min_val=0;
max_val=1;
next_val=0;
incr=0.1;
};
};
EditMbrItem @[2] {
label="num_trials_per_epoch";
desc=" integer value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
cust_desc=0;
base=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["max_num_trials"]$$;
mbr=ProgVar::int_val;
is_numeric=1;
is_single=1;
param_search {
srch=NO;
min_val=0;
max_val=1;
next_val=0;
incr=0.1;
};
};
EditMbrItem @[3] {
label="num_epochs_per_batch";
desc="maximum number of epochs to run";
cust_desc=1;
base=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["max_epoch"]$$;
mbr=ProgVar::int_val;
is_numeric=1;
is_single=1;
param_search {
srch=NO;
min_val=0;
max_val=1;
next_val=0;
incr=0.1;
};
};
EditMbrItem @[4] {
label="num_batches";
desc="maximum number of batch runs to perform";
cust_desc=1;
base=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["max_batch"]$$;
mbr=ProgVar::int_val;
is_numeric=1;
is_single=1;
param_search {
srch=NO;
min_val=0;
max_val=1;
next_val=0;
incr=0.1;
};
};
EditMbrItem @[5] {
label="run_test_during_training";
desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
cust_desc=1;
base=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["runtest"]$$;
mbr=ProgVar::bool_val;
is_numeric=0;
is_single=1;
param_search {
srch=NO;
min_val=0;
max_val=1;
next_val=0;
incr=0.1;
};
};
EditMbrItem @[6] {
label="MSP_learning_rate";
desc="default .02";
cust_desc=1;
base=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["MSP_learning_rate"]$$;
mbr=ProgVar::real_val;
is_numeric=1;
is_single=1;
param_search {
srch=NO;
min_val=0;
max_val=1;
next_val=0;
incr=0.1000000014901161;
};
};
EditMbrItem @[7] {
label="CA1_proportion_act";
desc="default .25";
cust_desc=1;
base=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["CA1_prop_act"]$$;
mbr=ProgVar::real_val;
is_numeric=1;
is_single=1;
param_search {
srch=NO;
min_val=0;
max_val=1;
next_val=0;
incr=0.1000000014901161;
};
};
};
mths {
name="mths";
el_typ=EditMthItem;
el_def=0;
group_type=GT_BUTTONS;
EditMthItem @[0] {
label="Batch_Init";
desc=" set the program state back to the beginning";
cust_desc=0;
base=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$$;
mth=Program::Init;
};
EditMthItem @[1] {
label="Batch_Run";
desc=" run the program -- if not yet Init, will run Init first";
cust_desc=0;
base=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
mth=Program::Run_Gui;
};
EditMthItem @[2] {
label="Batch_Step";
desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
cust_desc=0;
base=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
mth=Program::Step_Gui;
};
EditMthItem @[3] {
label="Batch_Stop";
desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
cust_desc=0;
base=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
mth=Program::Stop;
};
EditMthItem @[4] {
label="Test_Init";
desc=" set the program state back to the beginning";
cust_desc=0;
base=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$$;
mth=Program::Init;
};
EditMthItem @[5] {
label="Test_Run";
desc=" run the program -- if not yet Init, will run Init first";
cust_desc=0;
base=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$;
mth=Program::Run_Gui;
};
EditMthItem @[6] {
label="Test_Step";
desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
cust_desc=0;
base=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$;
mth=Program::Step_Gui;
};
EditMthItem @[7] {
label="Test_Stop";
desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
cust_desc=0;
base=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$;
mth=Program::Stop;
};
};
};
ClusterRun @["ClusterRun"] {
name="ClusterRun";
running_updt=0;
desc=;
mbrs {
name="mbrs";
el_typ=EditMbrItem;
el_def=0;
};
mths {
name="mths";
el_typ=EditMthItem;
el_def=0;
group_type=GT_BUTTONS;
};
jobs_running {
name="jobs_running";
desc=;
data {
name="data";
el_typ=String_Data;
el_def=0;
String_Data @["tag"] {
name="tag";
desc="unique tag id for this job -- all files etc are named according to this tag";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["notes"] {
name="notes";
desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["params"] {
name="params";
desc="emergent parameters based on currently selected items in the ClusterRun";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["status"] {
name="status";
desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["status_info"] {
name="status_info";
desc="more detailed information about status";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["submit_time"] {
name="submit_time";
desc="when was the job submitted (tracks time from emergent client submission)";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["start_time"] {
name="start_time";
desc="when did the job actually start running";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["end_time"] {
name="end_time";
desc="when did the job finish running";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["job_no"] {
name="job_no";
desc="job number on cluster -- assigned once the job is submitted to the cluster";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["job_out"] {
name="job_out";
desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["job_out_file"] {
name="job_out_file";
desc="job output file -- file name containing full job output information -- file name should be tag.out";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["dat_files"] {
name="dat_files";
desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["other_files"] {
name="other_files";
desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
int_Data @["command_id"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
};
name="command_id";
desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["command"] {
name="command";
desc="emergent command line, up to point of parameters";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["repo_url"] {
name="repo_url";
desc="name of repository to run job on";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["cluster"] {
name="cluster";
desc="name of cluster to run job on";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["queue"] {
name="queue";
desc="if specified, indicate a particular queue on the computing resource";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["run_time"] {
name="run_time";
desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
int_Data @["ram_gb"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
};
name="ram_gb";
desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
int_Data @["n_threads"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
};
name="n_threads";
desc="number of parallel threads to use for running";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
int_Data @["mpi_nodes"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
};
name="mpi_nodes";
desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
int_Data @["pb_batches"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
};
name="pb_batches";
desc="if > 0, use parallel batch mode with this number of batches";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
int_Data @["pb_nodes"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
};
name="pb_nodes";
desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["submit_svn"] {
name="submit_svn";
desc="svn revision for the original job submission";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["submit_job"] {
name="submit_job";
desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
};
data_flags=AUTO_CALC;
auto_load=NO_AUTO_LOAD;
auto_load_file=;
keygen 4 0=0;
row_indexes {
name="row_indexes";
[0] };
};
jobs_done {
name="jobs_done";
desc=;
data {
name="data";
el_typ=String_Data;
el_def=0;
String_Data @["tag"] {
name="tag";
desc="unique tag id for this job -- all files etc are named according to this tag";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["notes"] {
name="notes";
desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["params"] {
name="params";
desc="emergent parameters based on currently selected items in the ClusterRun";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["status"] {
name="status";
desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["status_info"] {
name="status_info";
desc="more detailed information about status";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["submit_time"] {
name="submit_time";
desc="when was the job submitted (tracks time from emergent client submission)";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["start_time"] {
name="start_time";
desc="when did the job actually start running";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["end_time"] {
name="end_time";
desc="when did the job finish running";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["job_no"] {
name="job_no";
desc="job number on cluster -- assigned once the job is submitted to the cluster";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["job_out"] {
name="job_out";
desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["job_out_file"] {
name="job_out_file";
desc="job output file -- file name containing full job output information -- file name should be tag.out";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["dat_files"] {
name="dat_files";
desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["other_files"] {
name="other_files";
desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
int_Data @["command_id"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
};
name="command_id";
desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["command"] {
name="command";
desc="emergent command line, up to point of parameters";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["repo_url"] {
name="repo_url";
desc="name of repository to run job on";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["cluster"] {
name="cluster";
desc="name of cluster to run job on";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["queue"] {
name="queue";
desc="if specified, indicate a particular queue on the computing resource";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["run_time"] {
name="run_time";
desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
int_Data @["ram_gb"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
};
name="ram_gb";
desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
int_Data @["n_threads"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
};
name="n_threads";
desc="number of parallel threads to use for running";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
int_Data @["mpi_nodes"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
};
name="mpi_nodes";
desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
int_Data @["pb_batches"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
};
name="pb_batches";
desc="if > 0, use parallel batch mode with this number of batches";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
int_Data @["pb_nodes"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
};
name="pb_nodes";
desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["submit_svn"] {
name="submit_svn";
desc="svn revision for the original job submission";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["submit_job"] {
name="submit_job";
desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
};
data_flags=AUTO_CALC;
auto_load=NO_AUTO_LOAD;
auto_load_file=;
keygen 4 0=0;
row_indexes {
name="row_indexes";
[0] };
};
jobs_archive {
name="jobs_archive";
desc=;
data {
name="data";
el_typ=String_Data;
el_def=0;
String_Data @["tag"] {
name="tag";
desc="unique tag id for this job -- all files etc are named according to this tag";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["notes"] {
name="notes";
desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["params"] {
name="params";
desc="emergent parameters based on currently selected items in the ClusterRun";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["status"] {
name="status";
desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["status_info"] {
name="status_info";
desc="more detailed information about status";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["submit_time"] {
name="submit_time";
desc="when was the job submitted (tracks time from emergent client submission)";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["start_time"] {
name="start_time";
desc="when did the job actually start running";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["end_time"] {
name="end_time";
desc="when did the job finish running";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["job_no"] {
name="job_no";
desc="job number on cluster -- assigned once the job is submitted to the cluster";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["job_out"] {
name="job_out";
desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["job_out_file"] {
name="job_out_file";
desc="job output file -- file name containing full job output information -- file name should be tag.out";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["dat_files"] {
name="dat_files";
desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["other_files"] {
name="other_files";
desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
int_Data @["command_id"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
};
name="command_id";
desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["command"] {
name="command";
desc="emergent command line, up to point of parameters";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["repo_url"] {
name="repo_url";
desc="name of repository to run job on";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["cluster"] {
name="cluster";
desc="name of cluster to run job on";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["queue"] {
name="queue";
desc="if specified, indicate a particular queue on the computing resource";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["run_time"] {
name="run_time";
desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
int_Data @["ram_gb"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
};
name="ram_gb";
desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
int_Data @["n_threads"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
};
name="n_threads";
desc="number of parallel threads to use for running";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
int_Data @["mpi_nodes"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
};
name="mpi_nodes";
desc="number of nodes to use for mpi run -- 0 or -1 means not to use mpi";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
int_Data @["pb_batches"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
};
name="pb_batches";
desc="if > 0, use parallel batch mode with this number of batches";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
int_Data @["pb_nodes"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
};
name="pb_nodes";
desc="if doing parallel batch mode, and cluster has by_node policy, then this is the number of nodes to allocate to the overall job";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["submit_svn"] {
name="submit_svn";
desc="svn revision for the original job submission";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["submit_job"] {
name="submit_job";
desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
};
data_flags=AUTO_CALC;
auto_load=NO_AUTO_LOAD;
auto_load_file=;
keygen 4 0=0;
row_indexes {
name="row_indexes";
[0] };
};
file_list {
name="file_list";
desc=;
data {
name="data";
el_typ=String_Data;
el_def=0;
String_Data @["file_name"] {
name="file_name";
desc="name of file -- does not include any path information";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["tag"] {
name="tag";
desc="job tag associated with this file";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["size"] {
name="size";
desc="size of file -- with typical suffixes (K = kilobytes, M = megabytes, G = gigabytes)";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["kind"] {
name="kind";
desc="type of file";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["date_modified"] {
name="date_modified";
desc="timestamp for when the file was last modified";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["date_created"] {
name="date_created";
desc="timestamp for when the file was first created";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["svn_file_path"] {
name="svn_file_path";
desc="path to file in SVN repository, relative to root of svn_repo repository";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["proj_file_path"] {
name="proj_file_path";
desc="path to file relative to the parent project directory -- e.g., results/filename.dat";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["file_path"] {
name="file_path";
desc="full path to file on local file system, including all parent directories and name of file -- takes you directly to the file";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
};
data_flags=AUTO_CALC;
auto_load=NO_AUTO_LOAD;
auto_load_file=;
keygen 4 0=0;
row_indexes {
name="row_indexes";
[0] };
};
cluster_info {
name="cluster_info";
desc=;
data {
name="data";
el_typ=String_Data;
el_def=0;
String_Data @["queue"] {
name="queue";
desc="queue that this info relates to";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["job_no"] {
name="job_no";
desc="job number or total number of actve jobs";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["user"] {
name="user";
desc="user name";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["state"] {
name="state";
desc="current scheduler state -- or description of global state info";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["procs"] {
name="procs";
desc="number of processors for this job or for global state info";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
String_Data @["start_time"] {
name="start_time";
desc="timestamp for when the job was submitted or started running";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
};
};
data_flags=AUTO_CALC;
auto_load=NO_AUTO_LOAD;
auto_load_file=;
keygen 4 0=0;
row_indexes {
name="row_indexes";
[0] };
};
search_algos {
name="search_algos";
el_typ=ParamSearchAlgo;
el_def=0;
};
cur_search_algo=NULL;
last_submit_time=;
notes=;
extra_files=;
svn_repo=;
repo_url=;
cluster=;
queue=;
run_time=;
ram_gb=0;
n_threads=1;
use_mpi=0;
mpi_nodes=10;
parallel_batch=0;
pb_batches=10;
pb_nodes=0;
nowin_x=0;
};
};
data {
name="data";
el_typ=DataTable;
el_def=0;
save_tables=1;
DataTable_Group @.gp["InputData"] {
name="InputData";
el_typ=DataTable;
el_def=0;
save_tables=1;
DataTable @["Train_pairs"] {
name="Train_pairs";
desc=;
data {
name="data";
el_typ=String_Data;
el_def=0;
String_Data @["Name"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.2064220160245895;
val_type_fixed=0;
};
};
name="Name";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=135;
ar {
name="ar";
[1599] "GH";"HA";"AB";"BG";"GH";"HE";"EF";"FA";"AB";"BC";
"CD";"DE";"EF";"FG";"GH";"HA";"AB";"BG";"GH";"HC";
"CD";"DG";"GH";"HA";"AB";"BC";"CD";"DG";"GH";"HE";
"EF";"FA";"AB";"BG";"GH";"HE";"EF";"FG";"GH";"HE";
"EF";"FC";"CD";"DE";"EF";"FA";"AB";"BE";"EF";"FA";
"AB";"BC";"CD";"DA";"AB";"BG";"GH";"HE";"EF";"FC";
"CD";"DG";"GH";"HA";"AB";"BC";"CD";"DG";"GH";"HA";
"AB";"BC";"CD";"DE";"EF";"FG";"GH";"HC";"CD";"DE";
"EF";"FA";"AB";"BC";"CD";"DG";"GH";"HC";"CD";"DE";
"EF";"FA";"AB";"BG";"GH";"HC";"CD";"DE";"EF";"FG";
"GH";"HE";"EF";"FA";"AB";"BC";"CD";"DG";"GH";"HC";
"CD";"DG";"GH";"HA";"AB";"BG";"GH";"HC";"CD";"DA";
"AB";"BC";"CD";"DE";"EF";"FC";"CD";"DG";"GH";"HE";
"EF";"FG";"GH";"HC";"CD";"DG";"GH";"HC";"CD";"DE";
"EF";"FA";"AB";"BE";"EF";"FG";"GH";"HA";"AB";"BE";
"EF";"FC";"CD";"DA";"AB";"BC";"CD";"DA";"AB";"BG";
"GH";"HC";"CD";"DE";"EF";"FA";"AB";"BE";"EF";"FC";
"CD";"DE";"EF";"FC";"CD";"DA";"AB";"BG";"GH";"HA";
"AB";"BG";"GH";"HE";"EF";"FG";"GH";"HA";"AB";"BC";
"CD";"DA";"AB";"BG";"GH";"HA";"AB";"BG";"GH";"HA";
"AB";"BC";"CD";"DG";"GH";"HC";"CD";"DG";"GH";"HA";
"AB";"BC";"CD";"DA";"AB";"BG";"GH";"HE";"EF";"FA";
"AB";"BG";"GH";"HE";"EF";"FC";"CD";"DE";"EF";"FC";
"CD";"DA";"AB";"BC";"CD";"DA";"AB";"BG";"GH";"HC";
"CD";"DG";"GH";"HC";"CD";"DA";"AB";"BG";"GH";"HC";
"CD";"DA";"AB";"BC";"CD";"DA";"AB";"BG";"GH";"HE";
"EF";"FA";"AB";"BC";"CD";"DG";"GH";"HA";"AB";"BE";
"EF";"FC";"CD";"DE";"EF";"FC";"CD";"DE";"EF";"FA";
"AB";"BE";"EF";"FA";"AB";"BC";"CD";"DE";"EF";"FG";
"GH";"HA";"AB";"BG";"GH";"HC";"CD";"DE";"EF";"FG";
"GH";"HE";"EF";"FC";"CD";"DG";"GH";"HE";"EF";"FC";
"CD";"DG";"GH";"HE";"EF";"FA";"AB";"BC";"CD";"DA";
"AB";"BG";"GH";"HA";"AB";"BC";"CD";"DG";"GH";"HC";
"CD";"DA";"AB";"BG";"GH";"HC";"CD";"DA";"AB";"BC";
"CD";"DE";"EF";"FC";"CD";"DE";"EF";"FA";"AB";"BC";
"CD";"DE";"EF";"FA";"AB";"BC";"CD";"DG";"GH";"HA";
"AB";"BG";"GH";"HE";"EF";"FC";"CD";"DE";"EF";"FA";
"AB";"BC";"CD";"DG";"GH";"HE";"EF";"FA";"AB";"BC";
"CD";"DE";"EF";"FC";"CD";"DG";"GH";"HA";"AB";"BG";
"GH";"HA";"AB";"BC";"CD";"DE";"EF";"FA";"AB";"BE";
"EF";"FA";"AB";"BE";"EF";"FC";"CD";"DG";"GH";"HE";
"EF";"FG";"GH";"HC";"CD";"DE";"EF";"FA";"AB";"BE";
"EF";"FC";"CD";"DG";"GH";"HE";"EF";"FG";"GH";"HE";
"EF";"FA";"AB";"BG";"GH";"HA";"AB";"BC";"CD";"DA";
"AB";"BG";"GH";"HE";"EF";"FC";"CD";"DA";"AB";"BE";
"EF";"FA";"AB";"BE";"EF";"FA";"AB";"BG";"GH";"HE";
"EF";"FA";"AB";"BE";"EF";"FG";"GH";"HE";"EF";"FG";
"GH";"HC";"CD";"DG";"GH";"HA";"AB";"BC";"CD";"DG";
"GH";"HA";"AB";"BC";"CD";"DE";"EF";"FC";"CD";"DE";
"EF";"FC";"CD";"DA";"AB";"BG";"GH";"HA";"AB";"BC";
"CD";"DA";"AB";"BC";"CD";"DG";"GH";"HA";"AB";"BE";
"EF";"FC";"CD";"DE";"EF";"FG";"GH";"HC";"CD";"DG";
"GH";"HC";"CD";"DE";"EF";"FA";"AB";"BG";"GH";"HA";
"AB";"BE";"EF";"FG";"GH";"HE";"EF";"FA";"AB";"BC";
"CD";"DG";"GH";"HA";"AB";"BG";"GH";"HE";"EF";"FC";
"CD";"DA";"AB";"BC";"CD";"DA";"AB";"BE";"EF";"FA";
"AB";"BC";"CD";"DE";"EF";"FC";"CD";"DE";"EF";"FC";
"CD";"DG";"GH";"HE";"EF";"FC";"CD";"DE";"EF";"FA";
"AB";"BG";"GH";"HC";"CD";"DE";"EF";"FA";"AB";"BC";
"CD";"DA";"AB";"BC";"CD";"DA";"AB";"BE";"EF";"FC";
"CD";"DE";"EF";"FA";"AB";"BC";"CD";"DE";"EF";"FC";
"CD";"DG";"GH";"HE";"EF";"FG";"GH";"HE";"EF";"FC";
"CD";"DA";"AB";"BE";"EF";"FG";"GH";"HC";"CD";"DA";
"AB";"BC";"CD";"DA";"AB";"BC";"CD";"DE";"EF";"FC";
"CD";"DG";"GH";"HE";"EF";"FG";"GH";"HE";"EF";"FG";
"GH";"HA";"AB";"BE";"EF";"FC";"CD";"DE";"EF";"FA";
"AB";"BC";"CD";"DA";"AB";"BE";"EF";"FG";"GH";"HC";
"CD";"DG";"GH";"HE";"EF";"FA";"AB";"BE";"EF";"FC";
"CD";"DG";"GH";"HA";"AB";"BC";"CD";"DG";"GH";"HC";
"CD";"DG";"GH";"HC";"CD";"DA";"AB";"BE";"EF";"FC";
"CD";"DA";"AB";"BC";"CD";"DE";"EF";"FA";"AB";"BE";
"EF";"FA";"AB";"BG";"GH";"HC";"CD";"DG";"GH";"HA";
"AB";"BC";"CD";"DA";"AB";"BE";"EF";"FC";"CD";"DE";
"EF";"FG";"GH";"HA";"AB";"BE";"EF";"FA";"AB";"BE";
"EF";"FC";"CD";"DE";"EF";"FG";"GH";"HC";"CD";"DE";
"EF";"FC";"CD";"DG";"GH";"HC";"CD";"DE";"EF";"FG";
"GH";"HC";"CD";"DA";"AB";"BG";"GH";"HE";"EF";"FC";
"CD";"DE";"EF";"FG";"GH";"HA";"AB";"BC";"CD";"DG";
"GH";"HE";"EF";"FG";"GH";"HA";"AB";"BE";"EF";"FA";
"AB";"BE";"EF";"FG";"GH";"HC";"CD";"DE";"EF";"FC";
"CD";"DA";"AB";"BE";"EF";"FC";"CD";"DA";"AB";"BG";
"GH";"HA";"AB";"BC";"CD";"DE";"EF";"FC";"CD";"DE";
"EF";"FC";"CD";"DE";"EF";"FC";"CD";"DA";"AB";"BC";
"CD";"DA";"AB";"BG";"GH";"HC";"CD";"DG";"GH";"HC";
"CD";"DG";"GH";"HC";"CD";"DG";"GH";"HC";"CD";"DA";
"AB";"BG";"GH";"HC";"CD";"DE";"EF";"FC";"CD";"DG";
"GH";"HA";"AB";"BG";"GH";"HE";"EF";"FG";"GH";"HE";
"EF";"FA";"AB";"BC";"CD";"DE";"EF";"FG";"GH";"HC";
"CD";"DE";"EF";"FA";"AB";"BE";"EF";"FC";"CD";"DA";
"AB";"BC";"CD";"DA";"AB";"BG";"GH";"HE";"EF";"FG";
"GH";"HE";"EF";"FG";"GH";"HA";"AB";"BG";"GH";"HE";
"EF";"FG";"GH";"HE";"EF";"FC";"CD";"DG";"GH";"HA";
"AB";"BC";"CD";"DG";"GH";"HE";"EF";"FG";"GH";"HE";
"EF";"FA";"AB";"BE";"EF";"FA";"AB";"BE";"EF";"FG";
"GH";"HE";"EF";"FG";"GH";"HE";"EF";"FA";"AB";"BG";
"GH";"HC";"CD";"DG";"GH";"HA";"AB";"BE";"EF";"FA";
"AB";"BE";"EF";"FC";"CD";"DA";"AB";"BC";"CD";"DA";
"AB";"BE";"EF";"FC";"CD";"DE";"EF";"FC";"CD";"DE";
"EF";"FC";"CD";"DA";"AB";"BC";"CD";"DG";"GH";"HC";
"CD";"DA";"AB";"BE";"EF";"FC";"CD";"DA";"AB";"BG";
"GH";"HA";"AB";"BE";"EF";"FA";"AB";"BG";"GH";"HE";
"EF";"FA";"AB";"BG";"GH";"HE";"EF";"FA";"AB";"BC";
"CD";"DA";"AB";"BG";"GH";"HC";"CD";"DE";"EF";"FA";
"AB";"BG";"GH";"HE";"EF";"FG";"GH";"HC";"CD";"DA";
"AB";"BE";"EF";"FC";"CD";"DG";"GH";"HA";"AB";"BG";
"GH";"HE";"EF";"FG";"GH";"HC";"CD";"DG";"GH";"HA";
"AB";"BC";"CD";"DA";"AB";"BE";"EF";"FC";"CD";"DA";
"AB";"BG";"GH";"HE";"EF";"FC";"CD";"DG";"GH";"HA";
"AB";"BE";"EF";"FA";"AB";"BE";"EF";"FC";"CD";"DA";
"AB";"BG";"GH";"HA";"AB";"BC";"CD";"DA";"AB";"BG";
"GH";"HA";"AB";"BC";"CD";"DA";"AB";"BG";"GH";"HC";
"CD";"DA";"AB";"BC";"CD";"DA";"AB";"BE";"EF";"FG";
"GH";"HE";"EF";"FA";"AB";"BG";"GH";"HE";"EF";"FA";
"AB";"BG";"GH";"HC";"CD";"DE";"EF";"FA";"AB";"BE";
"EF";"FG";"GH";"HC";"CD";"DE";"EF";"FC";"CD";"DA";
"AB";"BG";"GH";"HC";"CD";"DE";"EF";"FA";"AB";"BE";
"EF";"FC";"CD";"DG";"GH";"HE";"EF";"FA";"AB";"BG";
"GH";"HE";"EF";"FA";"AB";"BE";"EF";"FA";"AB";"BE";
"EF";"FC";"CD";"DE";"EF";"FA";"AB";"BE";"EF";"FG";
"GH";"HA";"AB";"BC";"CD";"DE";"EF";"FG";"GH";"HC";
"CD";"DA";"AB";"BG";"GH";"HA";"AB";"BC";"CD";"DE";
"EF";"FA";"AB";"BE";"EF";"FC";"CD";"DA";"AB";"BG";
"GH";"HA";"AB";"BC";"CD";"DA";"AB";"BE";"EF";"FA";
"AB";"BC";"CD";"DA";"AB";"BG";"GH";"HC";"CD";"DE";
"EF";"FG";"GH";"HC";"CD";"DE";"EF";"FG";"GH";"HC";
"CD";"DE";"EF";"FA";"AB";"BG";"GH";"HA";"AB";"BC";
"CD";"DG";"GH";"HC";"CD";"DG";"GH";"HC";"CD";"DA";
"AB";"BE";"EF";"FC";"CD";"DE";"EF";"FA";"AB";"BC";
"CD";"DG";"GH";"HE";"EF";"FA";"AB";"BC";"CD";"DE";
"EF";"FA";"AB";"BE";"EF";"FA";"AB";"BC";"CD";"DA";
"AB";"BC";"CD";"DG";"GH";"HE";"EF";"FA";"AB";"BG";
"GH";"HE";"EF";"FC";"CD";"DA";"AB";"BE";"EF";"FG";
"GH";"HA";"AB";"BC";"CD";"DA";"AB";"BE";"EF";"FC";
"CD";"DG";"GH";"HC";"CD";"DE";"EF";"FA";"AB";"BC";
"CD";"DA";"AB";"BG";"GH";"HC";"CD";"DE";"EF";"FC";
"CD";"DE";"EF";"FG";"GH";"HE";"EF";"FC";"CD";"DE";
"EF";"FC";"CD";"DA";"AB";"BC";"CD";"DE";"EF";"FG";
"GH";"HC";"CD";"DA";"AB";"BG";"GH";"HE";"EF";"FA";
"AB";"BE";"EF";"FC";"CD";"DA";"AB";"BG";"GH";"HA";
"AB";"BE";"EF";"FG";"GH";"HE";"EF";"FA";"AB";"BG";
"GH";"HE";"EF";"FA";"AB";"BG";"GH";"HE";"EF";"FA";
"AB";"BE";"EF";"FC";"CD";"DE";"EF";"FC";"CD";"DA";
"AB";"BC";"CD";"DA";"AB";"BG";"GH";"HE";"EF";"FG";
"GH";"HA";"AB";"BG";"GH";"HE";"EF";"FC";"CD";"DG";
"GH";"HA";"AB";"BG";"GH";"HE";"EF";"FC";"CD";"DG";
"GH";"HC";"CD";"DG";"GH";"HE";"EF";"FG";"GH";"HC";
"CD";"DA";"AB";"BG";"GH";"HE";"EF";"FC";"CD";"DG";
"GH";"HA";"AB";"BE";"EF";"FC";"CD";"DA";"AB";"BC";
"CD";"DA";"AB";"BE";"EF";"FC";"CD";"DG";"GH";"HE";
"EF";"FA";"AB";"BG";"GH";"HC";"CD";"DG";"GH";"HA";
"AB";"BC";"CD";"DA";"AB";"BE";"EF";"FA";"AB";"BE";
"EF";"FC";"CD";"DE";"EF";"FC";"CD";"DE";"EF";"FA";
"AB";"BG";"GH";"HE";"EF";"FG";"GH";"HC";"CD";"DE";
"EF";"FC";"CD";"DA";"AB";"BC";"CD";"DA";"AB";"BG";
"GH";"HA";"AB";"BE";"EF";"FA";"AB";"BG";"GH";"HA";
"AB";"BG";"GH";"HA";"AB";"BE";"EF";"FG";"GH";"HE";
"EF";"FG";"GH";"HE";"EF";"FA";"AB";"BE";"EF";"FG";
"GH";"HC";"CD";"DG";"GH";"HE";"EF";"FG";"GH";"HC";
"CD";"DE";"EF";"FA";"AB";"BC";"CD";"DE";"EF";"FC";
"CD";"DE";"EF";"FG";"GH";"HE";"EF";"FA";"AB";};
};
float_Data @["Input"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.285932719707489;
val_type_fixed=0;
};
};
name="Input";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=1;
cell_geom{ 1;8;1;1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[4] ;;;;};
width=187;
ar {
name="ar";
[1 8 1 1 1599] 0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;1;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;0;
0;1;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;0;
0;1;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;0;
0;1;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;1;0;0;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;1;0;0;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;1;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;1;0;0;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;0;
0;1;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;1;0;0;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;1;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;1;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;1;0;0;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;1;0;0;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;0;
0;1;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;0;
0;1;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;0;
0;1;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;1;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;1;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;1;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;1;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;1;0;0;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;0;
0;1;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;1;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;1;0;0;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;0;
0;1;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;};
};
float_Data @["EC_out"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.285932719707489;
val_type_fixed=0;
};
};
name="EC_out";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=1;
cell_geom{ 1;8;1;1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[4] ;;;;};
width=187;
ar {
name="ar";
[1 8 1 1 1599] 0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;1;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;0;
0;1;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;0;
0;1;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;0;
0;1;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;1;0;0;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;1;0;0;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;1;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;1;0;0;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;0;
0;1;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;1;0;0;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;1;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;1;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;1;0;0;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;1;0;0;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;0;
0;1;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;0;
0;1;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;0;
0;1;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;1;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;1;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;1;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;1;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;1;0;0;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;0;
0;1;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
1;0;0;0;0;0;0;1;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;1;0;0;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;1;0;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;0;
0;1;1;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;1;1;0;0;
1;0;0;0;0;1;0;0;1;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;1;0;0;1;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;};
};
};
data_flags=SAVE_ROWS|AUTO_CALC;
auto_load=NO_AUTO_LOAD;
auto_load_file=;
keygen 4 0=0;
row_indexes {
name="row_indexes";
[1599] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
540;541;542;543;544;545;546;547;548;549;
550;551;552;553;554;555;556;557;558;559;
560;561;562;563;564;565;566;567;568;569;
570;571;572;573;574;575;576;577;578;579;
580;581;582;583;584;585;586;587;588;589;
590;591;592;593;594;595;596;597;598;599;
600;601;602;603;604;605;606;607;608;609;
610;611;612;613;614;615;616;617;618;619;
620;621;622;623;624;625;626;627;628;629;
630;631;632;633;634;635;636;637;638;639;
640;641;642;643;644;645;646;647;648;649;
650;651;652;653;654;655;656;657;658;659;
660;661;662;663;664;665;666;667;668;669;
670;671;672;673;674;675;676;677;678;679;
680;681;682;683;684;685;686;687;688;689;
690;691;692;693;694;695;696;697;698;699;
700;701;702;703;704;705;706;707;708;709;
710;711;712;713;714;715;716;717;718;719;
720;721;722;723;724;725;726;727;728;729;
730;731;732;733;734;735;736;737;738;739;
740;741;742;743;744;745;746;747;748;749;
750;751;752;753;754;755;756;757;758;759;
760;761;762;763;764;765;766;767;768;769;
770;771;772;773;774;775;776;777;778;779;
780;781;782;783;784;785;786;787;788;789;
790;791;792;793;794;795;796;797;798;799;
800;801;802;803;804;805;806;807;808;809;
810;811;812;813;814;815;816;817;818;819;
820;821;822;823;824;825;826;827;828;829;
830;831;832;833;834;835;836;837;838;839;
840;841;842;843;844;845;846;847;848;849;
850;851;852;853;854;855;856;857;858;859;
860;861;862;863;864;865;866;867;868;869;
870;871;872;873;874;875;876;877;878;879;
880;881;882;883;884;885;886;887;888;889;
890;891;892;893;894;895;896;897;898;899;
900;901;902;903;904;905;906;907;908;909;
910;911;912;913;914;915;916;917;918;919;
920;921;922;923;924;925;926;927;928;929;
930;931;932;933;934;935;936;937;938;939;
940;941;942;943;944;945;946;947;948;949;
950;951;952;953;954;955;956;957;958;959;
960;961;962;963;964;965;966;967;968;969;
970;971;972;973;974;975;976;977;978;979;
980;981;982;983;984;985;986;987;988;989;
990;991;992;993;994;995;996;997;998;999;
1000;1001;1002;1003;1004;1005;1006;1007;1008;1009;
1010;1011;1012;1013;1014;1015;1016;1017;1018;1019;
1020;1021;1022;1023;1024;1025;1026;1027;1028;1029;
1030;1031;1032;1033;1034;1035;1036;1037;1038;1039;
1040;1041;1042;1043;1044;1045;1046;1047;1048;1049;
1050;1051;1052;1053;1054;1055;1056;1057;1058;1059;
1060;1061;1062;1063;1064;1065;1066;1067;1068;1069;
1070;1071;1072;1073;1074;1075;1076;1077;1078;1079;
1080;1081;1082;1083;1084;1085;1086;1087;1088;1089;
1090;1091;1092;1093;1094;1095;1096;1097;1098;1099;
1100;1101;1102;1103;1104;1105;1106;1107;1108;1109;
1110;1111;1112;1113;1114;1115;1116;1117;1118;1119;
1120;1121;1122;1123;1124;1125;1126;1127;1128;1129;
1130;1131;1132;1133;1134;1135;1136;1137;1138;1139;
1140;1141;1142;1143;1144;1145;1146;1147;1148;1149;
1150;1151;1152;1153;1154;1155;1156;1157;1158;1159;
1160;1161;1162;1163;1164;1165;1166;1167;1168;1169;
1170;1171;1172;1173;1174;1175;1176;1177;1178;1179;
1180;1181;1182;1183;1184;1185;1186;1187;1188;1189;
1190;1191;1192;1193;1194;1195;1196;1197;1198;1199;
1200;1201;1202;1203;1204;1205;1206;1207;1208;1209;
1210;1211;1212;1213;1214;1215;1216;1217;1218;1219;
1220;1221;1222;1223;1224;1225;1226;1227;1228;1229;
1230;1231;1232;1233;1234;1235;1236;1237;1238;1239;
1240;1241;1242;1243;1244;1245;1246;1247;1248;1249;
1250;1251;1252;1253;1254;1255;1256;1257;1258;1259;
1260;1261;1262;1263;1264;1265;1266;1267;1268;1269;
1270;1271;1272;1273;1274;1275;1276;1277;1278;1279;
1280;1281;1282;1283;1284;1285;1286;1287;1288;1289;
1290;1291;1292;1293;1294;1295;1296;1297;1298;1299;
1300;1301;1302;1303;1304;1305;1306;1307;1308;1309;
1310;1311;1312;1313;1314;1315;1316;1317;1318;1319;
1320;1321;1322;1323;1324;1325;1326;1327;1328;1329;
1330;1331;1332;1333;1334;1335;1336;1337;1338;1339;
1340;1341;1342;1343;1344;1345;1346;1347;1348;1349;
1350;1351;1352;1353;1354;1355;1356;1357;1358;1359;
1360;1361;1362;1363;1364;1365;1366;1367;1368;1369;
1370;1371;1372;1373;1374;1375;1376;1377;1378;1379;
1380;1381;1382;1383;1384;1385;1386;1387;1388;1389;
1390;1391;1392;1393;1394;1395;1396;1397;1398;1399;
1400;1401;1402;1403;1404;1405;1406;1407;1408;1409;
1410;1411;1412;1413;1414;1415;1416;1417;1418;1419;
1420;1421;1422;1423;1424;1425;1426;1427;1428;1429;
1430;1431;1432;1433;1434;1435;1436;1437;1438;1439;
1440;1441;1442;1443;1444;1445;1446;1447;1448;1449;
1450;1451;1452;1453;1454;1455;1456;1457;1458;1459;
1460;1461;1462;1463;1464;1465;1466;1467;1468;1469;
1470;1471;1472;1473;1474;1475;1476;1477;1478;1479;
1480;1481;1482;1483;1484;1485;1486;1487;1488;1489;
1490;1491;1492;1493;1494;1495;1496;1497;1498;1499;
1500;1501;1502;1503;1504;1505;1506;1507;1508;1509;
1510;1511;1512;1513;1514;1515;1516;1517;1518;1519;
1520;1521;1522;1523;1524;1525;1526;1527;1528;1529;
1530;1531;1532;1533;1534;1535;1536;1537;1538;1539;
1540;1541;1542;1543;1544;1545;1546;1547;1548;1549;
1550;1551;1552;1553;1554;1555;1556;1557;1558;1559;
1560;1561;1562;1563;1564;1565;1566;1567;1568;1569;
1570;1571;1572;1573;1574;1575;1576;1577;1578;1579;
1580;1581;1582;1583;1584;1585;1586;1587;1588;1589;
1590;1591;1592;1593;1594;1595;1596;1597;1598;};
};
DataTable @["Train_pairs_without_transitions"] {
name="Train_pairs_without_transitions";
desc=;
data {
name="data";
el_typ=String_Data;
el_def=0;
String_Data @["Name"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItemBase;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1230769231915474;
val_type_fixed=0;
};
};
name="Name";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=56;
ar {
name="ar";
[16] "AB";"CD";"EF";"GH";"AB";"CD";"EF";"GH";"AB";"CD";
"EF";"GH";"AB";"CD";"EF";"GH";};
};
float_Data @["Input"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItemBase;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1670329719781876;
val_type_fixed=0;
};
};
name="Input";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=1;
cell_geom{ 1;8;1;1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[4] ;;;;};
width=76;
ar {
name="ar";
[1 8 1 1 16] 1;1;0;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;0;
1;1;1;1;0;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;0;1;1;1;1;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;0;1;1;1;1;0;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;0;1;1;};
};
float_Data @["EC_out"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItemBase;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1670329719781876;
val_type_fixed=0;
};
};
name="EC_out";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=1;
cell_geom{ 1;8;1;1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[4] ;;;;};
width=76;
ar {
name="ar";
[1 8 1 1 16] 1;1;0;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;0;
1;1;1;1;0;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;0;1;1;1;1;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;0;1;1;1;1;0;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;0;1;1;};
};
};
data_flags=SAVE_ROWS|AUTO_CALC;
auto_load=NO_AUTO_LOAD;
auto_load_file=;
keygen 4 0=0;
row_indexes {
name="row_indexes";
[16] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;};
};
DataTable @["Test_pairs"] {
name="Test_pairs";
desc=;
data {
name="data";
el_typ=String_Data;
el_def=0;
String_Data @["Name"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItemBase;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.07692307978868484;
val_type_fixed=0;
};
};
name="Name";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=56;
ar {
name="ar";
[24] "A";"B";"C";"D";"E";"F";"G";"H";"AB";"CD";
"EF";"GH";"BC";"BE";"BG";"DA";"DE";"DG";"FA";"FC";
"FG";"HA";"HC";"HE";};
};
float_Data @["Input"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItemBase;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1043956056237221;
val_type_fixed=0;
};
};
name="Input";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=1;
cell_geom{ 1;8;1;1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[4] ;;;;};
width=76;
ar {
name="ar";
[1 8 1 1 24] 1;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;0;1;1;0;1;1;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;0;1;0;
1;0;0;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;1;
0;0;1;0;1;0;0;0;0;1;
0;0;0;0;1;0;0;1;0;0;
0;0;0;0;0;1;1;0;1;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;0;1;0;
0;1;};
};
float_Data @["EC_out"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItemBase;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1043956056237221;
val_type_fixed=0;
};
};
name="EC_out";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=1;
cell_geom{ 1;8;1;1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[4] ;;;;};
width=76;
ar {
name="ar";
[1 8 1 1 24] 1;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;1;1;1;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;0;1;1;0;1;1;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;0;1;0;
1;0;0;1;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;1;
0;0;1;0;1;0;0;0;0;1;
0;0;0;0;1;0;0;1;0;0;
0;0;0;0;0;1;1;0;1;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;0;1;0;
0;1;};
};
};
data_flags=SAVE_ROWS|AUTO_CALC;
auto_load=NO_AUTO_LOAD;
auto_load_file=;
keygen 4 0=0;
row_indexes {
name="row_indexes";
[8] 0;1;2;3;4;5;6;7;};
};
};
DataTable_Group @.gp["OutputData"] {
name="OutputData";
el_typ=DataTable;
el_def=0;
save_tables=1;
DataTable @["TrialOutputData"] {
name="TrialOutputData";
desc=;
data {
name="data";
el_typ=int_Data;
el_def=0;
int_Data @["batch"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_71";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="batch";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[41] 9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;};
};
int_Data @["epoch"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_72";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="epoch";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[41] 9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;};
};
int_Data @["trial"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_73";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="trial";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[41] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;};
};
String_Data @["trial_name"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_79";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="trial_name";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[41] "EF";"DG";"HC";"FA";"GH";"CD";"FA";"FC";"AB";"DA";
"AB";"CD";"HE";"HA";"EF";"EF";"BG";"CD";"CD";"EF";
"AB";"DE";"GH";"DE";"AB";"GH";"DE";"BE";"FC";"GH";
"BG";"EF";"FA";"HE";"GH";"EF";"CD";"FA";"BC";"DE";
"FG";};
};
String_Data @["group_name"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_80";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="group_name";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[41] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;};
};
int_Data @["phase_no"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_74";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="phase_no";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[41] 2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;};
};
float_Data @["minus_cycles"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_81";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="minus_cycles";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[41] 80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;};
};
float_Data @["sse"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_82";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="sse";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[41] 0;0;0;0.70711076;0;0.71256578;0.70700336;0.99242926;0.71495712;0.70946026;
0.71475172;0.71237695;1.6038141;0.70621538;0;0;0.35261863;0.71220839;0.71206421;0;
0;1.0334029;0;0.99528039;0;0;0.94902909;1.6089014;0.95927352;0;
0.35256624;0;0.70689076;1.6109385;0;0;0.71213031;0.70678234;0;0.93956244;
0.35322794;};
};
float_Data @["ext_rew"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_83";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="ext_rew";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[41] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;};
};
float_Data @["Input_avg_act"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_84";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="Input_avg_act";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[41] 0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;
0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;
0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;
0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;
0.2375;};
};
float_Data @["EC_in_avg_act"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_85";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="EC_in_avg_act";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[41] 0.24264516;0.24229178;0.24369061;0.24234259;0.24287489;0.24311778;0.24234259;0.24238841;0.2419;0.24310255;
0.2419;0.24311778;0.24259625;0.24364625;0.24264516;0.24264516;0.2405411;0.24311778;0.24311778;0.24264516;
0.24189979;0.24211416;0.24287489;0.24211422;0.24189979;0.24287489;0.24211425;0.24152264;0.24238843;0.24287489;
0.2405411;0.24264516;0.24234259;0.24259661;0.24287489;0.24264516;0.24311778;0.24234259;0.24152544;0.24211431;
0.24210528;};
};
float_Data @["EC_out_avg_act"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_86";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="EC_out_avg_act";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[41] 0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;
0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;
0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;
0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;0.2375;
0.2375;};
};
float_Data @["DG_avg_act"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_87";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="DG_avg_act";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[41] 0.0069445656;0.0048848386;0.011694739;0.0071666366;0.0070432378;0.0070539266;0.0071684928;0.0048118131;0.0047393586;0.0072177541;
0.0047409371;0.0070579941;0.007262602;0.0070259767;0.0069446024;0.0069446648;0.004814588;0.007061434;0.0070643481;0.0069447262;
0.0047422289;0.0070315008;0.0070439838;0.0070494735;0.0047433404;0.0070446469;0.0070637777;0.012077362;0.0048145112;0.0070452141;
0.004816358;0.0069445856;0.0071699871;0.0072632427;0.007045697;0.0069446205;0.0070667965;0.0071713235;0.0071967267;0.007075211;
0.0070839687;};
};
float_Data @["CA3_avg_act"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_88";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="CA3_avg_act";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[41] 0.043994009;0.068387367;0.035867266;0.023990756;0.08995638;0.034635913;0.023989227;0.065848812;0.066576168;0.035564553;
0.066577271;0.034641027;0.10558803;0.03016896;0.044005044;0.044005338;0.07820306;0.034646519;0.03464938;0.044008411;
0.066588238;0.062641263;0.090044901;0.06265825;0.066591144;0.0900755;0.062482674;0.12339456;0.066037506;0.090113685;
0.078127675;0.044019114;0.023995379;0.10636047;0.090140983;0.044023003;0.034657251;0.02399545;0.052051403;0.062732205;
0.048332252;};
};
float_Data @["CA1_avg_act"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_89";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="CA1_avg_act";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[41] 0.091490068;0.054161005;0.019589584;0.063865572;0.037056848;0.044723786;0.063934408;0.0098027233;0.036128696;0.053842872;
0.036207482;0.044857208;0.0094494196;0.054180071;0.09154629;0.091627747;0.035098627;0.044982422;0.045096722;0.091699213;
0.036241636;0.0094118658;0.037072416;0.0094120894;0.036307927;0.037093878;0.009412271;0.018310737;0.0095639862;0.037113905;
0.035219628;0.09045697;0.064225852;0.0094563207;0.03713198;0.090567052;0.04506446;0.06426686;0.024181282;0.0093933996;
0.053010959;};
};
};
data_flags=SAVE_ROWS|AUTO_CALC;
auto_load=NO_AUTO_LOAD;
auto_load_file=;
keygen 4 0=0;
row_indexes {
name="row_indexes";
[41] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;};
};
DataTable @["EpochOutputData"] {
name="EpochOutputData";
desc=;
data {
name="data";
el_typ=int_Data;
el_def=0;
int_Data @["batch"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_73";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1332027465105057;
val_type_fixed=0;
};
};
name="batch";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=136;
ar {
name="ar";
[100] 0;0;0;0;0;0;0;0;0;0;
1;1;1;1;1;1;1;1;1;1;
2;2;2;2;2;2;2;2;2;2;
3;3;3;3;3;3;3;3;3;3;
4;4;4;4;4;4;4;4;4;4;
5;5;5;5;5;5;5;5;5;5;
6;6;6;6;6;6;6;6;6;6;
7;7;7;7;7;7;7;7;7;7;
8;8;8;8;8;8;8;8;8;8;
9;9;9;9;9;9;9;9;9;9;
};
};
int_Data @["epoch"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_74";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1332027465105057;
val_type_fixed=0;
};
};
name="epoch";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=136;
ar {
name="ar";
[100] 0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
0;1;2;3;4;5;6;7;8;9;
};
};
float_Data @["avg_sse"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_250";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1332027465105057;
val_type_fixed=0;
};
};
name="avg_sse";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=136;
ar {
name="ar";
[100] 1.3100982;0.57058567;0.44788873;0.46124882;0.24058922;0.26327416;0.51221454;0.31711119;0.37004519;0.40893561;
1.8591335;0.68028986;0.57136226;0.60255313;0.29200453;0.49218491;0.42362437;0.33017504;0.41522357;0.44140038;
1.4205148;1.002542;0.70341229;0.70100415;0.25606269;0.52450252;0.41284612;0.3274886;0.28140596;0.27176261;
1.6069597;0.90667361;0.54356164;0.69648755;0.57501769;0.41093537;0.44270557;0.46308926;0.58424854;0.28892675;
1.5457931;0.57652211;0.58904874;0.31046328;0.33104149;0.33452889;0.45833537;0.29487711;0.29310417;0.36156613;
1.4319637;1.1208875;0.65123737;0.35173991;0.29473487;0.46816543;0.22303025;0.19871169;0.27633354;0.32896122;
1.4831669;0.55270886;0.4712624;0.30385876;0.32881883;0.26433372;0.27635303;0.13695236;0.2321488;0.17346977;
1.6181515;0.96805537;0.39556539;0.4997184;0.25611025;0.4137882;0.24282479;0.47757289;0.64334518;0.40251872;
1.3965911;0.98238009;0.55666447;0.45611405;0.42668146;0.40163812;0.43890455;0.40216219;0.45099077;0.55088925;
1.8345042;0.61563462;0.48818737;0.70070469;0.56938112;0.52248627;0.45221928;0.43726382;0.38066757;0.51184285;
};
};
float_Data @["cnt_err"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_251";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1332027465105057;
val_type_fixed=0;
};
};
name="cnt_err";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=136;
ar {
name="ar";
[100] 25;19;23;22;13;15;25;17;16;21;
32;19;25;24;18;27;23;18;19;24;
29;26;20;30;15;24;21;16;13;12;
29;28;25;30;26;23;24;27;33;15;
31;20;29;19;16;19;26;17;16;20;
25;25;23;12;15;19;14;13;19;19;
27;14;15;11;13;14;16;8;13;9;
32;31;15;28;12;16;14;25;27;23;
29;34;21;26;24;23;28;23;24;27;
36;19;23;27;23;26;25;24;22;25;
};
};
float_Data @["avg_ext_rew"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_252";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1332027465105057;
val_type_fixed=0;
};
};
name="avg_ext_rew";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=136;
ar {
name="ar";
[100] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
};
};
float_Data @["avg_cycles"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_253";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1332027465105057;
val_type_fixed=0;
};
};
name="avg_cycles";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=136;
ar {
name="ar";
[100] 80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
80;80;80;80;80;80;80;80;80;80;
};
};
float_Data @["epoch_time_tot"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_254";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1332027465105057;
val_type_fixed=0;
};
};
name="epoch_time_tot";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=136;
ar {
name="ar";
[100] 1.1;1.11;1.11;1.1;1.0599999;1.0700001;1.1;1.08;1.1;1.09;
1.0700001;1.0700001;1.09;1.11;1.08;1.13;1.08;1.09;1.0599999;1.0700001;
1.0599999;1.05;1.0700001;1.0700001;1.0599999;1.0599999;1.0700001;1.05;1.03;1.0599999;
1.0599999;1.09;1.0599999;1.0700001;1.0700001;1.08;1.0700001;1.0599999;1.08;1.05;
1.1;1.0700001;1.0599999;1.08;1.0700001;1.09;1.0700001;1.05;1.14;1.12;
1.09;1.12;1.0599999;1.1;1.13;1.17;1.17;1.0700001;1.08;1.05;
1.08;1.0700001;1.05;1.08;1.09;1.05;1.0599999;1.04;1.05;1.03;
1.09;1.0599999;1.09;1.0700001;1.05;1.0599999;1.0700001;1.08;1.0700001;1.08;
1.04;1.0599999;1.0599999;1.09;1.12;1.0599999;1.0599999;1.0700001;1.08;1.05;
1.1;1.0700001;1.1;1.08;1.0700001;1.08;1.0599999;1.1;1.0700001;1.0599999;
};
};
float_Data @["epoch_time_usr"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_255";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1332027465105057;
val_type_fixed=0;
};
};
name="epoch_time_usr";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=136;
ar {
name="ar";
[100] 1.14;1.08;1.09;1.0700001;1.03;1.05;1.13;1.0599999;1.0700001;1.0599999;
1.05;1.04;1.0599999;1.09;1.0599999;1.1;1.05;1.0599999;1.03;1.12;
1.04;1.02;1.04;1.04;1.05;1.1;1.05;1.02;1.01;1.03;
1.04;1.0700001;1.04;1.11;1.04;1.04;1.04;1.03;1.05;1.09;
1.0700001;1.04;1.05;1.0599999;1.04;1.13;1.05;1.02;1.11;1.1;
1.0599999;1.1;1.04;1.14;1.1;1.14;1.14;1.04;1.1;1.04;
1.0599999;1.04;1.03;1.05;1.15;1.04;1.03;1.01;1.02;1.01;
1.0700001;1.04;1.13;1.04;1.03;1.05;1.04;1.05;1.11;1.05;
1.01;1.04;1.03;1.0599999;1.16;1.04;1.03;1.05;1.0599999;1.03;
1.08;1.04;1.16;1.0599999;1.05;1.0599999;1.04;1.08;1.04;1.04;
};
};
};
data_flags=SAVE_ROWS|AUTO_CALC;
auto_load=NO_AUTO_LOAD;
auto_load_file=;
keygen 4 0=0;
row_indexes {
name="row_indexes";
[100] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
};
};
DataTable @["TrialTestOutputData"] {
name="TrialTestOutputData";
desc=;
data {
name="data";
el_typ=int_Data;
el_def=0;
int_Data @["batch"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_72";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="batch";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[8] 10;10;10;10;10;10;10;10;};
};
int_Data @["epoch"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_73";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="epoch";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[8] 10;10;10;10;10;10;10;10;};
};
int_Data @["trial"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_74";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="trial";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[8] 0;1;2;3;4;5;6;7;};
};
String_Data @["trial_name"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_71";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="trial_name";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[8] "A";"B";"C";"D";"E";"F";"G";"H";};
};
float_Data @["minus_cycles"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_76";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="minus_cycles";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[8] 80;80;80;80;80;80;80;80;};
};
float_Data @["sse"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_77";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="sse";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=105;
ar {
name="ar";
[8] 0;0.35711521;0;0.35527974;0.34025055;0.35005227;0.35459524;0.68859637;};
};
float_Data @["EC_out_act"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_130";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1332027465105057;
val_type_fixed=0;
};
};
name="EC_out_act";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=1;
cell_geom{ 1;8;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[2] ;;};
width=136;
ar {
name="ar";
[1 8 8] 0.58078825;0;0;5.7933915e-13;0;7.3071556e-13;0;0.40626371;0.40240443;0.40240884;
0;0;9.8989027e-14;6.7334242e-11;0;0;2.1311061e-11;3.8844372e-15;0.56940198;2.0335426e-17;
3.2050438e-18;2.1462168e-14;0.40603006;0;6.873556e-12;0;0.40371358;0.40394649;0;0;
1.5771011e-11;0;0;0;3.197565e-12;0;0.58329201;0.58331001;0;0;
1.8129227e-11;3.513265e-15;0;0;0.40833548;0.40834787;1.4496464e-14;0;0;0;
0;8.4315506e-15;8.4487015e-11;6.2172947e-11;0.40452102;0.40448439;9.7756178e-12;0;0;1.7739322e-16;
0;7.7210391e-12;0.57790005;0.40449357;};
};
};
data_flags=SAVE_ROWS|AUTO_CALC;
auto_load=NO_AUTO_LOAD;
auto_load_file=;
keygen 4 0=0;
row_indexes {
name="row_indexes";
[8] 0;1;2;3;4;5;6;7;};
};
DataTable @["LastTestOutputData"] {
name="LastTestOutputData";
desc="just for the last test epoch";
data {
name="data";
el_typ=int_Data;
el_def=0;
int_Data @["batch"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_96";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="batch";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name=;
[0] };
width=105;
ar {
name=;
[8] 10;10;10;10;10;10;10;10;};
};
int_Data @["epoch"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_97";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="epoch";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name=;
[0] };
width=105;
ar {
name=;
[8] 10;10;10;10;10;10;10;10;};
};
int_Data @["trial"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_98";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="trial";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name=;
[0] };
width=105;
ar {
name=;
[8] 0;1;2;3;4;5;6;7;};
};
String_Data @["trial_name"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_99";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="trial_name";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name=;
[0] };
width=105;
ar {
name=;
[8] "A";"B";"C";"D";"E";"F";"G";"H";};
};
float_Data @["minus_cycles"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_100";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="minus_cycles";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name=;
[0] };
width=105;
ar {
name=;
[8] 80;80;80;80;80;80;80;80;};
};
float_Data @["sse"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_101";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1028403490781784;
val_type_fixed=0;
};
};
name="sse";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name=;
[0] };
width=105;
ar {
name=;
[8] 0;0.35711521;0;0.35527974;0.34025055;0.35005227;0.35459524;0.68859637;};
};
float_Data @["EC_out_act"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_102";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1332027465105057;
val_type_fixed=0;
};
};
name="EC_out_act";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=1;
cell_geom{ 1;8;};
calc_expr {
expr=;
};
dim_names {
name=;
[2] ;;};
width=136;
ar {
name=;
[1 8 8] 0.58078825;0;0;5.7933915e-13;0;7.3071556e-13;0;0.40626371;0.40240443;0.40240884;
0;0;9.8989027e-14;6.7334242e-11;0;0;2.1311061e-11;3.8844372e-15;0.56940198;2.0335426e-17;
3.2050438e-18;2.1462168e-14;0.40603006;0;6.873556e-12;0;0.40371358;0.40394649;0;0;
1.5771011e-11;0;0;0;3.197565e-12;0;0.58329201;0.58331001;0;0;
1.8129227e-11;3.513265e-15;0;0;0.40833548;0.40834787;1.4496464e-14;0;0;0;
0;8.4315506e-15;8.4487015e-11;6.2172947e-11;0.40452102;0.40448439;9.7756178e-12;0;0;1.7739322e-16;
0;7.7210391e-12;0.57790005;0.40449357;};
};
};
data_flags=SAVE_ROWS|AUTO_CALC;
auto_load=NO_AUTO_LOAD;
auto_load_file=;
keygen 4 0=0;
row_indexes {
name="row_indexes";
[8] 0;1;2;3;4;5;6;7;};
};
DataTable @["EpochTestOutputData"] {
name="EpochTestOutputData";
desc=;
data {
name="data";
el_typ=int_Data;
el_def=0;
int_Data @["batch"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_73";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1335113495588303;
val_type_fixed=0;
};
};
name="batch";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
ar {
name="ar";
[1] 10;};
};
int_Data @["epoch"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_74";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1335113495588303;
val_type_fixed=0;
};
};
name="epoch";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
ar {
name="ar";
[1] 10;};
};
};
data_flags=SAVE_ROWS|AUTO_CALC;
auto_load=NO_AUTO_LOAD;
auto_load_file=;
keygen 4 0=0;
row_indexes {
name="row_indexes";
[1] 0;};
};
DataTable @["SlotEpochOutputData"] {
name="SlotEpochOutputData";
desc=;
data {
name="data";
el_typ=int_Data;
el_def=0;
int_Data @["batch"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItemBase;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1472754031419754;
val_type_fixed=0;
};
};
name="batch";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
ar {
name="ar";
[150] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
};
};
int_Data @["epoch"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItemBase;
el_def=0;
UserDataItem @["NARROW"] {
name="NARROW";
value 1 0=1;
val_type_fixed=0;
};
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1472754031419754;
val_type_fixed=0;
};
};
name="epoch";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
ar {
name="ar";
[150] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
};
};
float_Data @["avg_sse"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_124";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1472754031419754;
val_type_fixed=0;
};
};
name="avg_sse";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
ar {
name="ar";
[150] 2.609426;1.5287158;0.94249511;0.48676977;0.49306193;0.37589213;0.22162923;0.15045092;0.098839603;0.069785051;
0.040275149;0.12367451;0.14898865;0.090231419;0.051763557;0.01346948;0.025878498;0.062495299;0.025709555;0.024532722;
0.046221193;0.06486699;0.034697194;0.066911913;0.045079187;0.022268077;0.0090831276;0;0.058219515;0.020243179;
0;0;0;0.026876036;0.078507274;0.024057578;0.025878135;0.039981145;0;0.030203938;
0;0;0;0.048112631;0.035277847;0.060585894;0.027468793;0.059019186;0;0.026797961;
0.029995633;0;0.030120667;0;0;0;0.039029166;0.029313751;0.024244262;0.030620731;
0.030055888;0.028689075;0.030124823;0;0.029951459;0;0;0.0084460275;0.030114822;0;
0.055594206;0;0.025419526;0;0;0.059835032;0.029240351;0;0.030645989;0.044188287;
0.015625;0;0.029522544;0;0.058777574;0.015625;0.04689496;0;0.047569595;0.0576603;
0.075739093;0.058073852;0.028262205;0;0.0091422051;0.030090503;0.089898109;0.027465634;0;0.030228874;
0.050449409;0.0088469237;0.015625;0.0040623657;0.03002567;0.070793591;0;0.065503418;0;0.015625;
0.029735357;0;0.057514481;0.054229937;0.029810563;0;0.016069902;0;0.015625;0.029586993;
0;0;0.029640712;0;0.060021058;0.0063270549;0;0.0061437218;0.020969298;0.015625;
0.030226123;0.029247943;0;0.028826844;0;0.015625;0.044503827;0;0;0.030113773;
0.027190965;0.015625;0;0;0;0.015625;0.059461877;0.060366958;0.054282136;0;
};
};
float_Data @["cnt_err"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_125";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1472754031419754;
val_type_fixed=0;
};
};
name="cnt_err";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
ar {
name="ar";
[150] 63;54;43;29;28;20;13;10;7;5;
2;6;8;6;3;2;3;4;2;3;
5;4;3;3;3;1;1;0;2;1;
0;0;0;1;3;1;1;2;0;1;
0;0;0;2;2;2;1;2;0;1;
1;0;1;0;0;0;2;1;1;1;
1;1;1;0;1;0;0;1;1;0;
2;0;1;0;0;2;1;0;1;2;
1;0;1;0;2;1;2;0;2;2;
4;2;1;0;1;1;4;1;0;1;
2;1;1;1;1;4;0;3;0;1;
1;0;2;2;1;0;1;0;1;1;
0;0;1;0;2;1;0;1;2;1;
1;1;0;1;0;1;2;0;0;1;
1;1;0;0;0;1;2;2;2;0;
};
};
float_Data @["avg_ext_rew"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_126";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1472754031419754;
val_type_fixed=0;
};
};
name="avg_ext_rew";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
ar {
name="ar";
[150] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
};
};
float_Data @["avg_cycles"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_127";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1472754031419754;
val_type_fixed=0;
};
};
name="avg_cycles";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
ar {
name="ar";
[150] 33.15625;30.109375;30.359375;27.453125;26.921875;25;23.34375;22.875;21.296875;20.609375;
19.96875;19.984375;20.09375;19.46875;18.78125;18.6875;18.484375;18.609375;18.1875;18.65625;
18;18.1875;18.203125;17.640625;17.703125;17.6875;17.53125;17.5625;17.546875;17.296875;
17.234375;17.203125;17.4375;17.546875;17.8125;17.171875;17.5625;17.203125;16.921875;17.0625;
17;17.046875;17.25;17.765625;17.046875;17.046875;16.90625;17.09375;16.921875;16.84375;
16.90625;16.75;17.03125;16.921875;16.984375;17.46875;17.453125;17.09375;17.015625;16.90625;
16.75;16.9375;17.484375;16.796875;17.03125;16.828125;17.234375;18.140625;16.9375;16.84375;
16.921875;16.734375;17.015625;16.8125;16.78125;16.9375;16.953125;16.859375;17;17.25;
16.96875;16.8125;17.078125;17.0625;17.3125;17.296875;17.34375;17.03125;17.34375;17.25;
17.625;17.328125;17.109375;17.03125;17.1875;16.84375;17.65625;17.296875;17.09375;16.921875;
17.25;16.8125;16.921875;16.953125;16.84375;17.5625;16.703125;16.953125;16.859375;17.015625;
16.984375;16.640625;16.890625;17.40625;16.46875;16.546875;16.6875;16.40625;16.90625;16.765625;
16.5625;16.640625;16.734375;16.8125;16.96875;16.28125;16.296875;16.390625;16.890625;16.734375;
16.40625;16.96875;16.3125;16.625;16.359375;16.765625;16.8125;16.453125;16.40625;16.328125;
16.734375;16.796875;16.515625;16.46875;16.578125;16.5625;16.78125;16.8125;16.734375;16.546875;
};
};
float_Data @["epoch_time_tot"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_128";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1472754031419754;
val_type_fixed=0;
};
};
name="epoch_time_tot";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
ar {
name="ar";
[150] 0.54000002;0.38999999;0.40000001;0.38;0.49000001;0.36000001;0.34;0.33000001;0.31999999;0.31999999;
0.31;0.31;0.31;0.31;0.30000001;0.28999999;0.28999999;0.28999999;0.28999999;0.28999999;
0.28999999;0.30000001;0.30000001;0.28999999;0.28999999;0.28999999;0.28999999;0.28;0.40000001;0.28999999;
0.28999999;0.34999999;0.38999999;0.38999999;0.30000001;0.28999999;0.28999999;0.28999999;0.28999999;0.38999999;
0.28999999;0.38;0.30000001;0.36000001;0.28;0.28;0.28999999;0.28999999;0.28999999;0.28999999;
0.36000001;0.31;0.28999999;0.28999999;0.28999999;0.28999999;0.28999999;0.28999999;0.28;0.28;
0.28;0.28999999;0.28999999;0.28;0.28999999;0.28;0.28999999;0.30000001;0.28;0.28;
0.28;0.28;0.28999999;0.28999999;0.28999999;0.28;0.28999999;0.28;0.28;0.28;
0.28;0.28;0.28;0.28;0.28999999;0.28999999;0.28;0.28;0.28999999;0.28999999;
0.28999999;0.28999999;0.28999999;0.28;0.28;0.28999999;0.28999999;0.28;0.28;0.28;
0.28;0.28;0.28;0.28999999;0.28999999;0.28999999;0.28999999;0.28999999;0.28999999;0.28;
0.28;0.28;0.28999999;0.28999999;0.28;0.28;0.28;0.28;0.28999999;0.28;
0.28;0.28;0.28;0.28;0.28;0.28;0.28;0.28;0.28999999;0.28;
0.28;0.28;0.27000001;0.28;0.28;0.28;0.28;0.28;0.28;0.28;
0.28999999;0.28;0.28;0.28;0.28;0.28;0.28999999;0.30000001;13.1;0.38;
};
};
float_Data @["epoch_time_usr"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_129";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_wd"] {
name="view_panel_wd";
value 6 0=0.1472754031419754;
val_type_fixed=0;
};
};
name="epoch_time_usr";
col_flags=SAVE_ROWS|SAVE_DATA;
is_matrix=0;
cell_geom{ 1;};
calc_expr {
expr=;
};
dim_names {
name="dim_names";
[0] };
width=0;
ar {
name="ar";
[150] 0.47;0.34999999;0.34999999;0.34;0.41999999;0.31;0.30000001;0.30000001;0.28;0.28;
0.28;0.27000001;0.27000001;0.27000001;0.25999999;0.25999999;0.25999999;0.25999999;0.25999999;0.25999999;
0.25;0.25999999;0.25999999;0.25;0.25999999;0.25;0.25;0.25999999;0.34;0.25;
0.25999999;0.30000001;0.31999999;0.34;0.25;0.25;0.25999999;0.25;0.25;0.34;
0.25;0.33000001;0.25999999;0.31;0.25999999;0.25;0.25;0.25;0.25;0.25;
0.30000001;0.28;0.25999999;0.25;0.25;0.25999999;0.25999999;0.25;0.25;0.25;
0.25;0.25;0.25999999;0.25;0.25;0.25;0.25;0.27000001;0.25;0.25;
0.25;0.25;0.25999999;0.25;0.25;0.25;0.25;0.25;0.25;0.25;
0.25;0.25;0.25;0.25999999;0.25999999;0.25999999;0.25999999;0.25;0.25;0.25;
0.25999999;0.25;0.25;0.25;0.25999999;0.25999999;0.25999999;0.25999999;0.25999999;0.25;
0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;
0.25;0.25;0.25;0.25;0.25;0.25;0.23999999;0.23999999;0.25;0.25;
0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.23999999;0.25;0.25;
0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;
0.25;0.25;0.23999999;0.25;0.25;0.25;0.25;0.25999999;1.95;0.33000001;
};
};
};
data_flags=SAVE_ROWS|AUTO_CALC;
auto_load=NO_AUTO_LOAD;
auto_load_file=;
keygen 4 0=0;
row_indexes {
name="row_indexes";
[150] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
};
};
};
DataTable_Group @.gp["AnalysisData"] {
name="AnalysisData";
el_typ=DataTable;
el_def=0;
save_tables=1;
};
};
programs {
name="programs";
el_typ=Program;
el_def=0;
tags=;
desc=;
Program_Group @.gp["LeabraAll_Std"] {
name="LeabraAll_Std";
el_typ=Program;
el_def=0;
tags="Leabra, Std, All";
desc="The full set of programs for training a standard Leabra network";
Program @["LeabraBatch"] {
name="LeabraBatch";
short_nm="Batch";
tags="Leabra, Std";
desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
flags=0;
objs {
name="objs";
el_typ=taNBase;
el_def=0;
};
types {
name="types";
el_typ=DynEnumType;
el_def=0;
};
args {
name="args";
el_typ=ProgVar;
el_def=0;
ProgVar @["network"] {
name="network";
var_type=T_Object;
object_type=LeabraNetwork;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="network to operate on -- updates batch counter on network and passes it to train program";
init_from=NULL;
};
ProgVar @["input_data"] {
name="input_data";
var_type=T_Object;
object_type=DataTable;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["InputData"]["Train_pairs"]$$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="datatable with training patterns -- not used by this program, but passed to train program";
init_from=NULL;
};
};
vars {
name="vars";
el_typ=ProgVar;
el_def=0;
ProgVar @["batch"] {
name="batch";
var_type=T_Int;
int_val=10;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="batch counter";
init_from=NULL;
};
ProgVar @["init_batch"] {
name="init_batch";
var_type=T_Bool;
bool_val=1;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="initialize batch counter at start of run -- turn off if using \"parallel batch\" mode to run different batches on different processes";
init_from=NULL;
};
ProgVar @["max_batch"] {
name="max_batch";
var_type=T_Int;
int_val=10;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="maximum number of batch runs to perform";
init_from=NULL;
};
};
functions {
name="functions";
el_typ=Function;
el_def=0;
};
init_code {
name="init_code";
el_typ=ProgCode;
el_def=0;
NetCounterInit @[0] {
desc="initializes local batch counter and batch field on network";
flags=0;
orig_prog_code=;
network_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$$;
local_ctr_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$$;
counter=Network::batch;
update_after=0;
};
};
prog_code {
name="prog_code";
el_typ=ProgCode;
el_def=0;
If @[0] {
desc=;
flags=0;
orig_prog_code=;
cond {
expr="init_batch";
};
true_code {
name="true_code";
el_typ=ProgCode;
el_def=0;
NetCounterInit @[0] {
desc="initializes local batch counter and batch field on network";
flags=0;
orig_prog_code=;
network_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$;
local_ctr_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$;
counter=Network::batch;
update_after=0;
};
};
};
Else @[1] {
desc=;
flags=0;
orig_prog_code=;
else_code {
name="else_code";
el_typ=ProgCode;
el_def=0;
MemberAssign @[0] {
desc="just set directly to current batch value";
flags=0;
orig_prog_code=;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$;
path="batch";
expr {
expr="batch";
};
update_after=0;
};
};
};
WhileLoop @[2] {
desc="the main loop over training runs";
flags=0;
orig_prog_code=;
loop_code {
name="loop_code";
el_typ=ProgCode;
el_def=0;
ProgramCall @[0] {
desc="run the training program -- sets the network and input_data args";
flags=0;
orig_prog_code=;
prog_args {
name="prog_args";
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=LeabraNetwork;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
ProgArg @[1] {
arg_type=DataTable;
type="DataTable*";
name="input_data";
required=1;
def_val=;
expr {
expr="input_data";
};
};
ProgArg @[2] {
arg_type=bool;
type="bool";
name="no_prompts";
required=1;
def_val=;
expr {
expr="true";
};
};
ProgArg @[3] {
arg_type=int;
type="int";
name="batch";
required=1;
def_val=;
expr {
expr="batch";
};
};
};
target=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$$;
targ_ld_init="*LeabraTrain*";
};
NetCounterIncr @[1] {
desc="increment the local batch counter and copy to network";
flags=0;
orig_prog_code=;
network_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$;
local_ctr_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$;
counter=Network::batch;
update_after=0;
};
};
test {
expr="batch < max_batch";
};
};
};
step_prog=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraSettle"]$$;
step_n=1;
};
Program @["LeabraTrain"] {
name="LeabraTrain";
short_nm="Train";
tags="Leabra, Std";
desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task";
flags=0;
objs {
name="objs";
el_typ=RndSeed;
el_def=0;
RndSeed @["rnd_seed"] {
name="rnd_seed";
seed{ -911453604;497702524;-1981777170;1942801183;2119250138;53115244;-592399454;2000619404;2009296809;-999033519;-582571164;1114422958;1908138519;-508036933;-289957722;933398056;2013418968;2110521262;-1625716963;876275278;1419680474;-479245444;-288833487;-43215407;-926777870;1740155182;850257573;-108180428;1544126671;-749727901;577794302;29786709;1533274281;-1031490967;1522212340;479063756;-799120736;779822452;869063402;-983590791;-1431932342;-422863215;-198200892;-1385848146;-807716344;-1915041404;399783948;-1861449493;-107629283;835683079;1026453749;1886957020;-239936155;701951859;-1743387755;-1782826550;-1029254112;-1538429688;1965842220;-1884577284;509204338;165413431;-461549839;1968023481;208446424;-1519174535;2100408265;707027499;-334447045;-336657315;-986380452;1987493826;-875691209;-1368778803;-1857934347;543393726;-384091070;-1664839950;849007870;-838601083;-1406666450;-1336812883;756805213;2132791300;-100483251;1050163227;349279741;903844392;-981200352;-574299352;913089361;1064945744;1903089644;-171702818;1115985295;825884517;223465529;-951801890;787906451;-225771422;45223849;339779346;-2078448512;1911568817;1450570456;1802367238;-1014114515;1499431825;-1190725572;-1404363037;-246376397;-1081230497;-944066271;-446622501;626839978;-579292539;1641162066;388441396;164004346;481694233;-835484331;-636968601;1031942382;-1357992863;1707081355;297617135;254534601;2142662604;-1888890527;-1283287152;1923149596;524278772;1955814344;683722706;1304180832;-602593332;-1857061837;-282511138;884782267;-1605869230;1641166108;-970556930;-698251681;1105542875;1577744018;-174427248;-1160887151;-99042926;637980617;543263714;629547712;-1983613353;-1775686367;1197181544;957271303;-37706914;-403162803;-725919133;703072382;411617365;931104553;583288014;-1981586456;-1969969675;-147346921;1770442377;-865188786;69806088;585176016;-2129190471;524968561;-2078388160;1656159414;-59726880;526001213;1436545472;1757522645;346020437;-2093244101;610082096;967521444;3377513;-1229101021;979025596;486792420;-1107809619;-1064730939;-1971258663;-350278621;650742109;630257519;-22739318;-1051073075;-1793791737;2098633915;887185445;-1235108771;2096572736;526258283;1305656830;1103850851;679058035;-926516439;-2074209699;629872455;-700043568;1686398221;1436764811;1846952770;1939629376;2141895799;-1401847455;347801571;1077385316;-582996561;1920405939;1968193042;-261772968;1161462977;1113661595;117065630;1315164211;556394136;-266906921;-397204860;200793892;-1456386538;-1245150521;-1250294371;561991584;104270598;-1110994875;-1847399445;-1104821034;218635406;727532273;-2060098815;421637148;1948771322;1285244406;1869924963;1511017371;1243168436;-780690596;-101768081;617294737;-1687172565;-110513116;1496183643;1708273019;1553480732;-519684756;-1604344633;306999222;-169182772;693819050;-2074235886;-830901423;870277724;-2092364977;-1376212123;-626606168;-502717827;713165501;1681416857;-1993720063;-1233618887;-1552153774;-1260183652;1859717219;1942667704;-2001113076;646100118;1548715583;-840358520;-1394592790;2073273244;2031719174;1878442457;-1493232817;1729221497;-1669617807;25861241;482049496;1027161940;-171577023;1443004968;566512716;-2057648356;1261542903;1372977456;1209895544;403792865;1953944042;1789171165;270916851;819148807;-931013908;1777223797;989113071;-1299556233;1092518998;1480443521;1293537711;1613224150;-458973948;-1943292939;-800182106;-144408755;-974587653;820966158;-1145412675;505647763;-209813448;690301825;-1132907488;-39467866;-987372714;569257671;359789762;-79731766;-1830293362;-1190079362;616444463;2066609359;-893004661;243376878;-170350803;-365718418;197322058;1839141244;-1769419620;-640988766;-1493027118;1390735710;-417852726;1577843613;899989981;-557137277;-1181401645;-223527479;1559264263;1231693236;687980224;1409614616;1985059638;-859591411;607241697;1068465185;1519428450;1580561005;1984295419;770523906;-997883093;1911892010;1701109082;1824393547;318260631;-195934983;-969604599;-683202214;-1314721146;-1699851394;-371700393;-1861978224;2008961031;-820852276;-1726847206;790005224;719584761;-324242001;1924627023;-1292304326;2128809869;263917490;-703499087;355749298;-1827345741;1336955471;-188860351;-1124760186;1206735505;1673569358;1159207850;251555575;1350891508;282784299;-1792569478;-1867852836;-237410789;-1391451906;535290099;1484967015;-1983431737;-1191574717;1227363120;-2123641631;509760028;-1451269478;-584237177;-428624732;1004840564;2071314774;-1219635226;293286536;-1789019843;-1160393103;1257963510;465775883;1181264368;466880175;1963150246;1935292799;-2050023853;-1574481773;1670865876;-436575831;498238387;1573765697;1860297955;1019887822;-434384661;1109234990;-758447054;-1733434883;210018884;184969854;-638094495;-351405738;-465248970;1375708311;-250988835;-1200196282;274311557;767234091;-1147050582;229377276;-429075167;1391282720;-1489966660;-1349195858;-613518187;655509224;41952067;-901659093;1242994565;647720146;-95661415;-762903934;-853407834;-167292197;1612794107;872781414;-1468338685;803565867;-347952450;-438860967;-1832386997;-1342478953;-1700867436;158686458;-1931117969;-1173838897;-72591696;1749614959;-1466732489;-693460037;486019435;-853662709;1784971517;-1718501054;-542343145;-2145043012;1424886735;551413792;-1851410821;777437337;-2055545030;628558582;-1852900627;-1573131989;-1115099122;-1345248610;189539695;253504943;509193968;9467542;244257045;-1574372303;1384631560;-1551059081;887422996;-605045296;1190187308;-1859215953;-2055156688;1182094250;62752616;2064979450;1441923322;1440593915;130310551;-2016063095;-1634103090;-962113932;1111533036;1103646075;-1143808739;308270647;-1728842576;-1357853128;731146465;1741999045;442255957;-1367092597;-211000560;-1001569405;-1541725307;828982601;-2053412652;121955446;-1012184425;1468637806;1984134870;-211608609;-1559839783;1932350069;-483549741;455316768;1404565425;-2131629438;-1083177325;-726846903;809792327;-945587175;-1650466215;1421083391;-40821169;-1752456682;1650436095;-1063897262;236269074;-1098854088;1231067137;-864814560;1435725040;1326315063;750717809;-527040839;1335167879;27411460;126286779;-82483729;-596605883;1427613640;-1650539144;94909774;-1660565517;786357571;321595550;1830131334;-1463573388;-1888679232;336925373;1921158085;-1935078775;-484274675;-452359235;1925108270;-150137404;88217789;-612636212;-1599338521;1197190294;-1565988655;-217986946;191496337;1796658294;2062976053;-43123001;-2129106536;-631564793;785634778;-1476719799;-1843160609;644742010;1565426540;1749692748;-1362974035;-1628569512;210522064;-121516193;1475546524;1618503234;-1911605823;-333802686;-770644999;-1635729929;-64614145;-1593863741;-1306801027;1356900212;309506179;-1085619958;553874052;-1337928591;-1905631555;1206164154;-753131225;1875990933;160730566;-1343953023;2110354451;873885567;788395649;-1666954164;-1211507922;388105925;-1586554077;-801022096;1174681035;-1862773473;-1487856673;1777616288;};
mti=624;
is_gauss_double_cached=0;
cached_gauss_double=0;
};
};
types {
name="types";
el_typ=DynEnumType;
el_def=0;
DynEnumType @["RndInitType"] {
name="RndInitType";
desc=;
enums {
name=;
el_typ=DynEnumItem;
el_def=0;
DynEnumItem @["OLD_SEED"] {
name="OLD_SEED";
value=0;
desc="use stored random seed value (recreates same sequence every time)";
};
DynEnumItem @["NEW_SEED"] {
name="NEW_SEED";
value=1;
desc="generate new random seed (new sequence of random numbers)";
};
};
bits=0;
};
};
args {
name="args";
el_typ=ProgVar;
el_def=0;
ProgVar @["network"] {
name="network";
var_type=T_Object;
object_type=LeabraNetwork;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="network to train";
init_from=NULL;
};
ProgVar @["input_data"] {
name="input_data";
var_type=T_Object;
object_type=DataTable;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["InputData"]["Train_pairs"]$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="datatable with training patterns";
init_from=NULL;
};
ProgVar @["no_prompts"] {
name="no_prompts";
var_type=T_Bool;
bool_val=1;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
init_from=NULL;
};
ProgVar @["batch"] {
name="batch";
var_type=T_Int;
int_val=9;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
};
vars {
name="vars";
el_typ=ProgVar;
el_def=0;
ProgVar @["max_epoch"] {
name="max_epoch";
var_type=T_Int;
int_val=10;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="maximum number of epochs to run";
init_from=NULL;
};
ProgVar @["epoch"] {
name="epoch";
var_type=T_Int;
int_val=10;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="current epoch -- local copy, which is used to update network's epoch counter";
init_from=NULL;
};
ProgVar @["MSP_learning_rate"] {
name="MSP_learning_rate";
var_type=T_Real;
real_val=0.02;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="default .02";
init_from=NULL;
};
ProgVar @["MSP_sparse_projs"] {
name="MSP_sparse_projs";
var_type=T_Bool;
bool_val=0;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
ProgVar @["CA1_prop_act"] {
name="CA1_prop_act";
var_type=T_Real;
real_val=0.25;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="default .25";
init_from=NULL;
};
ProgVar @["train_mode"] {
name="train_mode";
var_type=T_HardEnum;
int_val=1;
hard_enum_type=Network::TrainMode;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="TRAIN = update weights (learn), TEST = just record network's responses but don't learn";
init_from=NULL;
};
ProgVar @["rnd_init"] {
name="rnd_init";
var_type=T_DynEnum;
dyn_enum_val {
enum_type=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].types["RndInitType"]$$;
value=1;
};
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="how to initialize the random numbers when the Init button is pressed";
init_from=NULL;
};
ProgVar @["err_stopcrit"] {
name="err_stopcrit";
var_type=T_Real;
real_val=-1;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
init_from=NULL;
};
ProgVar @["rnd_seed"] {
name="rnd_seed";
var_type=T_Object;
object_type=RndSeed;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].objs["rnd_seed"]$$;
objs_ptr=1;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="random seed that is used at start of training -- if OldSeed is called";
init_from=NULL;
};
ProgVar @["train_timer"] {
name="train_timer";
var_type=T_Object;
object_type=TimeUsed;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].train_time$$;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="records time used to train network (object lives on network -- this is a pointer to it)";
init_from=NULL;
};
ProgVar @["output_table"] {
name="output_table";
var_type=T_Object;
object_type=DataTable;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["OutputData"]["TrialTestOutputData"]$$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
ProgVar @["test_data"] {
name="test_data";
var_type=T_Object;
object_type=DataTable;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["InputData"]["Test_pairs"]$$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
ProgVar @["fname"] {
name="fname";
var_type=T_String;
string_val="output_acts_wtrans_prop01_x4__batch9_epoch9";
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
ProgVar @["fname_prefix"] {
name="fname_prefix";
var_type=T_String;
string_val="output_acts";
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
ProgVar @["runtest"] {
name="runtest";
var_type=T_Bool;
bool_val=1;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
init_from=NULL;
};
ProgVar @["e_c_in__c_a1"] {
name="e_c_in__c_a1";
var_type=T_Object;
object_type=HippoEncoderConSpec;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_in_CA1"]$$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
ProgVar @["c_a1__e_c_out"] {
name="c_a1__e_c_out";
var_type=T_Object;
object_type=HippoEncoderConSpec;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["CA1_EC_out"]$$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
ProgVar @["e_c_out__c_a1"] {
name="e_c_out__c_a1";
var_type=T_Object;
object_type=HippoEncoderConSpec;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_out_CA1"]$$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
ProgVar @["c_a1"] {
name="c_a1";
var_type=T_Object;
object_type=CA1LayerSpec;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["CA1"]$$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
ProgVar @["ECout_from_CA1"] {
name="ECout_from_CA1";
var_type=T_Object;
object_type=LeabraPrjn;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["EC_out"].projections["Fm_CA1"]$$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
ProgVar @["CA1_from_ECin"] {
name="CA1_from_ECin";
var_type=T_Object;
object_type=LeabraPrjn;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["CA1"].projections["Fm_EC_in"]$$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
ProgVar @["CA1_from_ECout"] {
name="CA1_from_ECout";
var_type=T_Object;
object_type=LeabraPrjn;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["CA1"].projections["Fm_EC_out"]$$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
};
functions {
name="functions";
el_typ=Function;
el_def=0;
};
init_code {
name="init_code";
el_typ=ProgCode;
el_def=0;
AssignExpr @[0] {
desc=;
flags=0;
orig_prog_code=;
result_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["no_prompts"]$$;
expr {
expr="false";
};
};
MethodCall @[1] {
desc="check network to make sure it is ready to be run";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$$;
method=taBase::CheckConfig;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="quiet";
required=0;
def_val="false";
expr {
expr="false";
};
};
};
};
AssignExpr @[2] {
desc="get our pointer to the network training time object";
flags=0;
orig_prog_code=;
result_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$$;
expr {
expr="network.train_time";
};
};
If @[3] {
desc="initialize random seed (either old or new)";
flags=0;
orig_prog_code=;
cond {
expr="rnd_init == OLD_SEED";
};
true_code {
name=;
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="restore previous random seed (all runs produce same results)";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seed"]$$;
method=RndSeed::OldSeed;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
};
Else @[4] {
desc=;
flags=0;
orig_prog_code=;
else_code {
name="else_code";
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="new random numbers each time";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seed"]$;
method=RndSeed::NewSeed;
meth_args {
name="meth_args";
el_typ=ProgArg;
el_def=0;
};
};
};
};
IfGuiPrompt @[5] {
desc="don't initialize weights without checking";
flags=0;
orig_prog_code=;
prompt="Do you want to Initialize Network Weights";
yes_label="Yes";
no_label="No";
yes_code {
name=;
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="do a build to get different projections each time";
flags=NON_STD;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
method=Network::Build;
meth_args {
name="meth_args";
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[1] {
desc="initialize network weights: could also load pre-set weights or something else here";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
method=Network::Init_Weights;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
PrintExpr @[2] {
desc=;
flags=0;
orig_prog_code=;
expr {
expr="network.name << \" Weights Initialized\"";
};
my_mask=NULL;
debug_level=NULL;
};
};
};
};
prog_code {
name="prog_code";
el_typ=ProgCode;
el_def=0;
AssignExpr @[0] {
desc="get our pointer to the network training time object";
flags=0;
orig_prog_code=;
result_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
expr {
expr="network.train_time";
};
};
MethodCall @[1] {
desc="start timer to keep track of how long it takes to run entire training run";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
method=TimeUsed::StartTimer;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="reset_used";
required=0;
def_val="true";
expr {
expr="true";
};
};
};
};
MemberAssign @[2] {
desc="set network's training mode to our local value";
flags=0;
orig_prog_code=;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
path="train_mode";
expr {
expr="train_mode";
};
update_after=0;
};
If @[3] {
desc=;
flags=0;
orig_prog_code=;
cond {
expr="no_prompts";
};
true_code {
name=;
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="do a build to get different projections each time";
flags=NON_STD;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
method=Network::Build;
meth_args {
name="meth_args";
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[1] {
desc="initialize network weights: could also load pre-set weights or something else here";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
method=Network::Init_Weights;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
PrintExpr @[2] {
desc=;
flags=0;
orig_prog_code=;
expr {
expr="network.name << \" Weights Initialized\"";
};
my_mask=NULL;
debug_level=NULL;
};
};
};
MemberAssign @[4] {
desc="so that lrate for entire MSP can be set in the control panel, for teaching";
flags=0;
orig_prog_code=;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["c_a1__e_c_out"]$$;
path="lrate";
expr {
expr="MSP_learning_rate";
};
update_after=1;
};
MemberAssign @[5] {
desc="so that lrate for entire MSP can be set in the control panel, for teaching";
flags=0;
orig_prog_code=;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["e_c_in__c_a1"]$$;
path="lrate";
expr {
expr="MSP_learning_rate";
};
update_after=1;
};
MemberAssign @[6] {
desc="so that lrate for entire MSP can be set in the control panel, for teaching";
flags=0;
orig_prog_code=;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["e_c_out__c_a1"]$$;
path="lrate";
expr {
expr="MSP_learning_rate";
};
update_after=1;
};
MemberAssign @[7] {
desc="for teaching";
flags=0;
orig_prog_code=;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["c_a1"]$$;
path="kwta.pct";
expr {
expr="CA1_prop_act";
};
update_after=1;
};
AssignExpr @[8] {
desc="grab the official network epoch counter: will be initialized if needed by now";
flags=0;
orig_prog_code=;
result_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$$;
expr {
expr="network.epoch";
};
};
WhileLoop @[9] {
desc="main loop over epochs of training";
flags=0;
orig_prog_code=;
loop_code {
name=;
el_typ=ProgCode;
el_def=0;
If @[0] {
desc=;
flags=0;
orig_prog_code=;
cond {
expr="runtest";
};
true_code {
name="true_code";
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc=;
flags=0;
orig_prog_code=;
result_var=NULL;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["output_table"]$$;
method=DataTable::ResetData;
meth_args {
name="meth_args";
el_typ=ProgArg;
el_def=0;
};
};
ProgramCall @[1] {
desc="record the settled response";
flags=0;
orig_prog_code=;
prog_args {
name="prog_args";
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=LeabraNetwork;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
ProgArg @[1] {
arg_type=DataTable;
type="DataTable*";
name="input_data";
required=1;
def_val=;
expr {
expr="test_data";
};
};
ProgArg @[2] {
arg_type=int;
type="int";
name="cycle_stop";
required=1;
def_val=;
expr {
expr="80";
};
};
};
target=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"]$;
targ_ld_init="*LeabraEpoch*";
};
AssignExpr @[2] {
desc=;
flags=0;
orig_prog_code=;
result_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["fname"]$$;
expr {
expr="fname_prefix";
};
};
VarIncr @[3] {
desc=;
flags=0;
orig_prog_code=;
var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["fname"]$;
expr {
expr="\"_batch\"";
};
};
VarIncr @[4] {
desc=;
flags=0;
orig_prog_code=;
var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["fname"]$;
expr {
expr="batch";
};
};
VarIncr @[5] {
desc=;
flags=0;
orig_prog_code=;
var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["fname"]$;
expr {
expr="\"_epoch\"";
};
};
VarIncr @[6] {
desc=;
flags=0;
orig_prog_code=;
var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["fname"]$;
expr {
expr="epoch";
};
};
MethodCall @[7] {
desc=;
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["output_table"]$;
method=DataTable::ExportData;
meth_args {
name="meth_args";
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=const_taString_ref;
type="taString&";
name="fname";
required=0;
def_val="\"\"";
expr {
expr="fname";
};
};
ProgArg @[1] {
arg_type=DataTable::Delimiters;
type="DataTable::Delimiters";
name="delim";
required=0;
def_val="DataTable::COMMA";
expr {
expr=;
};
};
ProgArg @[2] {
arg_type=bool;
type="bool";
name="quote_str";
required=0;
def_val="true";
expr {
expr=;
};
};
ProgArg @[3] {
arg_type=bool;
type="bool";
name="headers";
required=0;
def_val="true";
expr {
expr=;
};
};
};
};
};
};
ProgramCall @[1] {
desc="run the epoch program (one epoch), passes our network and input_data";
flags=0;
orig_prog_code=;
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=LeabraNetwork;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
ProgArg @[1] {
arg_type=DataTable;
type="DataTable*";
name="input_data";
required=1;
def_val=;
expr {
expr="input_data";
};
};
};
target=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"]$$;
targ_ld_init="*LeabraEpoch*";
};
NetCounterIncr @[2] {
desc="increment the epoch counter (locally and on network)";
flags=0;
orig_prog_code=;
network_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
local_ctr_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$;
counter=Network::epoch;
update_after=1;
};
IfBreak @[3] {
desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here instead)";
flags=0;
orig_prog_code=;
cond {
expr="network.cnt_err <= err_stopcrit";
};
};
};
test {
expr="epoch < max_epoch";
};
};
MethodCall @[10] {
desc="stop the timer -- time elapsed is now recorded in this object, and can be displayed or recorded to a data table";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
method=TimeUsed::EndTimer;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
step_prog=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"]$;
step_n=1;
};
Program @["LeabraEpoch"] {
name="LeabraEpoch";
short_nm="Epoch";
tags="Leabra, Std";
desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
flags=0;
objs {
name="objs";
el_typ=taNBase;
el_def=0;
};
types {
name="types";
el_typ=DynEnumType;
el_def=0;
};
args {
name="args";
el_typ=ProgVar;
el_def=0;
ProgVar @["network"] {
name="network";
var_type=T_Object;
object_type=LeabraNetwork;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="network to operate on";
init_from=NULL;
};
ProgVar @["input_data"] {
name="input_data";
var_type=T_Object;
object_type=DataTable;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["InputData"]["Train_pairs"]$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="table of patterns to present to the network, one row at a time";
init_from=NULL;
};
};
vars {
name="vars";
el_typ=ProgVar;
el_def=0;
ProgVar @["data_loop_order"] {
name="data_loop_order";
var_type=T_HardEnum;
int_val=1;
hard_enum_type=DataLoop::Order;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
init_from=NULL;
};
ProgVar @["trial"] {
name="trial";
var_type=T_Int;
int_val=40;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="current trial (event) within the epoch -- increments automatically";
init_from=NULL;
};
ProgVar @["trial_mon_data"] {
name="trial_mon_data";
var_type=T_Object;
object_type=DataTable;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["OutputData"]["TrialOutputData"]$$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
init_from=NULL;
};
ProgVar @["epoch_timer"] {
name="epoch_timer";
var_type=T_Object;
object_type=TimeUsed;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].epoch_time$$;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
init_from=NULL;
};
ProgVar @["data_loop_index"] {
name="data_loop_index";
var_type=T_Int;
int_val=1000001;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
init_from=NULL;
};
ProgVar @["max_num_trials"] {
name="max_num_trials";
var_type=T_Int;
int_val=40;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
ProgVar @["fm__e_c_out"] {
name="fm__e_c_out";
var_type=T_Object;
object_type=LeabraPrjn;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["CA1"].projections["Fm_EC_out"]$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
};
functions {
name="functions";
el_typ=Function;
el_def=0;
};
init_code {
name="init_code";
el_typ=ProgCode;
el_def=0;
NetCounterInit @[0] {
desc="initialize trial counter (local variable and in the network)";
flags=0;
orig_prog_code=;
network_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$$;
local_ctr_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial"]$$;
counter=Network::trial;
update_after=0;
};
AssignExpr @[1] {
desc="get pointer to epoch timer object on network";
flags=0;
orig_prog_code=;
result_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$$;
expr {
expr="network.epoch_time";
};
};
};
prog_code {
name="prog_code";
el_typ=ProgCode;
el_def=0;
MemberAssign @[0] {
desc="set back to training mode";
flags=NEW_EL;
orig_prog_code=;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
path="train_mode";
expr {
expr="Network::TRAIN";
};
update_after=0;
};
NetCounterInit @[1] {
desc="initialize trial counter (local variable and in the network)";
flags=0;
orig_prog_code=;
network_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
local_ctr_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial"]$;
counter=Network::trial;
update_after=0;
};
AssignExpr @[2] {
desc="get pointer to epoch timer object on network";
flags=0;
orig_prog_code=;
result_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
expr {
expr="network.epoch_time";
};
};
MethodCall @[3] {
desc="start the epoch timer to record computation time per epoch";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
method=TimeUsed::StartTimer;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="reset_used";
required=0;
def_val="true";
expr {
expr="true";
};
};
};
};
MethodCall @[4] {
desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial_mon_data"]$$;
method=DataTable::ResetData;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
NetDataLoop @[5] {
desc="iterates over the events/rows of input_data, according to data_loop_order variable";
flags=0;
orig_prog_code=;
loop_code {
name=;
el_typ=ProgCode;
el_def=0;
ProgramCall @[0] {
desc="run the trial program, passing network and input_data";
flags=0;
orig_prog_code=;
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=LeabraNetwork;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
ProgArg @[1] {
arg_type=DataTable;
type="DataTable*";
name="input_data";
required=1;
def_val=;
expr {
expr="input_data";
};
};
};
target=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrial"]$$;
targ_ld_init="*LeabraTrial*";
};
If @[1] {
desc=;
flags=NON_STD;
orig_prog_code=;
cond {
expr="data_loop_index ==  max_num_trials";
};
true_code {
name="true_code";
el_typ=ProgCode;
el_def=0;
AssignExpr @[0] {
desc="cut off epoch here";
flags=0;
orig_prog_code=;
result_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["data_loop_index"]$$;
expr {
expr="1000000";
};
};
};
};
};
data_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["input_data"]$$;
index_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["data_loop_index"]$;
order_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["data_loop_order"]$$;
order=PERMUTED;
update_after=0;
dmem_nprocs=1;
dmem_this_proc=0;
grouped=0;
group_col 9 0="Group";
group_index_var=NULL;
group_order_var=NULL;
group_order=PERMUTED;
group_idx_list{ };
};
If @[6] {
desc="if full batch mode, update only at end of epoch";
flags=0;
orig_prog_code=;
cond {
expr="network.wt_update == Network::BATCH";
};
true_code {
name=;
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="final update of weights based on accumulated changes";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
method=Network::Compute_Weights;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
};
MethodCall @[7] {
desc=;
flags=CAN_REVERT_TO_CODE;
orig_prog_code="network.Compute_StableWeights()";
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
method=LeabraNetwork::Compute_StableWeights;
meth_args {
name="ProgArg_List_0";
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[8] {
desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
method=LeabraNetwork::Compute_EpochStats;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[9] {
desc=;
flags=NON_STD;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
method=LeabraNetwork::Compute_AvgAbsRelNetin;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[10] {
desc="done with the computation in the epoch -- record time it took";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
method=TimeUsed::EndTimer;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
ProgramCall @[11] {
desc="run program that records data from network and possibly other sources about the epoch";
flags=0;
orig_prog_code=;
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=Network;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
};
target=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"]$$;
targ_ld_init="*LeabraEpochMonitor*";
};
};
step_prog=NULL;
step_n=1;
};
Program @["LeabraTrial"] {
name="LeabraTrial";
short_nm="Trial";
tags="Leabra, Std";
desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
flags=0;
objs {
name="objs";
el_typ=taNBase;
el_def=0;
};
types {
name="types";
el_typ=DynEnumType;
el_def=0;
};
args {
name="args";
el_typ=ProgVar;
el_def=0;
ProgVar @["network"] {
name="network";
var_type=T_Object;
object_type=LeabraNetwork;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="network to operate on -- typically set by higher-level calling programs";
init_from=NULL;
};
ProgVar @["input_data"] {
name="input_data";
var_type=T_Object;
object_type=DataTable;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["InputData"]["Train_pairs"]$;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="datatable containing training input/output patterns";
init_from=NULL;
};
};
vars {
name="vars";
el_typ=ProgVar;
el_def=0;
ProgVar @["phase_no"] {
name="phase_no";
var_type=T_Int;
int_val=2;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
init_from=NULL;
};
ProgVar @["update_net_view"] {
name="update_net_view";
var_type=T_Bool;
bool_val=0;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="determines whether to update any network view displays after trial is completed";
init_from=NULL;
};
ProgVar @["trial"] {
name="trial";
var_type=T_Int;
int_val=0;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|EDIT_VAL;
reference=0;
desc="current trial (event) within the epoch -- increments automatically";
init_from=NULL;
};
};
functions {
name="functions";
el_typ=Function;
el_def=0;
};
init_code {
name="init_code";
el_typ=ProgCode;
el_def=0;
NetCounterInit @[0] {
desc="initialize the local phase_no counter, and corresponding network one";
flags=0;
orig_prog_code=;
network_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$$;
local_ctr_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrial"].vars["phase_no"]$$;
counter=LeabraNetwork::phase_no;
update_after=0;
};
};
prog_code {
name="prog_code";
el_typ=ProgCode;
el_def=0;
NetCounterInit @[0] {
desc="initialize the local phase_no counter, and corresponding network one";
flags=0;
orig_prog_code=;
network_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
local_ctr_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrial"].vars["phase_no"]$;
counter=LeabraNetwork::phase_no;
update_after=0;
};
MethodCall @[1] {
desc="initializes various counters at start of trial";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
method=LeabraNetwork::Trial_Init;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
WhileLoop @[2] {
desc="loop over phases of settling in the network";
flags=0;
orig_prog_code=;
loop_code {
name=;
el_typ=ProgCode;
el_def=0;
ProgramCall @[0] {
desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
flags=0;
orig_prog_code=;
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=LeabraNetwork;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
ProgArg @[1] {
arg_type=DataTable;
type="DataTable*";
name="input_data";
required=1;
def_val=;
expr {
expr="input_data";
};
};
};
target=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraSettle"]$;
targ_ld_init="*LeabraSettle*";
};
NetCounterIncr @[1] {
desc="increment the phase number (also on network)";
flags=0;
orig_prog_code=;
network_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
local_ctr_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrial"].vars["phase_no"]$;
counter=LeabraNetwork::phase_no;
update_after=0;
};
MethodCall @[2] {
desc="increments other phase state information to prepare for the next phase of settling";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
method=LeabraNetwork::Trial_UpdatePhase;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
test {
expr="phase_no < network.phase_max";
};
};
MethodCall @[3] {
desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
method=LeabraNetwork::Trial_Final;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[4] {
desc="special for adapting netin";
flags=NON_STD;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
method=LeabraNetwork::Compute_AbsRelNetin;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
If @[5] {
desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
flags=0;
orig_prog_code=;
cond {
expr="network.Compute_Weights_Test(network.trial+1)";
};
true_code {
name=;
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="update the weight values based on changes computed by trial program";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
method=Network::Compute_Weights;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
};
ProgramCall @[6] {
desc="records data about the trial-level processing to a datatable for graphing/processing";
flags=0;
orig_prog_code=;
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=Network;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
};
target=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"]$$;
targ_ld_init="*LeabraTrialMonitor*";
};
NetUpdateView @[7] {
desc="update the network view(s) (only if update_net_view is true)";
flags=0;
orig_prog_code=;
network_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
update_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrial"].vars["update_net_view"]$$;
};
};
step_prog=NULL;
step_n=1;
};
Program @["LeabraSettle"] {
name="LeabraSettle";
short_nm="Settle";
tags="Leabra, Std";
desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
flags=0;
objs {
name="objs";
el_typ=taNBase;
el_def=0;
};
types {
name="types";
el_typ=DynEnumType;
el_def=0;
};
args {
name="args";
el_typ=ProgVar;
el_def=0;
ProgVar @["network"] {
name="network";
var_type=T_Object;
object_type=LeabraNetwork;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
ProgVar @["input_data"] {
name="input_data";
var_type=T_Object;
object_type=DataTable;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["InputData"]["Train_pairs"]$;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
};
vars {
name="vars";
el_typ=ProgVar;
el_def=0;
ProgVar @["cycle"] {
name="cycle";
var_type=T_Int;
int_val=20;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="current cycle of settling (local loop counter)";
init_from=NULL;
};
ProgVar @["min_cycles"] {
name="min_cycles";
var_type=T_Int;
int_val=50;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
init_from=NULL;
};
ProgVar @["update_net_view"] {
name="update_net_view";
var_type=T_Bool;
bool_val=1;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="if true, will update network views at end of settling";
init_from=NULL;
};
};
functions {
name="functions";
el_typ=Function;
el_def=0;
};
init_code {
name="init_code";
el_typ=ProgCode;
el_def=0;
NetCounterInit @[0] {
desc="initialize local cycle counter and corresponding counter on network";
flags=0;
orig_prog_code=;
network_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$$;
local_ctr_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraSettle"].vars["cycle"]$$;
counter=Network::cycle;
update_after=0;
};
};
prog_code {
name="prog_code";
el_typ=ProgCode;
el_def=0;
NetCounterInit @[0] {
desc="initialize local cycle counter and corresponding counter on network";
flags=0;
orig_prog_code=;
network_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
local_ctr_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraSettle"].vars["cycle"]$;
counter=Network::cycle;
update_after=0;
};
MethodCall @[1] {
desc="resets input data, before getting new external inputs data from apply inputs call";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
method=Network::Init_InputData;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
ProgramCall @[2] {
desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
flags=0;
orig_prog_code=;
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=Network;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
ProgArg @[1] {
arg_type=DataTable;
type="DataTable*";
name="input_data";
required=1;
def_val=;
expr {
expr="input_data";
};
};
};
target=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["ApplyInputs"]$$;
targ_ld_init="*ApplyInputs*";
};
MethodCall @[3] {
desc="initializes various counters at start of settling";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
method=LeabraNetwork::Settle_Init;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
If @[4] {
desc="get appropriate min_cycles value depending on which phase we're in";
flags=0;
orig_prog_code=;
cond {
expr="network.phase_no <= 1";
};
true_code {
name=;
el_typ=ProgCode;
el_def=0;
AssignExpr @[0] {
desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
flags=0;
orig_prog_code=;
result_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraSettle"].vars["min_cycles"]$$;
expr {
expr="network.min_cycles";
};
};
};
};
Else @[5] {
desc=;
flags=0;
orig_prog_code=;
else_code {
name="else_code";
el_typ=ProgCode;
el_def=0;
AssignExpr @[0] {
desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
flags=0;
orig_prog_code=;
result_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraSettle"].vars["min_cycles"]$;
expr {
expr="network.min_cycles_phase2";
};
};
};
};
WhileLoop @[6] {
desc="the main loop over cycles of updating";
flags=0;
orig_prog_code=;
loop_code {
name=;
el_typ=ProgCode;
el_def=0;
ProgramCall @[0] {
desc="run the cycle program, which computes one cycle of activations";
flags=0;
orig_prog_code=;
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=LeabraNetwork;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
};
target=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraCycle"]$$;
targ_ld_init="*LeabraCycle*";
};
NetCounterIncr @[1] {
desc="increment cycle counter (also on network)";
flags=0;
orig_prog_code=;
network_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
local_ctr_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraSettle"].vars["cycle"]$;
counter=Network::cycle;
update_after=0;
};
IfContinue @[2] {
desc="avoid subsequent stopping criteria if below min_cycles";
flags=0;
orig_prog_code=;
cond {
expr="cycle < min_cycles";
};
};
IfBreak @[3] {
desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
flags=0;
orig_prog_code=;
cond {
expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
};
};
};
test {
expr="cycle < network.cycle_max";
};
};
MethodCall @[7] {
desc="perform final operations at end of settling (storing final activations, etc)";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
method=LeabraNetwork::Settle_Final;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
If @[8] {
desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
flags=0;
orig_prog_code=;
cond {
expr="network.phase == LeabraNetwork::MINUS_PHASE";
};
true_code {
name=;
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="compute trial-level statistics";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
method=LeabraNetwork::Compute_TrialStats;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
};
If @[9] {
desc="this stat must be called in plus phase when reward information is avail";
flags=0;
orig_prog_code=;
cond {
expr="network.phase_no == 1";
};
true_code {
name=;
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="get external reward information";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
method=LeabraNetwork::Compute_ExtRew;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
};
NetUpdateView @[10] {
desc="update network views, if update_net_view == true";
flags=0;
orig_prog_code=;
network_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraSettle"].args["network"]$;
update_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraSettle"].vars["update_net_view"]$$;
};
};
step_prog=NULL;
step_n=1;
};
Program @["LeabraCycle"] {
name="LeabraCycle";
short_nm="Cycle";
tags="Leabra, Std";
desc="runs one cycle of leabra processing (updating net inputs and activations)";
flags=0;
objs {
name="objs";
el_typ=taNBase;
el_def=0;
};
types {
name="types";
el_typ=DynEnumType;
el_def=0;
};
args {
name="args";
el_typ=ProgVar;
el_def=0;
ProgVar @["network"] {
name="network";
var_type=T_Object;
object_type=LeabraNetwork;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
};
vars {
name="vars";
el_typ=ProgVar;
el_def=0;
ProgVar @["update_net_view"] {
name="update_net_view";
var_type=T_Bool;
bool_val=1;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
init_from=NULL;
};
};
functions {
name="functions";
el_typ=Function;
el_def=0;
};
init_code {
name="init_code";
el_typ=ProgCode;
el_def=0;
};
prog_code {
name="prog_code";
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="this does all the standard leabra processing for one cycle of activation updating";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraCycle"].args["network"]$$;
method=LeabraNetwork::Cycle_Run;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
NetUpdateView @[1] {
desc="update network views if update_net_view == true";
flags=0;
orig_prog_code=;
network_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraCycle"].args["network"]$;
update_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraCycle"].vars["update_net_view"]$$;
};
};
step_prog=NULL;
step_n=10;
};
Program @["ApplyInputs"] {
name="ApplyInputs";
short_nm="AplyIn";
tags="Network, InputData, Apply";
desc="apply the current input data to the network as external input and target values";
flags=NO_STOP_STEP;
objs {
name="objs";
el_typ=LayerWriter;
el_def=0;
LayerWriter @["LayerWriter_0"] {
name="LayerWriter_0";
data=$.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["InputData"]["Train_pairs"]$;
network=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
layer_data {
name="layer_data";
el_typ=LayerWriterEl;
el_def=0;
LayerWriterEl @[0] {
col_name="Input";
net_target=LAYER;
layer_name="Input";
offset {x=0: y=0: };
use_layer_type=1;
quiet=0;
na_by_range=0;
ext_flags=EXT;
noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
};
LayerWriterEl @[1] {
col_name="EC_out";
net_target=LAYER;
layer_name="EC_out";
offset {x=0: y=0: };
use_layer_type=1;
quiet=0;
na_by_range=0;
ext_flags=TARG;
noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
};
LayerWriterEl @[2] {
col_name="Name";
net_target=TRIAL_NAME;
layer_name="Name";
offset {x=0: y=0: };
use_layer_type=1;
quiet=0;
na_by_range=0;
ext_flags=0;
noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
};
};
};
};
types {
name="types";
el_typ=DynEnumType;
el_def=0;
};
args {
name="args";
el_typ=ProgVar;
el_def=0;
ProgVar @["network"] {
name="network";
var_type=T_Object;
object_type=Network;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="network to apply inputs to -- typically set by calling program";
init_from=NULL;
};
ProgVar @["input_data"] {
name="input_data";
var_type=T_Object;
object_type=DataTable;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["InputData"]["Train_pairs"]$;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="input datatable containing input/output patterns";
init_from=NULL;
};
};
vars {
name="vars";
el_typ=ProgVar;
el_def=0;
ProgVar @["LayerWriter_0"] {
name="LayerWriter_0";
var_type=T_Object;
object_type=LayerWriter;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["ApplyInputs"].objs["LayerWriter_0"]$$;
objs_ptr=1;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
init_from=NULL;
};
};
functions {
name="functions";
el_typ=Function;
el_def=0;
};
init_code {
name="init_code";
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="sets the datatable and network for the layer writer, so it knows what to write to";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["LayerWriter_0"]$$;
method=LayerWriter::SetDataNetwork;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=DataTable_ptr;
type="DataTable*";
name="db";
required=1;
def_val=;
expr {
expr="input_data";
};
};
ProgArg @[1] {
arg_type=Network_ptr;
type="Network*";
name="net";
required=1;
def_val=;
expr {
expr="network";
};
};
};
};
MethodCall @[1] {
desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["LayerWriter_0"]$;
method=taList_impl::CheckConfig;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="quiet";
required=0;
def_val="false";
expr {
expr="false";
};
};
};
};
};
prog_code {
name="prog_code";
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="sets the datatable and network for the layer writer, so it knows what to write to";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["LayerWriter_0"]$;
method=LayerWriter::SetDataNetwork;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=DataTable_ptr;
type="DataTable*";
name="db";
required=1;
def_val=;
expr {
expr="input_data";
};
};
ProgArg @[1] {
arg_type=Network_ptr;
type="Network*";
name="net";
required=1;
def_val=;
expr {
expr="network";
};
};
};
};
MethodCall @[1] {
desc="apply inputs to the network!  layer writer has all the key specs";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["LayerWriter_0"]$;
method=LayerWriter::ApplyInputData;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
step_prog=NULL;
step_n=1;
};
Program @["LeabraTrialMonitor"] {
name="LeabraTrialMonitor";
short_nm="TrlMon";
tags="Leabra, Std, Monitor";
desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
flags=NO_STOP_STEP;
objs {
name="objs";
el_typ=NetMonitor;
el_def=0;
NetMonitor @["trial_netmon"] {
name="trial_netmon";
items {
name="items";
el_typ=NetMonItem;
el_def=0;
NetMonItem @["batch"] {
name="batch";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="batch";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["epoch"] {
name="epoch";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="epoch";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["trial"] {
name="trial";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="trial";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["trial_name"] {
name="trial_name";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="trial_name";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["group_name"] {
name="group_name";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="group_name";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["phase_no"] {
name="phase_no";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="phase_no";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["minus_cycles"] {
name="minus_cycles";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="minus_cycles";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["sse"] {
name="sse";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="sse";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["ext_rew"] {
name="ext_rew";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="ext_rew";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["avg_act"] {
name="avg_act";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="acts.avg";
var_label="avg_act";
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 2 0=0;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
};
network=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
data=$.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["OutputData"]["TrialOutputData"]$;
rmv_orphan_cols=1;
};
};
types {
name="types";
el_typ=DynEnumType;
el_def=0;
};
args {
name="args";
el_typ=ProgVar;
el_def=0;
ProgVar @["network"] {
name="network";
var_type=T_Object;
object_type=Network;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="network to record data from";
init_from=NULL;
};
};
vars {
name="vars";
el_typ=ProgVar;
el_def=0;
ProgVar @["trial_mon_data"] {
name="trial_mon_data";
var_type=T_Object;
object_type=DataTable;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["OutputData"]["TrialOutputData"]$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="data table to record trial-level data to (this program writes new data to this table!)";
init_from=NULL;
};
ProgVar @["trial_netmon"] {
name="trial_netmon";
var_type=T_Object;
object_type=NetMonitor;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$$;
objs_ptr=1;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
init_from=NULL;
};
};
functions {
name="functions";
el_typ=Function;
el_def=0;
};
init_code {
name="init_code";
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="set the network and datatable for the NetMonitor";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$$;
method=NetMonitor::SetDataNetwork;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=DataTable_ptr;
type="DataTable*";
name="dt";
required=1;
def_val=;
expr {
expr="trial_mon_data";
};
};
ProgArg @[1] {
arg_type=Network_ptr;
type="Network*";
name="net";
required=1;
def_val=;
expr {
expr="network";
};
};
};
};
MethodCall @[1] {
desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
method=taBase::CheckConfig;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="quiet";
required=0;
def_val="false";
expr {
expr="false";
};
};
};
};
MethodCall @[2] {
desc="update the monitor items and data schema based on current settings of the NetMonitor object";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
method=NetMonitor::UpdateMonitors;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="reset_first";
required=0;
def_val="false";
expr {
expr="true";
};
};
};
};
};
prog_code {
name="prog_code";
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="add a new blank row to the data";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_mon_data"]$$;
method=DataTable::AddBlankRow;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[1] {
desc="get the new monitor data from the network and other sources -- this does the main work";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
method=NetMonitor::GetMonVals;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[2] {
desc="update views and other things after writing new data to monitor data table";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_mon_data"]$;
method=DataTable::WriteClose;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[3] {
desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].args["network"]$$;
method=Network::DMem_ShareTrialData;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=DataTable_ptr;
type="DataTable*";
name="dt";
required=1;
def_val=;
expr {
expr="trial_mon_data";
};
};
ProgArg @[1] {
arg_type=int;
type="int";
name="n_rows";
required=0;
def_val="1";
expr {
expr="1";
};
};
};
};
};
step_prog=NULL;
step_n=1;
};
Program @["LeabraEpochMonitor"] {
name="LeabraEpochMonitor";
short_nm="EpcMon";
tags="Leabra, Std, Monitor";
desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
flags=NO_STOP_STEP;
objs {
name="objs";
el_typ=NetMonitor;
el_def=0;
NetMonitor @["epoch_netmon"] {
name="epoch_netmon";
items {
name="items";
el_typ=NetMonItem;
el_def=0;
NetMonItem @["batch"] {
name="batch";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="batch";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["epoch"] {
name="epoch";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="epoch";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["avg_sse"] {
name="avg_sse";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="avg_sse";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["cnt_err"] {
name="cnt_err";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="cnt_err";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["avg_ext_rew"] {
name="avg_ext_rew";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="avg_ext_rew";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["avg_cycles"] {
name="avg_cycles";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="avg_cycles";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["epoch_time_tot"] {
name="epoch_time_tot";
computed=1;
object_type=NULL;
object=NULL;
variable="act";
var_label=;
name_style=MY_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["epoch_time_usr"] {
name="epoch_time_usr";
computed=1;
object_type=NULL;
object=NULL;
variable="act";
var_label=;
name_style=MY_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
};
network=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
data=.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["OutputData"]["EpochOutputData"]$$;
rmv_orphan_cols=1;
};
};
types {
name="types";
el_typ=DynEnumType;
el_def=0;
};
args {
name="args";
el_typ=ProgVar;
el_def=0;
ProgVar @["network"] {
name="network";
var_type=T_Object;
object_type=Network;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="network to get data from";
init_from=NULL;
};
};
vars {
name="vars";
el_typ=ProgVar;
el_def=0;
ProgVar @["epoch_mon_data"] {
name="epoch_mon_data";
var_type=T_Object;
object_type=DataTable;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["OutputData"]["EpochOutputData"]$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="data table to write the epoch data to";
init_from=NULL;
};
ProgVar @["epoch_netmon"] {
name="epoch_netmon";
var_type=T_Object;
object_type=NetMonitor;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$$;
objs_ptr=1;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="network monitor object that contains full specs for what to record and where to get it";
init_from=NULL;
};
ProgVar @["epoch_timer"] {
name="epoch_timer";
var_type=T_Object;
object_type=TimeUsed;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].epoch_time$;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
init_from=NULL;
};
};
functions {
name="functions";
el_typ=Function;
el_def=0;
};
init_code {
name="init_code";
el_typ=ProgCode;
el_def=0;
AssignExpr @[0] {
desc="get the epoch timer from current network";
flags=0;
orig_prog_code=;
result_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_timer"]$$;
expr {
expr="network.epoch_time";
};
};
MethodCall @[1] {
desc="set data and network on NetMonitor object";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$$;
method=NetMonitor::SetDataNetwork;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=DataTable_ptr;
type="DataTable*";
name="dt";
required=1;
def_val=;
expr {
expr="epoch_mon_data";
};
};
ProgArg @[1] {
arg_type=Network_ptr;
type="Network*";
name="net";
required=1;
def_val=;
expr {
expr="network";
};
};
};
};
MethodCall @[2] {
desc="check configuration and emit errors/warnings for problems";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
method=taBase::CheckConfig;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="quiet";
required=0;
def_val="false";
expr {
expr="false";
};
};
};
};
MethodCall @[3] {
desc="update the monitor items and data schema based on current settings of NetMonitor";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
method=NetMonitor::UpdateMonitors;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="reset_first";
required=0;
def_val="false";
expr {
expr="true";
};
};
};
};
};
prog_code {
name="prog_code";
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="add a new blank row to the data";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$$;
method=DataTable::AddBlankRow;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[1] {
desc="get the new monitor data and stor it into the data table -- this does the main job here";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
method=NetMonitor::GetMonVals;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
AssignExpr @[2] {
desc="get the epoch timer from current network";
flags=0;
orig_prog_code=;
result_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_timer"]$;
expr {
expr="network.epoch_time";
};
};
MethodCall @[3] {
desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
method=DataTable::SetValColName;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=const_Variant_ref;
type="Variant&";
name="val";
required=1;
def_val=;
expr {
expr="epoch_timer.used.GetTotSecs()";
};
};
ProgArg @[1] {
arg_type=const_taString_ref;
type="taString&";
name="col_name";
required=1;
def_val="\"\"";
expr {
expr="\"epoch_time_tot\"";
};
};
ProgArg @[2] {
arg_type=int;
type="int";
name="row";
required=1;
def_val=;
expr {
expr="-1";
};
};
ProgArg @[3] {
arg_type=bool;
type="bool";
name="quiet";
required=0;
def_val="false";
expr {
expr=;
};
};
};
};
MethodCall @[4] {
desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
method=DataTable::SetValColName;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=const_Variant_ref;
type="Variant&";
name="val";
required=1;
def_val=;
expr {
expr="epoch_timer.used.GetUsrSecs()";
};
};
ProgArg @[1] {
arg_type=const_taString_ref;
type="taString&";
name="col_name";
required=1;
def_val="\"\"";
expr {
expr="\"epoch_time_usr\"";
};
};
ProgArg @[2] {
arg_type=int;
type="int";
name="row";
required=1;
def_val=;
expr {
expr="-1";
};
};
ProgArg @[3] {
arg_type=bool;
type="bool";
name="quiet";
required=0;
def_val="false";
expr {
expr=;
};
};
};
};
MethodCall @[5] {
desc="update after writing new data to monitor data table";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
method=DataTable::WriteClose;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
step_prog=NULL;
step_n=1;
};
Program @["SaveWeights"] {
name="SaveWeights";
short_nm="SvWts";
tags="Network, Weights";
desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
flags=NO_STOP_STEP;
objs {
name="objs";
el_typ=taNBase;
el_def=0;
};
types {
name="types";
el_typ=DynEnumType;
el_def=0;
};
args {
name="args";
el_typ=ProgVar;
el_def=0;
ProgVar @["network"] {
name="network";
var_type=T_Object;
object_type=Network;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
};
vars {
name="vars";
el_typ=ProgVar;
el_def=0;
ProgVar @["tag"] {
name="tag";
var_type=T_String;
string_val=;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
reference=0;
desc="user-provided tag (startup script will set this!)";
init_from=NULL;
};
ProgVar @["wts_subdir"] {
name="wts_subdir";
var_type=T_String;
string_val=;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
reference=0;
desc="user-provided subdirectory to save weights in";
init_from=NULL;
};
ProgVar @["fname"] {
name="fname";
var_type=T_String;
string_val=;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="final generated file name -- do not edit!";
init_from=NULL;
};
ProgVar @["epoch_str"] {
name="epoch_str";
var_type=T_String;
string_val="0036";
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="string rep of epoch with leading zeros";
init_from=NULL;
};
ProgVar @["batch_str"] {
name="batch_str";
var_type=T_String;
string_val="03";
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="string rep of batch with leading zeros";
init_from=NULL;
};
ProgVar @["final_tag"] {
name="final_tag";
var_type=T_String;
string_val=".03_0036";
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="batch + epoch";
init_from=NULL;
};
};
functions {
name="functions";
el_typ=Function;
el_def=0;
};
init_code {
name="init_code";
el_typ=ProgCode;
el_def=0;
};
prog_code {
name="prog_code";
el_typ=ProgCode;
el_def=0;
IfReturn @[0] {
desc="do not save if not the first dmem process (only relevant for dmem = distributed memory processing)";
flags=0;
orig_prog_code=;
cond {
expr="taMisc::dmem_proc > 0";
};
};
MiscCall @[1] {
desc="get current batch counter for file name, with leading zeros to length 3";
flags=0;
orig_prog_code=;
result_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["batch_str"]$$;
object_type=taMisc;
method=taMisc::LeadingZeros;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=int;
type="int";
name="num";
required=1;
def_val=;
expr {
expr="network.batch";
};
};
ProgArg @[1] {
arg_type=int;
type="int";
name="len";
required=1;
def_val=;
expr {
expr="2";
};
};
};
};
MiscCall @[2] {
desc="get current epoch counter with leading zeros to length 4";
flags=0;
orig_prog_code=;
result_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["epoch_str"]$$;
object_type=taMisc;
method=taMisc::LeadingZeros;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=int;
type="int";
name="num";
required=1;
def_val=;
expr {
expr="network.epoch";
};
};
ProgArg @[1] {
arg_type=int;
type="int";
name="len";
required=1;
def_val=;
expr {
expr="4";
};
};
};
};
AssignExpr @[3] {
desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
flags=0;
orig_prog_code=;
result_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["final_tag"]$$;
expr {
expr="tag + \".\" + batch_str + \"_\" + epoch_str";
};
};
MethodCall @[4] {
desc="get a file name based on the project's current file name, for saving the weights";
flags=0;
orig_prog_code=;
result_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["fname"]$$;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["SaveWeights"].args["network"]$$;
method=taBase::GetFileNameFmProject;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=const_taString_ref;
type="taString&";
name="ext";
required=1;
def_val=;
expr {
expr="\".wts.gz\"";
};
};
ProgArg @[1] {
arg_type=const_taString_ref;
type="taString&";
name="tag";
required=0;
def_val="\"\"";
expr {
expr="final_tag";
};
};
ProgArg @[2] {
arg_type=const_taString_ref;
type="taString&";
name="subdir";
required=0;
def_val="\"\"";
expr {
expr="wts_subdir";
};
};
ProgArg @[3] {
arg_type=bool;
type="bool";
name="dmem_proc_no";
required=0;
def_val="false";
expr {
expr="false";
};
};
};
};
MethodCall @[5] {
desc="save the weights to that file name";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Std"]["SaveWeights"].args["network"]$;
method=Network::SaveWeights;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=const_taString_ref;
type="taString&";
name="fname";
required=0;
def_val="\"\"";
expr {
expr="fname";
};
};
ProgArg @[1] {
arg_type=Network::WtSaveFormat;
type="Network::WtSaveFormat";
name="fmt";
required=0;
def_val="Network::NET_FMT";
expr {
expr="Network::NET_FMT";
};
};
};
};
};
step_prog=NULL;
step_n=1;
};
};
Program_Group @.gp["LeabraAll_Test"] {
name="LeabraAll_Test";
el_typ=Program;
el_def=0;
tags="Leabra, Std, All, Test";
desc="The full set of programs for testing a standard Leabra network (starting with Epoch)";
Program @["LeabraEpochTest"] {
name="LeabraEpochTest";
short_nm="EpcTst";
tags="Leabra, Std, Test";
desc="sets testing flag, iterates over all of the items in a data table and calls LeabraTestTrial process on them";
flags=NO_STOP_STEP;
objs {
name="objs";
el_typ=taNBase;
el_def=0;
};
types {
name="types";
el_typ=DynEnumType;
el_def=0;
};
args {
name="args";
el_typ=ProgVar;
el_def=0;
ProgVar @["network"] {
name="network";
var_type=T_Object;
object_type=LeabraNetwork;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="network to operate on";
init_from=NULL;
};
ProgVar @["input_data"] {
name="input_data";
var_type=T_Object;
object_type=DataTable;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["InputData"]["Test_pairs"]$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="table of patterns to present to the network, one row at a time";
init_from=NULL;
};
ProgVar @["cycle_stop"] {
name="cycle_stop";
var_type=T_Int;
int_val=80;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
};
vars {
name="vars";
el_typ=ProgVar;
el_def=0;
ProgVar @["data_loop_order"] {
name="data_loop_order";
var_type=T_HardEnum;
int_val=0;
hard_enum_type=DataLoop::Order;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
init_from=NULL;
};
ProgVar @["trial"] {
name="trial";
var_type=T_Int;
int_val=7;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="current trial (event) within the epoch -- increments automatically";
init_from=NULL;
};
ProgVar @["low_inhib_test"] {
name="low_inhib_test";
var_type=T_Bool;
bool_val=0;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
ProgVar @["trial_mon_data"] {
name="trial_mon_data";
var_type=T_Object;
object_type=DataTable;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["OutputData"]["TrialTestOutputData"]$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
init_from=NULL;
};
ProgVar @["last_trial_mon"] {
name="last_trial_mon";
var_type=T_Object;
object_type=DataTable;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["OutputData"]["LastTestOutputData"]$$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
init_from=NULL;
};
ProgVar @["epoch_timer"] {
name="epoch_timer";
var_type=T_Object;
object_type=TimeUsed;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].epoch_time$;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
init_from=NULL;
};
ProgVar @["data_loop_index"] {
name="data_loop_index";
var_type=T_Int;
int_val=8;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
init_from=NULL;
};
ProgVar @["ec_out_pairs"] {
name="ec_out_pairs";
var_type=T_Object;
object_type=ECoutLayerSpec;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["EC_out"]$$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
ProgVar @["ec_in_pairs"] {
name="ec_in_pairs";
var_type=T_Object;
object_type=ECinLayerSpec;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["EC_out"].children["EC_in"]$$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
};
functions {
name="functions";
el_typ=Function;
el_def=0;
};
init_code {
name="init_code";
el_typ=ProgCode;
el_def=0;
NetCounterInit @[0] {
desc="initialize trial counter (local variable and in the network)";
flags=0;
orig_prog_code=;
network_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$$;
local_ctr_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial"]$$;
counter=Network::trial;
update_after=0;
};
AssignExpr @[1] {
desc="get pointer to epoch timer object on network";
flags=0;
orig_prog_code=;
result_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$$;
expr {
expr="network.epoch_time";
};
};
};
prog_code {
name="prog_code";
el_typ=ProgCode;
el_def=0;
NetCounterInit @[0] {
desc="initialize trial counter (local variable and in the network)";
flags=0;
orig_prog_code=;
network_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
local_ctr_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial"]$;
counter=Network::trial;
update_after=0;
};
MemberAssign @[1] {
desc="set to testing mode";
flags=NEW_EL;
orig_prog_code=;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
path="train_mode";
expr {
expr="Network::TEST";
};
update_after=0;
};
AssignExpr @[2] {
desc="get pointer to epoch timer object on network";
flags=0;
orig_prog_code=;
result_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
expr {
expr="network.epoch_time";
};
};
MethodCall @[3] {
desc="start the epoch timer to record computation time per epoch";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
method=TimeUsed::StartTimer;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="reset_used";
required=0;
def_val="true";
expr {
expr="true";
};
};
};
};
MethodCall @[4] {
desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["last_trial_mon"]$$;
method=DataTable::Copy_NoData;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=const_DataTable_ref;
type="DataTable&";
name="cp";
required=1;
def_val=;
expr {
expr="trial_mon_data";
};
};
};
};
NetDataLoop @[5] {
desc="iterates over the events/rows of input_data, according to data_loop_order variable";
flags=0;
orig_prog_code=;
loop_code {
name=;
el_typ=ProgCode;
el_def=0;
ProgramCall @[0] {
desc="run the trial program, passing network and input_data";
flags=0;
orig_prog_code=;
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=LeabraNetwork;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
ProgArg @[1] {
arg_type=DataTable;
type="DataTable*";
name="input_data";
required=1;
def_val=;
expr {
expr="input_data";
};
};
ProgArg @[2] {
arg_type=int;
type="int";
name="cycle_stop";
required=1;
def_val=;
expr {
expr="cycle_stop";
};
};
};
target=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"]$$;
targ_ld_init="*LeabraTrial*";
};
};
data_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["input_data"]$$;
index_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["data_loop_index"]$$;
order_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["data_loop_order"]$$;
order=SEQUENTIAL;
update_after=0;
dmem_nprocs=1;
dmem_this_proc=0;
grouped=0;
group_col 9 0="Group";
group_index_var=NULL;
group_order_var=NULL;
group_order=PERMUTED;
group_idx_list{ };
};
If @[6] {
desc="if full batch mode, update only at end of epoch";
flags=0;
orig_prog_code=;
cond {
expr="network.wt_update == Network::BATCH";
};
true_code {
name=;
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="final update of weights based on accumulated changes";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
method=Network::Compute_Weights;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
};
MethodCall @[7] {
desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
method=LeabraNetwork::Compute_EpochStats;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[8] {
desc=;
flags=NON_STD;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
method=LeabraNetwork::Compute_AvgAbsRelNetin;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[9] {
desc="done with the computation in the epoch -- record time it took";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
method=TimeUsed::EndTimer;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
ProgramCall @[10] {
desc="run program that records data from network and possibly other sources about the epoch";
flags=0;
orig_prog_code=;
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=Network;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
};
target=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"]$$;
targ_ld_init="*LeabraEpochMonitor*";
};
MemberAssign @[11] {
desc="set back to training mode";
flags=NEW_EL;
orig_prog_code=;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
path="train_mode";
expr {
expr="Network::TRAIN";
};
update_after=0;
};
};
step_prog=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"]$;
step_n=1;
};
Program @["LeabraTrialTest"] {
name="LeabraTrialTest";
short_nm="TrlTst";
tags="Leabra, Std";
desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
flags=0;
objs {
name="objs";
el_typ=taNBase;
el_def=0;
};
types {
name="types";
el_typ=DynEnumType;
el_def=0;
};
args {
name="args";
el_typ=ProgVar;
el_def=0;
ProgVar @["network"] {
name="network";
var_type=T_Object;
object_type=LeabraNetwork;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="network to operate on -- typically set by higher-level calling programs";
init_from=NULL;
};
ProgVar @["input_data"] {
name="input_data";
var_type=T_Object;
object_type=DataTable;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["InputData"]["Test_pairs"]$;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="datatable containing training input/output patterns";
init_from=NULL;
};
ProgVar @["cycle_stop"] {
name="cycle_stop";
var_type=T_Int;
int_val=80;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
};
vars {
name="vars";
el_typ=ProgVar;
el_def=0;
ProgVar @["phase_no"] {
name="phase_no";
var_type=T_Int;
int_val=1;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
init_from=NULL;
};
ProgVar @["update_net_view"] {
name="update_net_view";
var_type=T_Bool;
bool_val=0;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="determines whether to update any network view displays after trial is completed";
init_from=NULL;
};
};
functions {
name="functions";
el_typ=Function;
el_def=0;
};
init_code {
name="init_code";
el_typ=ProgCode;
el_def=0;
NetCounterInit @[0] {
desc="initialize the local phase_no counter, and corresponding network one";
flags=0;
orig_prog_code=;
network_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$$;
local_ctr_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].vars["phase_no"]$$;
counter=LeabraNetwork::phase_no;
update_after=0;
};
};
prog_code {
name="prog_code";
el_typ=ProgCode;
el_def=0;
NetCounterInit @[0] {
desc="initialize the local phase_no counter, and corresponding network one";
flags=0;
orig_prog_code=;
network_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
local_ctr_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].vars["phase_no"]$;
counter=LeabraNetwork::phase_no;
update_after=1;
};
MethodCall @[1] {
desc="initializes various counters at start of trial";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
method=LeabraNetwork::Trial_Init;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
WhileLoop @[2] {
desc="loop over phases of settling in the network";
flags=0;
orig_prog_code=;
loop_code {
name=;
el_typ=ProgCode;
el_def=0;
ProgramCall @[0] {
desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
flags=0;
orig_prog_code=;
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=LeabraNetwork;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
ProgArg @[1] {
arg_type=DataTable;
type="DataTable*";
name="input_data";
required=1;
def_val=;
expr {
expr="input_data";
};
};
ProgArg @[2] {
arg_type=int;
type="int";
name="cyc_stop";
required=1;
def_val=;
expr {
expr="cycle_stop";
};
};
};
target=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"]$$;
targ_ld_init="*LeabraSettle*";
};
NetCounterIncr @[1] {
desc="increment the phase number (also on network)";
flags=0;
orig_prog_code=;
network_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
local_ctr_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].vars["phase_no"]$;
counter=LeabraNetwork::phase_no;
update_after=1;
};
MethodCall @[2] {
desc="increments other phase state information to prepare for the next phase of settling";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
method=LeabraNetwork::Trial_UpdatePhase;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
test {
expr="phase_no < network.phase_max";
};
};
MethodCall @[3] {
desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
method=LeabraNetwork::Trial_Final;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[4] {
desc="special for adapting netin";
flags=NON_STD;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
method=LeabraNetwork::Compute_AbsRelNetin;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
If @[5] {
desc=;
flags=0;
orig_prog_code=;
cond {
expr="network.Compute_Weights_Test(network.trial+1)";
};
true_code {
name=;
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="update the weight values based on changes computed by trial program";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
method=Network::Compute_Weights;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
};
ProgramCall @[6] {
desc="records data about the trial-level processing to a datatable for graphing/processing";
flags=0;
orig_prog_code=;
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=Network;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
};
target=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"]$$;
targ_ld_init="*LeabraTrialMonitor*";
};
NetUpdateView @[7] {
desc="update the network view(s) (only if update_net_view is true)";
flags=0;
orig_prog_code=;
network_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
update_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].vars["update_net_view"]$$;
};
};
step_prog=NULL;
step_n=1;
};
Program @["LeabraSettleTest"] {
name="LeabraSettleTest";
short_nm="SttTst";
tags="Leabra, Std";
desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
flags=NO_STOP_STEP;
objs {
name="objs";
el_typ=taNBase;
el_def=0;
};
types {
name="types";
el_typ=DynEnumType;
el_def=0;
};
args {
name="args";
el_typ=ProgVar;
el_def=0;
ProgVar @["network"] {
name="network";
var_type=T_Object;
object_type=LeabraNetwork;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
ProgVar @["input_data"] {
name="input_data";
var_type=T_Object;
object_type=DataTable;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["InputData"]["Test_pairs"]$;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
ProgVar @["cyc_stop"] {
name="cyc_stop";
var_type=T_Int;
int_val=80;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
};
vars {
name="vars";
el_typ=ProgVar;
el_def=0;
ProgVar @["cycle"] {
name="cycle";
var_type=T_Int;
int_val=80;
objs_ptr=0;
flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="current cycle of settling (local loop counter)";
init_from=NULL;
};
ProgVar @["min_cycles"] {
name="min_cycles";
var_type=T_Int;
int_val=50;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
init_from=NULL;
};
ProgVar @["update_net_view"] {
name="update_net_view";
var_type=T_Bool;
bool_val=1;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="if true, will update network views at end of settling";
init_from=NULL;
};
};
functions {
name="functions";
el_typ=Function;
el_def=0;
};
init_code {
name="init_code";
el_typ=ProgCode;
el_def=0;
NetCounterInit @[0] {
desc="initialize local cycle counter and corresponding counter on network";
flags=0;
orig_prog_code=;
network_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$$;
local_ctr_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].vars["cycle"]$$;
counter=Network::cycle;
update_after=0;
};
};
prog_code {
name="prog_code";
el_typ=ProgCode;
el_def=0;
NetCounterInit @[0] {
desc="initialize local cycle counter and corresponding counter on network";
flags=0;
orig_prog_code=;
network_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
local_ctr_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].vars["cycle"]$;
counter=Network::cycle;
update_after=0;
};
MethodCall @[1] {
desc="resets input data, before getting new external inputs data from apply inputs call";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
method=Network::Init_InputData;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
ProgramCall @[2] {
desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
flags=0;
orig_prog_code=;
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=Network;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
ProgArg @[1] {
arg_type=DataTable;
type="DataTable*";
name="input_data";
required=1;
def_val=;
expr {
expr="input_data";
};
};
};
target=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"]$$;
targ_ld_init="*ApplyInputs*";
};
MethodCall @[3] {
desc="initializes various counters at start of settling";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
method=LeabraNetwork::Settle_Init;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
If @[4] {
desc="get appropriate min_cycles value depending on which phase we're in";
flags=0;
orig_prog_code=;
cond {
expr="network.phase_no <= 1";
};
true_code {
name=;
el_typ=ProgCode;
el_def=0;
AssignExpr @[0] {
desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
flags=0;
orig_prog_code=;
result_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].vars["min_cycles"]$$;
expr {
expr="network.min_cycles";
};
};
};
};
Else @[5] {
desc=;
flags=0;
orig_prog_code=;
else_code {
name="else_code";
el_typ=ProgCode;
el_def=0;
AssignExpr @[0] {
desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
flags=0;
orig_prog_code=;
result_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].vars["min_cycles"]$;
expr {
expr="network.min_cycles_phase2";
};
};
};
};
WhileLoop @[6] {
desc="the main loop over cycles of updating";
flags=NON_STD;
orig_prog_code=;
loop_code {
name=;
el_typ=ProgCode;
el_def=0;
ProgramCall @[0] {
desc="run the cycle program, which computes one cycle of activations";
flags=0;
orig_prog_code=;
prog_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=LeabraNetwork;
type="LeabraNetwork*";
name="network";
required=1;
def_val=;
expr {
expr="network";
};
};
};
target=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"]$$;
targ_ld_init="*LeabraCycle*";
};
NetCounterIncr @[1] {
desc="increment cycle counter (also on network)";
flags=0;
orig_prog_code=;
network_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
local_ctr_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].vars["cycle"]$;
counter=Network::cycle;
update_after=0;
};
IfContinue @[2] {
desc="avoid subsequent stopping criteria if below min_cycles";
flags=0;
orig_prog_code=;
cond {
expr="cycle < min_cycles";
};
};
IfBreak @[3] {
desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
flags=0;
orig_prog_code=;
cond {
expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
};
};
};
test {
expr="cycle <  cyc_stop";
};
};
MethodCall @[7] {
desc="perform final operations at end of settling (storing final activations, etc)";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
method=LeabraNetwork::Settle_Final;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[8] {
desc="compute trial-level statistics";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
method=LeabraNetwork::Compute_TrialStats;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
If @[9] {
desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
flags=OFF;
orig_prog_code=;
cond {
expr="network.phase == LeabraNetwork::MINUS_PHASE";
};
true_code {
name=;
el_typ=ProgCode;
el_def=0;
};
};
If @[10] {
desc="this stat must be called in plus phase when reward information is avail";
flags=0;
orig_prog_code=;
cond {
expr="network.phase_no == 1";
};
true_code {
name=;
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="get external reward information";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
method=LeabraNetwork::Compute_ExtRew;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
};
NetUpdateView @[11] {
desc="update network views, if update_net_view == true";
flags=0;
orig_prog_code=;
network_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].args["network"]$;
update_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraSettleTest"].vars["update_net_view"]$$;
};
};
step_prog=NULL;
step_n=1;
};
Program @["LeabraCycleTest"] {
name="LeabraCycleTest";
short_nm="CycTst";
tags="Leabra, Std";
desc="runs one cycle of leabra processing (updating net inputs and activations)";
flags=0;
objs {
name="objs";
el_typ=taNBase;
el_def=0;
};
types {
name="types";
el_typ=DynEnumType;
el_def=0;
};
args {
name="args";
el_typ=ProgVar;
el_def=0;
ProgVar @["network"] {
name="network";
var_type=T_Object;
object_type=LeabraNetwork;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
};
vars {
name="vars";
el_typ=ProgVar;
el_def=0;
ProgVar @["update_net_view"] {
name="update_net_view";
var_type=T_Bool;
bool_val=1;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
init_from=NULL;
};
};
functions {
name="functions";
el_typ=Function;
el_def=0;
};
init_code {
name="init_code";
el_typ=ProgCode;
el_def=0;
};
prog_code {
name="prog_code";
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="this does all the standard leabra processing for one cycle of activation updating";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].args["network"]$$;
method=LeabraNetwork::Cycle_Run;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
NetUpdateView @[1] {
desc="update network views if update_net_view == true";
flags=0;
orig_prog_code=;
network_var=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].args["network"]$;
update_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].vars["update_net_view"]$$;
};
};
step_prog=NULL;
step_n=1;
};
Program @["ApplyInputsTest"] {
name="ApplyInputsTest";
short_nm="AplyIn";
tags="Network, InputData, Apply";
desc="apply the current input data to the network as external input and target values";
flags=NO_STOP_STEP;
objs {
name="objs";
el_typ=LayerWriter;
el_def=0;
LayerWriter @["LayerWriter_0"] {
name="LayerWriter_0";
data=$.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["InputData"]["Test_pairs"]$;
network=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
layer_data {
name="layer_data";
el_typ=LayerWriterEl;
el_def=0;
LayerWriterEl @[0] {
col_name="Input";
net_target=LAYER;
layer_name="Input";
offset {x=0: y=0: };
use_layer_type=1;
quiet=0;
na_by_range=0;
ext_flags=EXT;
noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
};
LayerWriterEl @[1] {
col_name="EC_out";
net_target=LAYER;
layer_name="EC_out";
offset {x=0: y=0: };
use_layer_type=1;
quiet=0;
na_by_range=0;
ext_flags=TARG;
noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
};
LayerWriterEl @[2] {
col_name="Name";
net_target=TRIAL_NAME;
layer_name="Name";
offset {x=0: y=0: };
use_layer_type=1;
quiet=0;
na_by_range=0;
ext_flags=0;
noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
};
};
};
};
types {
name="types";
el_typ=DynEnumType;
el_def=0;
};
args {
name="args";
el_typ=ProgVar;
el_def=0;
ProgVar @["network"] {
name="network";
var_type=T_Object;
object_type=Network;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="network to apply inputs to -- typically set by calling program";
init_from=NULL;
};
ProgVar @["input_data"] {
name="input_data";
var_type=T_Object;
object_type=DataTable;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["InputData"]["Test_pairs"]$;
objs_ptr=0;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="input datatable containing input/output patterns";
init_from=NULL;
};
};
vars {
name="vars";
el_typ=ProgVar;
el_def=0;
ProgVar @["LayerWriter_0"] {
name="LayerWriter_0";
var_type=T_Object;
object_type=LayerWriter;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].objs["LayerWriter_0"]$$;
objs_ptr=1;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
init_from=NULL;
};
ProgVar @["group_name"] {
name="group_name";
var_type=T_String;
string_val=;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc=;
init_from=NULL;
};
};
functions {
name="functions";
el_typ=Function;
el_def=0;
};
init_code {
name="init_code";
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="sets the datatable and network for the layer writer, so it knows what to write to";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$$;
method=LayerWriter::SetDataNetwork;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=DataTable_ptr;
type="DataTable*";
name="db";
required=1;
def_val=;
expr {
expr="input_data";
};
};
ProgArg @[1] {
arg_type=Network_ptr;
type="Network*";
name="net";
required=1;
def_val=;
expr {
expr="network";
};
};
};
};
MethodCall @[1] {
desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
method=taList_impl::CheckConfig;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="quiet";
required=0;
def_val="false";
expr {
expr="false";
};
};
};
};
};
prog_code {
name="prog_code";
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="sets the datatable and network for the layer writer, so it knows what to write to";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
method=LayerWriter::SetDataNetwork;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=DataTable_ptr;
type="DataTable*";
name="db";
required=1;
def_val=;
expr {
expr="input_data";
};
};
ProgArg @[1] {
arg_type=Network_ptr;
type="Network*";
name="net";
required=1;
def_val=;
expr {
expr="network";
};
};
};
};
MethodCall @[1] {
desc="apply inputs to the network!  layer writer has all the key specs";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
method=LayerWriter::ApplyInputData;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
AssignExpr @[2] {
desc=;
flags=0;
orig_prog_code=;
result_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["group_name"]$$;
expr {
expr="network.trial_name.before(\"_\")";
};
};
MemberAssign @[3] {
desc=;
flags=0;
orig_prog_code=;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].args["network"]$$;
path="group_name";
expr {
expr="group_name";
};
update_after=0;
};
};
step_prog=NULL;
step_n=1;
};
Program @["LeabraTrialMonitorTest"] {
name="LeabraTrialMonitorTest";
short_nm="TrlMon";
tags="Leabra, Std, Monitor";
desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
flags=NO_STOP_STEP;
objs {
name="objs";
el_typ=NetMonitor;
el_def=0;
NetMonitor @["trial_netmon"] {
name="trial_netmon";
items {
name="items";
el_typ=NetMonItem;
el_def=0;
NetMonItem @["batch"] {
name="batch";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="batch";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["epoch"] {
name="epoch";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="epoch";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["trial"] {
name="trial";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="trial";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["trial_name"] {
name="trial_name";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="trial_name";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["minus_cycles"] {
name="minus_cycles";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="minus_cycles";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["sse"] {
name="sse";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="sse";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["EC_out_act"] {
name="EC_out_act";
computed=0;
object_type=LeabraLayer;
object=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["EC_out"]$$;
variable="act";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 2 0=0;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
};
network=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
data=$.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["OutputData"]["TrialTestOutputData"]$;
rmv_orphan_cols=1;
};
};
types {
name="types";
el_typ=DynEnumType;
el_def=0;
};
args {
name="args";
el_typ=ProgVar;
el_def=0;
ProgVar @["network"] {
name="network";
var_type=T_Object;
object_type=Network;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="network to record data from";
init_from=NULL;
};
};
vars {
name="vars";
el_typ=ProgVar;
el_def=0;
ProgVar @["trial_mon_data"] {
name="trial_mon_data";
var_type=T_Object;
object_type=DataTable;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["OutputData"]["TrialTestOutputData"]$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="data table to record trial-level data to (this program writes new data to this table!)";
init_from=NULL;
};
ProgVar @["last_trial_mon_data"] {
name="last_trial_mon_data";
var_type=T_Object;
object_type=DataTable;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["OutputData"]["LastTestOutputData"]$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="just the last epoch of data";
init_from=NULL;
};
ProgVar @["trial_netmon"] {
name="trial_netmon";
var_type=T_Object;
object_type=NetMonitor;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$$;
objs_ptr=1;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
init_from=NULL;
};
};
functions {
name="functions";
el_typ=Function;
el_def=0;
};
init_code {
name="init_code";
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="set the network and datatable for the NetMonitor";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$$;
method=NetMonitor::SetDataNetwork;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=DataTable_ptr;
type="DataTable*";
name="dt";
required=1;
def_val=;
expr {
expr="trial_mon_data";
};
};
ProgArg @[1] {
arg_type=Network_ptr;
type="Network*";
name="net";
required=1;
def_val=;
expr {
expr="network";
};
};
};
};
MethodCall @[1] {
desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
method=taBase::CheckConfig;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="quiet";
required=0;
def_val="false";
expr {
expr="false";
};
};
};
};
MethodCall @[2] {
desc="update the monitor items and data schema based on current settings of the NetMonitor object";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
method=NetMonitor::UpdateMonitors;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="reset_first";
required=0;
def_val="false";
expr {
expr="true";
};
};
};
};
};
prog_code {
name="prog_code";
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="add a new blank row to the data";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_mon_data"]$$;
method=DataTable::AddBlankRow;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[1] {
desc="get the new monitor data from the network and other sources -- this does the main work";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
method=NetMonitor::GetMonVals;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[2] {
desc="update views and other things after writing new data to monitor data table";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_mon_data"]$;
method=DataTable::WriteClose;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[3] {
desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].args["network"]$$;
method=Network::DMem_ShareTrialData;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=DataTable_ptr;
type="DataTable*";
name="dt";
required=1;
def_val=;
expr {
expr="trial_mon_data";
};
};
ProgArg @[1] {
arg_type=int;
type="int";
name="n_rows";
required=0;
def_val="1";
expr {
expr="1";
};
};
};
};
AddNewDataRow @[4] {
desc=;
flags=0;
orig_prog_code=;
data_var=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["last_trial_mon_data"]$$;
};
MethodCall @[5] {
desc=;
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["last_trial_mon_data"]$;
method=DataTable::CopyFromRow;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=int;
type="int";
name="dest_row";
required=1;
def_val=;
expr {
expr="last_trial_mon_data.rows-1";
};
};
ProgArg @[1] {
arg_type=const_DataTable_ref;
type="DataTable&";
name="cp";
required=1;
def_val=;
expr {
expr="trial_mon_data";
};
};
ProgArg @[2] {
arg_type=int;
type="int";
name="src_row";
required=1;
def_val=;
expr {
expr="trial_mon_data.rows-1";
};
};
};
};
};
step_prog=NULL;
step_n=1;
};
Program @["LeabraEpochMonitorTest"] {
name="LeabraEpochMonitorTest";
short_nm="EpcMon";
tags="Leabra, Std, Monitor";
desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
flags=NO_STOP_STEP;
objs {
name="objs";
el_typ=NetMonitor;
el_def=0;
NetMonitor @["epoch_netmon"] {
name="epoch_netmon";
items {
name="items";
el_typ=NetMonItem;
el_def=0;
NetMonItem @["batch"] {
name="batch";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="batch";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
NetMonItem @["epoch"] {
name="epoch";
computed=0;
object_type=LeabraNetwork;
object=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
variable="epoch";
var_label=;
name_style=AUTO_NAME;
max_name_len=6;
val_type=VT_FLOAT;
matrix=0;
matrix_geom{ };
data_agg=0;
data_src=NULL;
agg_col {
col_name=;
};
agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
select_rows=0;
select_spec {
col_name=;
name="_EQUAL_";
on=1;
rel=EQUAL;
use_var=0;
cmp 0 1;
var=NULL;
enable_var=NULL;
};
pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
};
};
network=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
data=.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["OutputData"]["EpochTestOutputData"]$$;
rmv_orphan_cols=1;
};
};
types {
name="types";
el_typ=DynEnumType;
el_def=0;
};
args {
name="args";
el_typ=ProgVar;
el_def=0;
ProgVar @["network"] {
name="network";
var_type=T_Object;
object_type=Network;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="network to get data from";
init_from=NULL;
};
};
vars {
name="vars";
el_typ=ProgVar;
el_def=0;
ProgVar @["epoch_mon_data"] {
name="epoch_mon_data";
var_type=T_Object;
object_type=DataTable;
object_val=$.projects["Schapiro_etal_hippocampus_model_exercise"].data.gp["OutputData"]["EpochTestOutputData"]$;
objs_ptr=0;
flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="data table to write the epoch data to";
init_from=NULL;
};
ProgVar @["epoch_netmon"] {
name="epoch_netmon";
var_type=T_Object;
object_type=NetMonitor;
object_val=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$$;
objs_ptr=1;
flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
reference=0;
desc="network monitor object that contains full specs for what to record and where to get it";
init_from=NULL;
};
};
functions {
name="functions";
el_typ=Function;
el_def=0;
};
init_code {
name="init_code";
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="set data and network on NetMonitor object";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$$;
method=NetMonitor::SetDataNetwork;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=DataTable_ptr;
type="DataTable*";
name="dt";
required=1;
def_val=;
expr {
expr="epoch_mon_data";
};
};
ProgArg @[1] {
arg_type=Network_ptr;
type="Network*";
name="net";
required=1;
def_val=;
expr {
expr="network";
};
};
};
};
MethodCall @[1] {
desc="check configuration and emit errors/warnings for problems";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
method=taBase::CheckConfig;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="quiet";
required=0;
def_val="false";
expr {
expr="false";
};
};
};
};
MethodCall @[2] {
desc="update the monitor items and data schema based on current settings of NetMonitor";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
method=NetMonitor::UpdateMonitors;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
ProgArg @[0] {
arg_type=bool;
type="bool";
name="reset_first";
required=0;
def_val="false";
expr {
expr="true";
};
};
};
};
};
prog_code {
name="prog_code";
el_typ=ProgCode;
el_def=0;
MethodCall @[0] {
desc="add a new blank row to the data";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$$;
method=DataTable::AddBlankRow;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[1] {
desc="get the new monitor data and stor it into the data table -- this does the main job here";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
method=NetMonitor::GetMonVals;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
MethodCall @[2] {
desc="update after writing new data to monitor data table";
flags=0;
orig_prog_code=;
result_var=NULL;
obj=$.projects["Schapiro_etal_hippocampus_model_exercise"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$;
method=DataTable::WriteClose;
meth_args {
name=;
el_typ=ProgArg;
el_def=0;
};
};
};
step_prog=NULL;
step_n=1;
};
};
};
viewers {
name="viewers";
el_typ=MainWindowViewer;
el_def=0;
MainWindowViewer @["Browser3"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_win_lft"] {
name="view_win_lft";
value 6 0=-0.002089136512950063;
val_type_fixed=0;
};
UserDataItem @["view_win_top"] {
name="view_win_top";
value 6 0=0.001138952211476862;
val_type_fixed=0;
};
UserDataItem @["view_win_wd"] {
name="view_win_wd";
value 6 0=0.9909470677375793;
val_type_fixed=0;
};
UserDataItem @["view_win_ht"] {
name="view_win_ht";
value 6 0=0.7995443940162659;
val_type_fixed=0;
};
UserDataItem @["view_win_iconified"] {
name="view_win_iconified";
value 1 0=0;
val_type_fixed=0;
};
UserDataItem @["view_splitter_state"] {
name="view_splitter_state";
value 9 0="AAAA/wAAAAEAAAADAAABPgAAAcsAAAItAQAAAAYBAAAAAQE=";
val_type_fixed=0;
};
};
name="Browser3";
m_data=.projects["Schapiro_etal_hippocampus_model_exercise"]$$;
visible=1;
win_name=".projects[\"Schapiro_etal_hippocampus_model_exercise\"] - Schapiro_etal_hippocampus_model_exercise.proj";
m_is_root=0;
m_is_viewer_xor_browser=0;
m_is_proj_viewer=1;
m_is_dialog=0;
toolbars {
name="toolbars";
el_typ=ToolBar;
el_def=0;
ToolBar @["Application"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_win_visible"] {
name="view_win_visible";
value 1 0=0;
val_type_fixed=0;
};
};
name="Application";
m_data=NULL;
visible=0;
lft=0;
top=0;
o=Horizontal;
};
};
frames {
name="frames";
el_typ=BrowseViewerTaBase;
el_def=0;
BrowseViewerTaBase @["Tree"] {
name="Tree";
m_data=NULL;
visible=1;
root_typ=LeabraProject;
root_md=NULL;
m_root=$.projects["Schapiro_etal_hippocampus_model_exercise"]$;
};
PanelViewer @["Panels"] {
name="Panels";
m_data=NULL;
visible=1;
};
T3PanelViewer @["T3Frames"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_117";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_panel_selected"] {
name="view_panel_selected";
value 1 0=1;
val_type_fixed=0;
};
};
name="T3Frames";
m_data=NULL;
visible=1;
panels {
name="panels";
el_typ=T3Panel;
el_def=0;
T3Panel @["SLnet_pairs"] {
name="SLnet_pairs";
m_data=NULL;
visible=1;
root_view {
name="root_view";
m_data=NULL;
m_transform=NULL;
children {
name="children";
el_typ=T3DataViewMain;
el_def=0;
NetView @["SLnet_pairs_View"] {
name="SLnet_pairs_View";
m_data=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"]$;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
annotations {
name="annotations";
el_typ=T3Annotation;
el_def=0;
};
annote_children {
name="annote_children";
el_typ=T3DataView;
el_def=0;
};
display=1;
lay_layout=THREE_D;
lay_mv=1;
net_text=1;
show_iconified=0;
net_text_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=1: y=0: z=0: rot=1.570796: }: translate={x=1: y=0: z=-0.5: }: };
net_text_rot=-90;
cur_unit_vals{ act;};
unit_src_path=".layers.gp[0][4].units[64]";
con_type=ANY_CON;
hist_idx=0;
hist_save=1;
hist_max=100;
hist_ff=5;
unit_disp_mode=UDM_BLOCK;
unit_text_disp=UTD_NONE;
max_size {x=27: y=20: z=2.333333: };
max_size2d {x=30: y=193: z=1: };
eff_max_size {x=27: y=20: z=2.333333: };
font_sizes {
net_name=0.05;
net_vals=0.05;
layer=0.04;
layer_min=0.01;
layer_vals=0.03;
prjn=0.01;
unit=0.02;
un_nm_len=3;
};
view_params {
xy_square=0;
unit_spacing=0.05;
prjn_disp=L_R_B;
prjn_name=0;
prjn_width=0.002;
prjn_trans=0.5;
lay_trans=0.5;
unit_trans=0.6;
laygp_width=1;
show_laygp=0;
};
wt_line_disp=0;
wt_line_width=4;
wt_line_thr=0.8;
wt_line_swt=0;
wt_prjn_k_un=4;
wt_prjn_k_gp=1;
wt_prjn_lay=NULL;
snap_bord_disp=0;
snap_bord_width=4;
scale {
name="scale";
chunks=133;
min=-1;
max=1;
range=1;
zero=0;
spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
auto_scale=0;
};
scale_ranges {
name="scale_ranges";
el_typ=ScaleRange;
el_def=0;
ScaleRange @[0] {
var_name="act";
auto_scale=0;
min=-1;
max=1;
};
ScaleRange @[1] {
var_name="s.wt";
auto_scale=0;
min=-1;
max=1;
};
ScaleRange @[2] {
var_name="r.wt";
auto_scale=0;
min=-1;
max=1;
};
ScaleRange @[3] {
var_name="ext";
auto_scale=0;
min=-1;
max=1;
};
ScaleRange @[4] {
var_name="net";
auto_scale=0;
min=-1;
max=1;
};
ScaleRange @[5] {
var_name="targ";
auto_scale=0;
min=-1;
max=1;
};
ScaleRange @[6] {
var_name="bias.wt";
auto_scale=0;
min=-1;
max=1;
};
ScaleRange @[7] {
var_name="act_nd";
auto_scale=0;
min=-1;
max=1;
};
ScaleRange @[8] {
var_name="bias.pdw";
auto_scale=0;
min=-1;
max=1;
};
ScaleRange @[9] {
var_name="r.pdw";
auto_scale=0;
min=-1;
max=1;
};
};
lay_disp_modes{ Input=-1;EC_in=-1;EC_out=-1;DG=-1;CA3=-1;CA1=-1;};
};
};
};
bg_color {r=1: g=1: b=1: a=1: };
text_color {r=0: g=0: b=0: a=1: };
headlight_on=1;
stereo_view=STEREO_NONE;
saved_views {
name="saved_views";
el_typ=T3SavedView;
el_def=0;
T3SavedView @["Vw_0"] {
name="Vw_0";
view_saved=1;
pos {x=0.7623032: y=0.5417882: z=1.881275: };
orient {x=0: y=0: z=1: rot=0: };
focal_dist=2.213563;
};
T3SavedView @["Vw_1"] {
name="Vw_1";
view_saved=0;
pos {x=0: y=0: z=0: };
orient {x=0: y=0: z=1: rot=0: };
focal_dist=0;
};
T3SavedView @["Vw_2"] {
name="Vw_2";
view_saved=0;
pos {x=0: y=0: z=0: };
orient {x=0: y=0: z=1: rot=0: };
focal_dist=0;
};
T3SavedView @["Vw_3"] {
name="Vw_3";
view_saved=0;
pos {x=0: y=0: z=0: };
orient {x=0: y=0: z=1: rot=0: };
focal_dist=0;
};
T3SavedView @["Vw_4"] {
name="Vw_4";
view_saved=0;
pos {x=0: y=0: z=0: };
orient {x=0: y=0: z=1: rot=0: };
focal_dist=0;
};
T3SavedView @["Vw_5"] {
name="Vw_5";
view_saved=0;
pos {x=0: y=0: z=0: };
orient {x=0: y=0: z=1: rot=0: };
focal_dist=0;
};
T3SavedView @["Vw_6"] {
name="Vw_6";
view_saved=0;
pos {x=0: y=0: z=0: };
orient {x=0: y=0: z=1: rot=0: };
focal_dist=0;
};
T3SavedView @["Vw_7"] {
name="Vw_7";
view_saved=0;
pos {x=0: y=0: z=0: };
orient {x=0: y=0: z=1: rot=0: };
focal_dist=0;
};
T3SavedView @["Vw_8"] {
name="Vw_8";
view_saved=0;
pos {x=0: y=0: z=0: };
orient {x=0: y=0: z=1: rot=0: };
focal_dist=0;
};
T3SavedView @["Vw_9"] {
name="Vw_9";
view_saved=0;
pos {x=0: y=0: z=0: };
orient {x=0: y=0: z=1: rot=0: };
focal_dist=0;
};
};
};
};
};
};
docks {
name="docks";
el_typ=ToolBoxDockViewer;
el_def=0;
ToolBoxDockViewer @["Tools"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["view_win_lft"] {
name="view_win_lft";
value 6 0=-0.002785515272989869;
val_type_fixed=0;
};
UserDataItem @["view_win_top"] {
name="view_win_top";
value 6 0=-0.02505694702267647;
val_type_fixed=0;
};
UserDataItem @["view_win_wd"] {
name="view_win_wd";
value 6 0=0.05292478948831558;
val_type_fixed=0;
};
UserDataItem @["view_win_ht"] {
name="view_win_ht";
value 6 0=0.751708447933197;
val_type_fixed=0;
};
UserDataItem @["view_win_iconified"] {
name="view_win_iconified";
value 1 0=0;
val_type_fixed=0;
};
UserDataItem @["view_visible"] {
name="view_visible";
value 1 0=1;
val_type_fixed=0;
};
};
name="Tools";
m_data=NULL;
visible=1;
win_name=;
dock_flags=DV_MOVABLE|DV_FLOATABLE;
dock_area=1;
};
};
};
};
save_view=1;
save_as_only=0;
auto_name=1;
last_change_desc=;
networks {
name="networks";
el_typ=LeabraNetwork;
el_def=0;
LeabraNetwork @["SLnet_pairs"] {
UserDataItem_List @*(.user_data_) {
name=;
el_typ=UserDataItem;
el_def=0;
UserDataItem @["trial_cos_diff"] {
name="trial_cos_diff";
value 1 0=1;
val_type_fixed=1;
};
UserDataItem @["avg_act_diff"] {
name="avg_act_diff";
value 1 0=1;
val_type_fixed=1;
};
UserDataItem @["cos_diff"] {
name="cos_diff";
value 1 0=1;
val_type_fixed=1;
};
UserDataItem @["cos_err"] {
name="cos_err";
value 1 0=1;
val_type_fixed=1;
};
UserDataItem @["norm_err"] {
name="norm_err";
value 1 0=0;
val_type_fixed=1;
};
UserDataItem @["ext_rew"] {
name="ext_rew";
value 1 0=0;
val_type_fixed=1;
};
UserDataItem @["maxda"] {
name="maxda";
value 1 0=0;
val_type_fixed=1;
};
UserDataItem @["minus_output_name"] {
name="minus_output_name";
value 1 0=0;
val_type_fixed=1;
};
UserDataItem @["minus_cycles"] {
name="minus_cycles";
value 1 0=1;
val_type_fixed=1;
};
UserDataItem @["ct_cycle"] {
name="ct_cycle";
value 1 0=1;
val_type_fixed=1;
};
UserDataItem @["phase_no"] {
name="phase_no";
value 1 0=0;
val_type_fixed=1;
};
UserDataItem @["phase"] {
name="phase";
value 1 0=0;
val_type_fixed=1;
};
UserDataItem @["sse"] {
name="sse";
value 1 0=0;
val_type_fixed=1;
};
UserDataItem @["output_name"] {
name="output_name";
value 1 0=0;
val_type_fixed=1;
};
UserDataItem @["trial_name"] {
name="trial_name";
value 1 0=1;
val_type_fixed=1;
};
UserDataItem @["group_name"] {
name="group_name";
value 1 0=0;
val_type_fixed=1;
};
UserDataItem @["time"] {
name="time";
value 1 0=0;
val_type_fixed=1;
};
UserDataItem @["cycle"] {
name="cycle";
value 1 0=0;
val_type_fixed=1;
};
UserDataItem @["tick"] {
name="tick";
value 1 0=0;
val_type_fixed=1;
};
UserDataItem @["trial"] {
name="trial";
value 1 0=1;
val_type_fixed=1;
};
UserDataItem @["group"] {
name="group";
value 1 0=0;
val_type_fixed=1;
};
UserDataItem @["epoch"] {
name="epoch";
value 1 0=1;
val_type_fixed=1;
};
UserDataItem @["batch"] {
name="batch";
value 1 0=0;
val_type_fixed=1;
};
};
name="SLnet_pairs";
desc=;
specs {
name="specs";
el_typ=BaseSpec;
el_def=0;
LeabraLayerSpec @["Input_Output"] {
name="Input_Output";
desc=;
unique{ inhib_group;gp_kwta;};
children {
name="children";
el_typ=LeabraLayerSpec;
el_def=0;
};
inhib_group=ENTIRE_LAYER;
inhib {
type=KWTA_INHIB;
kwta_pt=0.25;
gi=2;
ff=1;
fb=0.5;
self_fb=0;
prv_trl_ff=0;
prv_phs_ff=0;
dt=0.7;
up_immed=0;
ff0=0.1;
min_i=0;
};
kwta {k_from=USE_K: k=2: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
decay {event=1: phase=0: phase2=0: };
cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
ct_inhib_mod {
manual_sravg=0;
sravg_delay=0;
use_sin=0;
burst_i=0.02;
trough_i=0.02;
use_fin=0;
inhib_i=0;
};
tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
abs_net_adapt {
on=0;
trg_net=0.5;
tol=0.1;
abs_lrate=0.1;
};
};
BaseSpec_Group @.gp["HippoSpecs"] {
name="HippoSpecs";
el_typ=LeabraUnitSpec;
el_def=0;
LeabraUnitSpec @["HippoUnitSpec"] {
name="HippoUnitSpec";
desc=;
unique{ };
children {
name="children";
el_typ=LeabraUnitSpec;
el_def=0;
};
act_range {min=0: max=1: range=1: scale=1: };
bias_con_type=LeabraCon;
bias_spec {type=LeabraBiasSpec: spec=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["HippoBiasSpec"]$$: };
sse_tol=0.5;
act_fun=NOISY_XX1;
act {gelin=1: thr=0.5: gain=100: nvar=0.005: avg_dt=0.005: avg_init=0.15: rescale_ctxt=1: i_thr=STD: };
act_lrn_on=0;
act_lrn {gelin=1: thr=0.5: gain=100: nvar=0.005: };
spike {rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_dt=0.02: };
spike_misc {
exp_slope=0.02;
spk_thr=1.2;
clamp_max_p=0.12;
clamp_type=REGULAR;
vm_r=0.3;
t_r=6;
vm_dend=0.3;
vm_dend_dt=0.16;
vm_dend_time=6.25;
};
opt_thresh {send=0.1: delta=0.005: phase_dif=0: xcal_lrn=0.01: };
maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
vm_range {min=0: max=2: range=2: scale=0.5: };
v_m_init {name="v_m_init": type=NONE: mean=0.300000011920929: var=0: par=1: };
act_init {name="act_init": type=NONE: mean=0: var=0: par=1: };
dt {integ=1: vm=0.3: net=0.7: midpoint=0: d_vm_max=100: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=3.333333: net_time=1.428571: };
act_avg {l_up_add=1: l_dn_pct=1: l_up_dt=0.25: l_dn_dt=0.4: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=2.5: m_time=10: s_time=5: ss_time=1: };
g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
e_rev {e=1: l=0.3: i=0.25: h=1: a=0: };
hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=0: trl=0: };
acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=0: trl=0: };
adapt {
on=0;
dt=0.007;
vm_gain=0.04;
spike_gain=0.00805;
interval=10;
trials=0;
dt_time=142.8571;
};
depress {phase_act=ACT_ND: on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: delay=0: interval=10: trials=0: max_amp=1: };
syn_delay {
on=0;
delay=4;
};
cifer {on=0: phase_updt=0: super_gain=0.05: thal_5b_thr=0.5: act_5b_thr=0.5: binary5b=0: ti_5b=0.5: bg_lrate=1: fg_lrate=0: };
da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
noise_type=NO_NOISE;
noise {name="noise": type=GAUSSIAN: mean=0: var=0.001000000047497451: par=1: };
noise_adapt {trial_fixed=1: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
noise_sched {
name="noise_sched";
el_typ=SchedItem;
el_def=0;
default_val=1;
interpolate=1;
};
};
HippoEncoderConSpec @["EC_CA1ConSpecs"] {
name="EC_CA1ConSpecs";
desc=;
unique{ lmix;wt_sig;rel_net_adapt;};
children {
name="children";
el_typ=HippoEncoderConSpec;
el_def=0;
HippoEncoderConSpec @["EC_in_CA1"] {
name="EC_in_CA1";
desc=;
unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;};
children {
name="children";
el_typ=HippoEncoderConSpec;
el_def=0;
};
rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
learn_rule=CTLEABRA_XCAL;
inhib=0;
wt_scale {abs=3: rel=1: sem_extra=2: };
diff_scale_p=0;
wt_scale_p {abs=1: rel=1: sem_extra=2: };
wt_scale_init {init=0: abs=1: rel=1: };
learn=1;
lrate=0.02;
cur_lrate=0.02;
lrs_value=EPOCH;
lrate_sched {
name="lrate_sched";
el_typ=SchedItem;
el_def=0;
default_val=1;
interpolate=0;
};
ignore_unlearnable=1;
wt_sig {gain=6: off=1: dwt_norm=0: };
stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
lmix {hebb=0.005: err=0.995: err_sb=1: };
xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
savg_cor {cor=1: thresh=0.001: };
rel_net_adapt {
on=0;
trg_fm_input=0.85;
trg_fm_output=0.15;
trg_lateral=0;
trg_sum=1;
tol_lg=0.05;
tol_sm=0.2;
rel_lrate=0.2;
};
};
HippoEncoderConSpec @["CA1_EC_out"] {
name="CA1_EC_out";
desc=;
unique{ lmix;wt_sig;rel_net_adapt;wt_scale;rnd;lrate;};
children {
name="children";
el_typ=HippoEncoderConSpec;
el_def=0;
};
rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
learn_rule=CTLEABRA_XCAL;
inhib=0;
wt_scale {abs=1: rel=1: sem_extra=2: };
diff_scale_p=0;
wt_scale_p {abs=1: rel=1: sem_extra=2: };
wt_scale_init {init=0: abs=1: rel=1: };
learn=1;
lrate=0.02;
cur_lrate=0.02;
lrs_value=EPOCH;
lrate_sched {
name="lrate_sched";
el_typ=SchedItem;
el_def=0;
default_val=1;
interpolate=0;
};
ignore_unlearnable=1;
wt_sig {gain=6: off=1: dwt_norm=0: };
stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
lmix {hebb=0.005: err=0.995: err_sb=1: };
xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
savg_cor {cor=1: thresh=0.001: };
rel_net_adapt {
on=0;
trg_fm_input=0.85;
trg_fm_output=0.15;
trg_lateral=0;
trg_sum=1;
tol_lg=0.05;
tol_sm=0.2;
rel_lrate=0.2;
};
};
HippoEncoderConSpec @["EC_out_CA1"] {
name="EC_out_CA1";
desc=;
unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;};
children {
name="children";
el_typ=HippoEncoderConSpec;
el_def=0;
};
rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
learn_rule=CTLEABRA_XCAL;
inhib=0;
wt_scale {abs=1: rel=1: sem_extra=2: };
diff_scale_p=0;
wt_scale_p {abs=1: rel=1: sem_extra=2: };
wt_scale_init {init=0: abs=1: rel=1: };
learn=1;
lrate=0.02;
cur_lrate=0.02;
lrs_value=EPOCH;
lrate_sched {
name="lrate_sched";
el_typ=SchedItem;
el_def=0;
default_val=1;
interpolate=0;
};
ignore_unlearnable=1;
wt_sig {gain=6: off=1: dwt_norm=0: };
stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
lmix {hebb=0.005: err=0.995: err_sb=1: };
xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
savg_cor {cor=1: thresh=0.001: };
rel_net_adapt {
on=0;
trg_fm_input=0.85;
trg_fm_output=0.15;
trg_lateral=0;
trg_sum=1;
tol_lg=0.05;
tol_sm=0.2;
rel_lrate=0.2;
};
};
HippoEncoderConSpec @["EC_in_EC_out"] {
name="EC_in_EC_out";
desc=;
unique{ lmix;wt_sig;rel_net_adapt;wt_scale;lrate;rnd;};
children {
name="children";
el_typ=HippoEncoderConSpec;
el_def=0;
};
rnd {name="rnd": type=UNIFORM: mean=0.9: var=0.01: par=1: };
wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
learn_rule=CTLEABRA_XCAL;
inhib=0;
wt_scale {abs=1: rel=0: sem_extra=2: };
diff_scale_p=0;
wt_scale_p {abs=1: rel=1: sem_extra=2: };
wt_scale_init {init=0: abs=1: rel=1: };
learn=1;
lrate=0;
cur_lrate=0.02;
lrs_value=EPOCH;
lrate_sched {
name="lrate_sched";
el_typ=SchedItem;
el_def=0;
default_val=1;
interpolate=0;
};
ignore_unlearnable=1;
wt_sig {gain=6: off=1: dwt_norm=0: };
stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
lmix {hebb=0.005: err=0.995: err_sb=1: };
xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
savg_cor {cor=1: thresh=0.001: };
rel_net_adapt {
on=0;
trg_fm_input=0.85;
trg_fm_output=0.15;
trg_lateral=0;
trg_sum=1;
tol_lg=0.05;
tol_sm=0.2;
rel_lrate=0.2;
};
};
HippoEncoderConSpec @["EC_out_EC_in"] {
name="EC_out_EC_in";
desc=;
unique{ lmix;wt_sig;rel_net_adapt;lrate;wt_scale;rnd;};
children {
name="children";
el_typ=HippoEncoderConSpec;
el_def=0;
};
rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.01: par=1: };
wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
learn_rule=CTLEABRA_XCAL;
inhib=0;
wt_scale {abs=2: rel=0.5: sem_extra=2: };
diff_scale_p=0;
wt_scale_p {abs=1: rel=1: sem_extra=2: };
wt_scale_init {init=0: abs=1: rel=1: };
learn=1;
lrate=0;
cur_lrate=0;
lrs_value=EPOCH;
lrate_sched {
name="lrate_sched";
el_typ=SchedItem;
el_def=0;
default_val=1;
interpolate=0;
};
ignore_unlearnable=1;
wt_sig {gain=6: off=1: dwt_norm=0: };
stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
lmix {hebb=0.005: err=0.995: err_sb=1: };
xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
savg_cor {cor=1: thresh=0.001: };
rel_net_adapt {
on=0;
trg_fm_input=0.85;
trg_fm_output=0.15;
trg_lateral=0;
trg_sum=1;
tol_lg=0.05;
tol_sm=0.2;
rel_lrate=0.2;
};
};
LeabraConSpec @["Input_EC_in"] {
name="Input_EC_in";
desc=;
unique{ wt_sig;lrate;};
children {
name="children";
el_typ=LeabraConSpec;
el_def=0;
};
rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
learn_rule=CTLEABRA_XCAL;
inhib=0;
wt_scale {abs=1: rel=1: sem_extra=2: };
diff_scale_p=0;
wt_scale_p {abs=1: rel=1: sem_extra=2: };
wt_scale_init {init=0: abs=1: rel=1: };
learn=1;
lrate=0;
cur_lrate=0;
lrs_value=EPOCH;
lrate_sched {
name="lrate_sched";
el_typ=SchedItem;
el_def=0;
default_val=1;
interpolate=0;
};
ignore_unlearnable=1;
wt_sig {gain=6: off=1: dwt_norm=0: };
stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
lmix {hebb=0.001: err=0.999: err_sb=1: };
xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
savg_cor {cor=1: thresh=0.001: };
rel_net_adapt {
on=0;
trg_fm_input=0.85;
trg_fm_output=0.15;
trg_lateral=0;
trg_sum=1;
tol_lg=0.05;
tol_sm=0.2;
rel_lrate=0.2;
};
};
};
rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
learn_rule=CTLEABRA_XCAL;
inhib=0;
wt_scale {abs=1: rel=1: sem_extra=2: };
diff_scale_p=0;
wt_scale_p {abs=1: rel=1: sem_extra=2: };
wt_scale_init {init=0: abs=1: rel=1: };
learn=1;
lrate=0.02;
cur_lrate=0.02;
lrs_value=EPOCH;
lrate_sched {
name="lrate_sched";
el_typ=SchedItem;
el_def=0;
default_val=1;
interpolate=0;
};
ignore_unlearnable=1;
wt_sig {gain=6: off=1: dwt_norm=0: };
stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
lmix {hebb=0.005: err=0.995: err_sb=1: };
xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
savg_cor {cor=1: thresh=0.001: };
rel_net_adapt {
on=0;
trg_fm_input=0.85;
trg_fm_output=0.15;
trg_lateral=0;
trg_sum=1;
tol_lg=0.05;
tol_sm=0.2;
rel_lrate=0.2;
};
};
XCalCHLConSpec @["HippoConSpecs"] {
name="HippoConSpecs";
desc=;
unique{ lrate;lmix;};
children {
name="children";
el_typ=LeabraBiasSpec;
el_def=0;
LeabraBiasSpec @["HippoBiasSpec"] {
name="HippoBiasSpec";
desc=;
unique{ rnd;wt_limits;wt_scale;wt_scale_init;};
children {
name="children";
el_typ=LeabraBiasSpec;
el_def=0;
};
rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
wt_limits {type=NONE: min=-1: max=5: sym=0: };
learn_rule=CTLEABRA_XCAL;
inhib=0;
wt_scale {abs=1: rel=1: sem_extra=2: };
diff_scale_p=0;
wt_scale_p {abs=1: rel=1: sem_extra=2: };
wt_scale_init {init=0: abs=1: rel=1: };
learn=1;
lrate=0.2;
cur_lrate=0.2;
lrs_value=EPOCH;
lrate_sched {
name="lrate_sched";
el_typ=SchedItem;
el_def=0;
default_val=1;
interpolate=0;
};
ignore_unlearnable=1;
wt_sig {gain=6: off=1: dwt_norm=0: };
stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
lmix {hebb=0.001: err=0.999: err_sb=1: };
xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
savg_cor {cor=0.4: thresh=0.001: };
rel_net_adapt {
on=0;
trg_fm_input=0.85;
trg_fm_output=0.15;
trg_lateral=0;
trg_sum=1;
tol_lg=0.05;
tol_sm=0.2;
rel_lrate=0.2;
};
dwt_thresh=0.1;
};
XCalCHLConSpec @["PerfPath"] {
name="PerfPath";
desc=;
unique{ wt_scale;};
children {
name="children";
el_typ=XCalCHLConSpec;
el_def=0;
};
rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
learn_rule=CTLEABRA_XCAL;
inhib=0;
wt_scale {abs=1: rel=1: sem_extra=2: };
diff_scale_p=0;
wt_scale_p {abs=1: rel=1: sem_extra=2: };
wt_scale_init {init=0: abs=1: rel=1: };
learn=1;
lrate=0.2;
cur_lrate=0.2;
lrs_value=EPOCH;
lrate_sched {
name="lrate_sched";
el_typ=SchedItem;
el_def=0;
default_val=1;
interpolate=0;
};
ignore_unlearnable=1;
wt_sig {gain=6: off=1: dwt_norm=0: };
stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
lmix {hebb=0.05: err=0.95: err_sb=1: };
xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
savg_cor {cor=0.4: thresh=0.001: };
rel_net_adapt {
on=0;
trg_fm_input=0.85;
trg_fm_output=0.15;
trg_lateral=0;
trg_sum=1;
tol_lg=0.05;
tol_sm=0.2;
rel_lrate=0.2;
};
use_chl=1;
};
XCalCHLConSpec @["Mossy"] {
name="Mossy";
desc=;
unique{ rnd;wt_scale;lrate;rel_net_adapt;};
children {
name="children";
el_typ=XCalCHLConSpec;
el_def=0;
};
rnd {name="rnd": type=UNIFORM: mean=0.9: var=0.01: par=1: };
wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
learn_rule=CTLEABRA_XCAL;
inhib=0;
wt_scale {abs=1: rel=8: sem_extra=2: };
diff_scale_p=0;
wt_scale_p {abs=1: rel=1: sem_extra=2: };
wt_scale_init {init=0: abs=1: rel=1: };
learn=1;
lrate=0;
cur_lrate=0;
lrs_value=EPOCH;
lrate_sched {
name="lrate_sched";
el_typ=SchedItem;
el_def=0;
default_val=1;
interpolate=0;
};
ignore_unlearnable=1;
wt_sig {gain=6: off=1: dwt_norm=0: };
stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
lmix {hebb=0.05: err=0.95: err_sb=1: };
xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
savg_cor {cor=0.4: thresh=0.001: };
rel_net_adapt {
on=0;
trg_fm_input=0.85;
trg_fm_output=0.15;
trg_lateral=0;
trg_sum=1;
tol_lg=0.05;
tol_sm=0.2;
rel_lrate=0.2;
};
use_chl=1;
};
XCalCHLConSpec @["CA3_CA3"] {
name="CA3_CA3";
desc=;
unique{ wt_scale;rel_net_adapt;};
children {
name="children";
el_typ=XCalCHLConSpec;
el_def=0;
};
rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
learn_rule=CTLEABRA_XCAL;
inhib=0;
wt_scale {abs=1: rel=1: sem_extra=2: };
diff_scale_p=0;
wt_scale_p {abs=1: rel=1: sem_extra=2: };
wt_scale_init {init=0: abs=1: rel=1: };
learn=1;
lrate=0.2;
cur_lrate=0.2;
lrs_value=EPOCH;
lrate_sched {
name="lrate_sched";
el_typ=SchedItem;
el_def=0;
default_val=1;
interpolate=0;
};
ignore_unlearnable=1;
wt_sig {gain=6: off=1: dwt_norm=0: };
stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
lmix {hebb=0.05: err=0.95: err_sb=1: };
xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
savg_cor {cor=0.4: thresh=0.001: };
rel_net_adapt {
on=0;
trg_fm_input=0.85;
trg_fm_output=0.15;
trg_lateral=0;
trg_sum=1;
tol_lg=0.05;
tol_sm=0.2;
rel_lrate=0.2;
};
use_chl=1;
};
XCalCHLConSpec @["CA3_CA1"] {
name="CA3_CA1";
desc=;
unique{ lrate;lmix;wt_scale;};
children {
name="children";
el_typ=XCalCHLConSpec;
el_def=0;
};
rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
learn_rule=CTLEABRA_XCAL;
inhib=0;
wt_scale {abs=1: rel=1: sem_extra=2: };
diff_scale_p=0;
wt_scale_p {abs=1: rel=1: sem_extra=2: };
wt_scale_init {init=0: abs=1: rel=1: };
learn=1;
lrate=0.05;
cur_lrate=0.05;
lrs_value=EPOCH;
lrate_sched {
name="lrate_sched";
el_typ=SchedItem;
el_def=0;
default_val=1;
interpolate=0;
};
ignore_unlearnable=1;
wt_sig {gain=6: off=1: dwt_norm=0: };
stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
lmix {hebb=0.005: err=0.995: err_sb=1: };
xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
savg_cor {cor=0.4: thresh=0.001: };
rel_net_adapt {
on=0;
trg_fm_input=0.85;
trg_fm_output=0.15;
trg_lateral=0;
trg_sum=1;
tol_lg=0.05;
tol_sm=0.2;
rel_lrate=0.2;
};
use_chl=1;
};
};
rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
learn_rule=CTLEABRA_XCAL;
inhib=0;
wt_scale {abs=1: rel=1: sem_extra=2: };
diff_scale_p=0;
wt_scale_p {abs=1: rel=1: sem_extra=2: };
wt_scale_init {init=0: abs=1: rel=1: };
learn=1;
lrate=0.2;
cur_lrate=0.02;
lrs_value=EPOCH;
lrate_sched {
name="lrate_sched";
el_typ=SchedItem;
el_def=0;
default_val=1;
interpolate=0;
};
ignore_unlearnable=1;
wt_sig {gain=6: off=1: dwt_norm=0: };
stable_mix {stable_pct=0: learn_pct=1: cos_diff_lrate=0: };
lmix {hebb=0.05: err=0.95: err_sb=1: };
xcal {l_mix=L_MIX: thr_l_mix=0.01: thr_m_mix=0.99: s_mix=0.9: m_mix=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
savg_cor {cor=0.4: thresh=0.001: };
rel_net_adapt {
on=0;
trg_fm_input=0.85;
trg_fm_output=0.15;
trg_lateral=0;
trg_sum=1;
tol_lg=0.05;
tol_sm=0.2;
rel_lrate=0.2;
};
use_chl=1;
};
ThetaPhaseLayerSpec @["HippoLayerSpec"] {
name="HippoLayerSpec";
desc=;
unique{ };
children {
name="children";
el_typ=ECoutLayerSpec;
el_def=0;
ECoutLayerSpec @["EC_out"] {
name="EC_out";
desc=;
unique{ inhib;clamp;decay;kwta;};
children {
name="children";
el_typ=ECinLayerSpec;
el_def=0;
ECinLayerSpec @["EC_in"] {
name="EC_in";
desc=;
unique{ decay;clamp;inhib;kwta;};
children {
name="children";
el_typ=ECinLayerSpec;
el_def=0;
};
inhib_group=ENTIRE_LAYER;
inhib {
type=KWTA_INHIB;
kwta_pt=0.5;
gi=1.7;
ff=1;
fb=0.5;
self_fb=0;
prv_trl_ff=0;
prv_phs_ff=0;
dt=0.7;
up_immed=0;
ff0=0.1;
min_i=0;
};
kwta {k_from=USE_K: k=2: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
clamp {hard=1: gain=0.9: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
decay {event=1: phase=0: phase2=0: };
cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
ct_inhib_mod {
manual_sravg=0;
sravg_delay=0;
use_sin=0;
burst_i=0.02;
trough_i=0.02;
use_fin=0;
inhib_i=0;
};
tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
abs_net_adapt {
on=0;
trg_net=0.5;
tol=0.1;
abs_lrate=0.2;
};
auto_m_cycles=30;
};
};
inhib_group=ENTIRE_LAYER;
inhib {
type=KWTA_INHIB;
kwta_pt=0.5;
gi=1.7;
ff=1;
fb=0.5;
self_fb=0;
prv_trl_ff=0;
prv_phs_ff=0;
dt=0.7;
up_immed=0;
ff0=0.1;
min_i=0;
};
kwta {k_from=USE_K: k=2: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
clamp {hard=1: gain=0.999: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
decay {event=1: phase=0: phase2=0: };
cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
ct_inhib_mod {
manual_sravg=0;
sravg_delay=0;
use_sin=0;
burst_i=0.02;
trough_i=0.02;
use_fin=0;
inhib_i=0;
};
tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
abs_net_adapt {
on=0;
trg_net=0.5;
tol=0.1;
abs_lrate=0.2;
};
auto_m_cycles=30;
};
LeabraLayerSpec @["DG"] {
name="DG";
desc=;
unique{ kwta;decay;inhib;};
children {
name="children";
el_typ=LeabraLayerSpec;
el_def=0;
};
inhib_group=ENTIRE_LAYER;
inhib {
type=KWTA_AVG_INHIB;
kwta_pt=0.9;
gi=20;
ff=1;
fb=0.5;
self_fb=0;
prv_trl_ff=0;
prv_phs_ff=0;
dt=0.7;
up_immed=0;
ff0=0.1;
min_i=0;
};
kwta {k_from=USE_PCT: k=12: pct=0.01: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
decay {event=1: phase=0: phase2=0: };
cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
ct_inhib_mod {
manual_sravg=0;
sravg_delay=0;
use_sin=0;
burst_i=0.02;
trough_i=0.02;
use_fin=0;
inhib_i=0;
};
tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
abs_net_adapt {
on=0;
trg_net=0.5;
tol=0.1;
abs_lrate=0.2;
};
};
CA3LayerSpec @["CA3"] {
name="CA3";
desc=;
unique{ kwta;decay;inhib;};
children {
name="children";
el_typ=CA3LayerSpec;
el_def=0;
};
inhib_group=ENTIRE_LAYER;
inhib {
type=KWTA_AVG_INHIB;
kwta_pt=0.7;
gi=3;
ff=1;
fb=0.5;
self_fb=0;
prv_trl_ff=0;
prv_phs_ff=0;
dt=0.7;
up_immed=0;
ff0=0.1;
min_i=0;
};
kwta {k_from=USE_PCT: k=12: pct=0.06: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
decay {event=1: phase=0: phase2=0: };
cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
ct_inhib_mod {
manual_sravg=0;
sravg_delay=0;
use_sin=0;
burst_i=0.02;
trough_i=0.02;
use_fin=0;
inhib_i=0;
};
tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
abs_net_adapt {
on=0;
trg_net=0.5;
tol=0.1;
abs_lrate=0.2;
};
auto_m_cycles=30;
};
CA1LayerSpec @["CA1"] {
name="CA1";
desc=;
unique{ gp_kwta;decay;inhib;kwta;};
children {
name="children";
el_typ=CA1LayerSpec;
el_def=0;
};
inhib_group=ENTIRE_LAYER;
inhib {
type=KWTA_AVG_INHIB;
kwta_pt=0.7;
gi=2.2;
ff=1;
fb=0.5;
self_fb=0;
prv_trl_ff=0;
prv_phs_ff=0;
dt=0.7;
up_immed=0;
ff0=0.1;
min_i=0;
};
kwta {k_from=USE_PCT: k=12: pct=0.01: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
gp_kwta {k_from=USE_PCT: k=12: pct=0.1: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
decay {event=1: phase=0: phase2=0: };
cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
ct_inhib_mod {
manual_sravg=0;
sravg_delay=0;
use_sin=0;
burst_i=0.02;
trough_i=0.02;
use_fin=0;
inhib_i=0;
};
tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
abs_net_adapt {
on=0;
trg_net=0.5;
tol=0.1;
abs_lrate=0.2;
};
auto_m_cycles=30;
recall_decay=1;
use_test_mode=1;
};
};
inhib_group=ENTIRE_LAYER;
inhib {
type=KWTA_AVG_INHIB;
kwta_pt=0.7;
gi=2;
ff=1;
fb=0.5;
self_fb=0;
prv_trl_ff=0;
prv_phs_ff=0;
dt=0.7;
up_immed=0;
ff0=0.1;
min_i=0;
};
kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.2: avg_dt=0.005: diff_act_pct=0: act_pct=0.1: };
lay_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
unit_gp_inhib {on=0: fffb=0: lay_gi=2: gp_g=0.5: self_g=1: diff_act_pct=0: act_pct_mult=0.3333333: pct_fm_frac=1: act_denom=3: };
clamp {hard=1: gain=0.2: max_plus=0: plus=0.01: min_clamp=0.5: minus_targ_gain=0: };
decay {event=1: phase=1: phase2=0: };
cos_diff_lrate {on=1: lo_diff=0: lo_lrate=0.01: hi_diff=1: hi_lrate=0.01: avg_dt=0.01: };
ct_inhib_mod {
manual_sravg=0;
sravg_delay=0;
use_sin=0;
burst_i=0.02;
trough_i=0.02;
use_fin=0;
inhib_i=0;
};
tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
abs_net_adapt {
on=0;
trg_net=0.5;
tol=0.1;
abs_lrate=0.2;
};
auto_m_cycles=30;
};
BaseSpec_Group @.gp["HippoPrjns"] {
name="HippoPrjns";
el_typ=FullPrjnSpec;
el_def=0;
FullPrjnSpec @["FullPrjn"] {
name="FullPrjn";
desc=;
unique{ };
children {
name="children";
el_typ=FullPrjnSpec;
el_def=0;
};
self_con=0;
init_wts=0;
add_rnd_wts=0;
add_rnd_wts_scale=1;
};
OneToOnePrjnSpec @["OneToOne"] {
name="OneToOne";
desc=;
unique{ self_con;};
children {
name="children";
el_typ=OneToOnePrjnSpec;
el_def=0;
};
self_con=1;
init_wts=0;
add_rnd_wts=0;
add_rnd_wts_scale=1;
n_conns=-1;
recv_start=0;
send_start=0;
use_gp=0;
};
GpOneToOnePrjnSpec @["GpOneToOne"] {
name="GpOneToOne";
desc=;
unique{ self_con;};
children {
name="children";
el_typ=GpOneToOnePrjnSpec;
el_def=0;
};
self_con=1;
init_wts=0;
add_rnd_wts=0;
add_rnd_wts_scale=1;
n_conns=-1;
recv_start=0;
send_start=0;
use_gp=0;
};
UniformRndPrjnSpec @["RandomPerfPath"] {
name="RandomPerfPath";
desc=;
unique{ };
children {
name="children";
el_typ=UniformRndPrjnSpec;
el_def=0;
};
self_con=0;
init_wts=0;
add_rnd_wts=0;
add_rnd_wts_scale=1;
p_con=0.25;
sym_self=1;
same_seed=0;
rndm_seed {
name="rndm_seed";
seed{ 707551012;975300867;-421406617;4931201;733197266;-1002669402;-1107293959;-1067187957;-5705331;1663011748;-1429881299;-535116067;-1833998651;-669828676;-124340110;-1380948292;289464655;441883386;-659541490;2006070012;355886047;180230571;-218031504;-704579432;259013739;493509647;1662523737;-880243957;586265667;531844170;-746297245;-1237412045;-1232107456;2114508411;687635505;382005145;1655164875;-339893344;-352016716;110513337;-1516899987;-1498102558;1333711463;-1673688716;1800719372;-603649784;1678419138;327323293;994691190;-1877526066;1033089248;270671555;1093841030;-1794178499;2035362251;1640997824;-1291931663;1769805483;1684381372;-1285349653;1869548037;1246791055;-2013593090;104511517;-979300152;1957404190;-47159552;-586384752;-385012959;179007505;1156899604;1466427208;-226521096;-1020012193;-196601952;-913177157;-613639267;1775256641;273802369;313849222;-1935538645;232812549;417107944;1278690359;1967647741;-1177956977;671764973;-1440677441;-1941018728;-1981010497;1444214912;-973021715;-1130794201;-2140272403;-38269052;1943960033;-4612615;-1158504262;1272109309;-290596361;-177826531;-2083311845;1116898;466489781;1526627584;-1360911658;1627894708;1073550553;2139257928;-2050095028;1146074516;1810810582;-1292005414;-188955790;-9606136;1494883914;534941587;1145210320;221675511;-470563320;-1631954770;-2030241533;360492933;-1960854291;2134710399;1896347725;-1546306941;-814420914;-869064586;1973424450;-1417176227;2032056409;1168116648;1708916229;-1430267399;7739414;-147316037;-144049114;1141492579;1309739596;1565953986;-1837807036;-1349770430;-1882456965;418216887;-686076930;500766747;407622591;-440744401;-77713017;281365162;-261715877;-1671728817;-1169795898;-1007899475;551276949;26085528;1020037746;-1151655408;-1402075486;-75544483;-97817530;1484420481;581363343;544663732;-1417868751;-1762489859;-156313309;185399313;-1829726830;1752530029;1484308979;1175702508;-374618805;-147505769;1091763303;2015998325;-690748859;-1289232819;673806245;-843027435;1859752109;1949181812;-1947654155;1319050905;1260958801;-838198067;-1526469533;1219068529;-1366444915;-873081609;-1843675346;1463219725;1385322598;1297720910;371911408;-1526326427;-883602854;1357323531;-823103263;-1550126514;924034176;1625419887;-1013845429;1527252442;1794805608;-1002016443;919950077;-112851318;1243653790;-1194247391;-1459252000;123196355;849635461;402999179;434608109;1028939795;-205342807;-1490619247;29642269;1795481774;570059169;-396437095;-1368439248;1058542965;-752921855;964158849;339375419;1739112324;1465194061;-855591926;-1085933650;-1124503416;1903599721;-295537254;1194747380;-2135222494;501272533;-1624999056;-583467972;1990030030;714853983;-1314595391;-361899204;463026271;-348044435;560465483;-2131706657;808924288;1537919046;1507993836;310852598;1127118012;493980205;1126295780;-782773659;1476181077;185125711;-335402501;980352628;-2102595471;2040946687;-1883550268;-500420691;1203000438;859846217;-612584922;-2054102077;-1407870597;-1799743398;2092880354;-603750978;1252868674;-1115539833;1031365069;173791431;-1412088656;-875709351;-565893785;1513807331;2081301183;-1176387360;-137335310;-1474544614;-1339193898;79786391;-1811271526;1319359968;1730536311;-224176469;-1213620682;-978388258;-1922080186;863997034;-547987781;-544419001;-1986935785;620499002;1313559914;1429931690;-1511024397;-1354929932;1069137177;1565746142;-1975047405;-1436323397;-2045610915;-1228899273;-1003613847;1785592207;1573071097;1237124150;1975050762;2041297381;-910942037;-1088721367;-297844930;-914502129;1492374869;-1732059070;949814684;-1842961145;-802111480;-129318508;-647536678;-1774067919;89135631;-933587277;-420571895;1854060310;-222251147;1380217425;-1510395207;-1367237162;1596034915;2043312186;-1760090468;-1502938152;2016554088;-2046281763;841663181;-1851998728;1420407311;-1648141448;1013783899;1721809057;-1992121756;219184445;-560439037;-185690076;647838731;-1255035710;72236346;1927964228;1677733766;1009040014;-1026510995;-42656071;1555515128;-217967250;1670128656;560015689;-1312409330;384569014;-1308021678;-604503442;1240172737;-988761229;-1861640968;1494143818;-1936308493;-891804758;-627166189;1146101024;1230845675;-1961722378;1191605086;-59458613;-95583465;1326997845;1949697188;889457192;-858355703;-815891493;1225383817;2006998886;-1370370982;-1444389709;64223056;1347691138;1242770086;897809394;1252382357;179009534;739709944;-1322456059;-257464559;-1958316655;1368225554;1309303038;-1941277971;438174895;-506850611;-635051627;-483443292;782515790;-1626277371;1781546761;234135728;2075212580;1255219472;713219763;137099452;-1481578436;-872771662;-510344217;336794182;1082258730;1231530161;1091929347;-136603461;-1386538860;900767186;-462511793;429261156;1173850019;-1738110350;-197761743;658444824;-1184603271;1115453855;-1457282968;233021379;-179569550;-909212533;-1259634213;-9022402;-1048016583;-958914874;1318977792;-1449452492;617453420;2029611101;-808110975;250408513;-1626693376;744946436;-1652814251;1190926309;962700431;638347229;-1504123821;1574958494;1056624595;1286686226;167479639;-1175617267;-2103906374;-507946160;-1681471076;-859308769;2128767516;-2075880768;-136324760;241434382;-1674962391;-504757775;1961944929;-1356806521;-1282446865;-1855768767;-27386572;-728042006;116449404;979177509;2132507401;-1314973048;2104806581;732400614;-944175823;-336099634;-1886074061;330276263;-133774002;-2037660989;-884164391;-833107111;1246970285;-597226273;1974765913;-1381501544;565052059;162365716;1715108042;-506599056;-1588119853;704517383;-1936241900;658794802;731529224;1346031717;-313699053;1329269568;-662241931;538856490;-377734842;-9283478;1003392439;162736809;454658900;222809677;655894006;437308035;-1808838497;1730737394;-1582848247;1560597132;1872501242;-1653167134;-1921243693;1535458581;233826112;550871700;-1296049233;-1308152241;1634335608;790617801;-448984089;1830836715;283946867;1547308154;339174900;1868988735;250414678;-893723731;1611652194;-577497934;832061488;1997279033;409507043;1849132301;1660959416;1615950604;1803439159;-992223104;496961563;237850964;621158714;-1978710322;-2127326882;-1212605297;372744215;1117304080;560824275;-2146870276;-254000435;-726402944;1098470161;-1989275075;-1183648178;-238318424;-672913658;749876388;663991382;-97226153;-1308623165;-278952171;1048637040;-857380030;2080417015;-858432278;-1567208204;1840769848;-252314866;-1961763323;366790893;1050278207;-1175574836;-176490857;1828828112;1893724562;-508757151;1314153951;1311017064;-1448267641;2043363243;1017237221;-1701906592;-425488118;-809398493;-1191041237;-1525274011;701923821;-1598962958;831821173;1593010452;-467790438;-1058873913;352097002;1785279852;1288775336;577075553;1479244322;900338809;-572838952;1656385327;-45399686;-271775302;-2133839150;-614769405;714555412;-876077478;-504899461;-479526430;1415873195;-695783980;-1382206987;1471899071;-2045467961;1095243842;1726971649;-1378143789;852155140;-441366397;};
mti=566;
is_gauss_double_cached=0;
cached_gauss_double=0;
};
};
UniformRndPrjnSpec @["UniformRndMossy"] {
name="UniformRndMossy";
desc=;
unique{ };
children {
name="children";
el_typ=UniformRndPrjnSpec;
el_def=0;
};
self_con=0;
init_wts=0;
add_rnd_wts=0;
add_rnd_wts_scale=1;
p_con=0.05;
sym_self=1;
same_seed=0;
rndm_seed {
name="rndm_seed";
seed{ 707551012;975300867;-421406617;4931201;733197266;-1002669402;-1107293959;-1067187957;-5705331;1663011748;-1429881299;-535116067;-1833998651;-669828676;-124340110;-1380948292;289464655;441883386;-659541490;2006070012;355886047;180230571;-218031504;-704579432;259013739;493509647;1662523737;-880243957;586265667;531844170;-746297245;-1237412045;-1232107456;2114508411;687635505;382005145;1655164875;-339893344;-352016716;110513337;-1516899987;-1498102558;1333711463;-1673688716;1800719372;-603649784;1678419138;327323293;994691190;-1877526066;1033089248;270671555;1093841030;-1794178499;2035362251;1640997824;-1291931663;1769805483;1684381372;-1285349653;1869548037;1246791055;-2013593090;104511517;-979300152;1957404190;-47159552;-586384752;-385012959;179007505;1156899604;1466427208;-226521096;-1020012193;-196601952;-913177157;-613639267;1775256641;273802369;313849222;-1935538645;232812549;417107944;1278690359;1967647741;-1177956977;671764973;-1440677441;-1941018728;-1981010497;1444214912;-973021715;-1130794201;-2140272403;-38269052;1943960033;-4612615;-1158504262;1272109309;-290596361;-177826531;-2083311845;1116898;466489781;1526627584;-1360911658;1627894708;1073550553;2139257928;-2050095028;1146074516;1810810582;-1292005414;-188955790;-9606136;1494883914;534941587;1145210320;221675511;-470563320;-1631954770;-2030241533;360492933;-1960854291;2134710399;1896347725;-1546306941;-814420914;-869064586;1973424450;-1417176227;2032056409;1168116648;1708916229;-1430267399;7739414;-147316037;-144049114;1141492579;1309739596;1565953986;-1837807036;-1349770430;-1882456965;418216887;-686076930;500766747;407622591;-440744401;-77713017;281365162;-261715877;-1671728817;-1169795898;-1007899475;551276949;26085528;1020037746;-1151655408;-1402075486;-75544483;-97817530;1484420481;581363343;544663732;-1417868751;-1762489859;-156313309;185399313;-1829726830;1752530029;1484308979;1175702508;-374618805;-147505769;1091763303;2015998325;-690748859;-1289232819;673806245;-843027435;1859752109;1949181812;-1947654155;1319050905;1260958801;-838198067;-1526469533;1219068529;-1366444915;-873081609;-1843675346;1463219725;1385322598;1297720910;371911408;-1526326427;-883602854;1357323531;-823103263;-1550126514;924034176;1625419887;-1013845429;1527252442;1794805608;-1002016443;919950077;-112851318;1243653790;-1194247391;-1459252000;123196355;849635461;402999179;434608109;1028939795;-205342807;-1490619247;29642269;1795481774;570059169;-396437095;-1368439248;1058542965;-752921855;964158849;339375419;1739112324;1465194061;-855591926;-1085933650;-1124503416;1903599721;-295537254;1194747380;-2135222494;501272533;-1624999056;-583467972;1990030030;714853983;-1314595391;-361899204;463026271;-348044435;560465483;-2131706657;808924288;1537919046;1507993836;310852598;1127118012;493980205;1126295780;-782773659;1476181077;185125711;-335402501;980352628;-2102595471;2040946687;-1883550268;-500420691;1203000438;859846217;-612584922;-2054102077;-1407870597;-1799743398;2092880354;-603750978;1252868674;-1115539833;1031365069;173791431;-1412088656;-875709351;-565893785;1513807331;2081301183;-1176387360;-137335310;-1474544614;-1339193898;79786391;-1811271526;1319359968;1730536311;-224176469;-1213620682;-978388258;-1922080186;863997034;-547987781;-544419001;-1986935785;620499002;1313559914;1429931690;-1511024397;-1354929932;1069137177;1565746142;-1975047405;-1436323397;-2045610915;-1228899273;-1003613847;1785592207;1573071097;1237124150;1975050762;2041297381;-910942037;-1088721367;-297844930;-914502129;1492374869;-1732059070;949814684;-1842961145;-802111480;-129318508;-647536678;-1774067919;89135631;-933587277;-420571895;1854060310;-222251147;1380217425;-1510395207;-1367237162;1596034915;2043312186;-1760090468;-1502938152;2016554088;-2046281763;841663181;-1851998728;1420407311;-1648141448;1013783899;1721809057;-1992121756;219184445;-560439037;-185690076;647838731;-1255035710;72236346;1927964228;1677733766;1009040014;-1026510995;-42656071;1555515128;-217967250;1670128656;560015689;-1312409330;384569014;-1308021678;-604503442;1240172737;-988761229;-1861640968;1494143818;-1936308493;-891804758;-627166189;1146101024;1230845675;-1961722378;1191605086;-59458613;-95583465;1326997845;1949697188;889457192;-858355703;-815891493;1225383817;2006998886;-1370370982;-1444389709;64223056;1347691138;1242770086;897809394;1252382357;179009534;739709944;-1322456059;-257464559;-1958316655;1368225554;1309303038;-1941277971;438174895;-506850611;-635051627;-483443292;782515790;-1626277371;1781546761;234135728;2075212580;1255219472;713219763;137099452;-1481578436;-872771662;-510344217;336794182;1082258730;1231530161;1091929347;-136603461;-1386538860;900767186;-462511793;429261156;1173850019;-1738110350;-197761743;658444824;-1184603271;1115453855;-1457282968;233021379;-179569550;-909212533;-1259634213;-9022402;-1048016583;-958914874;1318977792;-1449452492;617453420;2029611101;-808110975;250408513;-1626693376;744946436;-1652814251;1190926309;962700431;638347229;-1504123821;1574958494;1056624595;1286686226;167479639;-1175617267;-2103906374;-507946160;-1681471076;-859308769;2128767516;-2075880768;-136324760;241434382;-1674962391;-504757775;1961944929;-1356806521;-1282446865;-1855768767;-27386572;-728042006;116449404;979177509;2132507401;-1314973048;2104806581;732400614;-944175823;-336099634;-1886074061;330276263;-133774002;-2037660989;-884164391;-833107111;1246970285;-597226273;1974765913;-1381501544;565052059;162365716;1715108042;-506599056;-1588119853;704517383;-1936241900;658794802;731529224;1346031717;-313699053;1329269568;-662241931;538856490;-377734842;-9283478;1003392439;162736809;454658900;222809677;655894006;437308035;-1808838497;1730737394;-1582848247;1560597132;1872501242;-1653167134;-1921243693;1535458581;233826112;550871700;-1296049233;-1308152241;1634335608;790617801;-448984089;1830836715;283946867;1547308154;339174900;1868988735;250414678;-893723731;1611652194;-577497934;832061488;1997279033;409507043;1849132301;1660959416;1615950604;1803439159;-992223104;496961563;237850964;621158714;-1978710322;-2127326882;-1212605297;372744215;1117304080;560824275;-2146870276;-254000435;-726402944;1098470161;-1989275075;-1183648178;-238318424;-672913658;749876388;663991382;-97226153;-1308623165;-278952171;1048637040;-857380030;2080417015;-858432278;-1567208204;1840769848;-252314866;-1961763323;366790893;1050278207;-1175574836;-176490857;1828828112;1893724562;-508757151;1314153951;1311017064;-1448267641;2043363243;1017237221;-1701906592;-425488118;-809398493;-1191041237;-1525274011;701923821;-1598962958;831821173;1593010452;-467790438;-1058873913;352097002;1785279852;1288775336;577075553;1479244322;900338809;-572838952;1656385327;-45399686;-271775302;-2133839150;-614769405;714555412;-876077478;-504899461;-479526430;1415873195;-695783980;-1382206987;1471899071;-2045467961;1095243842;1726971649;-1378143789;852155140;-441366397;};
mti=566;
is_gauss_double_cached=0;
cached_gauss_double=0;
};
};
SymmetricPrjnSpec @["SymmetricPrjnSpec"] {
name="SymmetricPrjnSpec";
desc=;
unique{ };
children {
name="children";
el_typ=SymmetricPrjnSpec;
el_def=0;
};
self_con=0;
init_wts=0;
add_rnd_wts=0;
add_rnd_wts_scale=1;
};
};
};
};
layers {
name="layers";
el_typ=LeabraLayer;
el_def=0;
pos {x=0: y=0: z=0: };
pos2d {x=0: y=0: };
max_disp_size {x=27: y=20: z=3: };
max_disp_size2d {x=30: y=193: };
LeabraLayer @["Input"] {
name="Input";
desc=;
flags=0;
layer_type=INPUT;
pos {x=0: y=0: z=0: };
pos2d {x=0: y=0: };
disp_scale=1;
un_geom {x=1: y=8: n_not_xy=0: n=8: };
unit_groups=0;
virt_groups=1;
gp_geom {x=1: y=1: n_not_xy=0: n=1: };
gp_spc {x=1: y=1: };
flat_geom {x=1: y=8: n_not_xy=0: n=8: };
disp_geom {x=1: y=8: n_not_xy=0: n=8: };
scaled_disp_geom {x=1: y=8: n_not_xy=0: n=1: };
projections {
name="projections";
el_typ=LeabraPrjn;
el_def=0;
};
send_prjns {
name="send_prjns";
el_typ=LeabraPrjn;
el_def=0;
Projection_Group @. = [0] = LeabraPrjn .projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["EC_in"].projections["Fm_Input"];
};
units {
name="units";
el_typ=LeabraUnit;
el_def=0;
pos {x=0: y=0: z=0: };
output_name=;
};
unit_spec {type=LeabraUnitSpec: spec=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$$: };
dmem_dist=DMEM_DIST_DEFAULT;
dist {
fm_input=-1;
fm_output=-1;
};
units_lesioned=0;
gp_unit_names_4d=0;
brain_area=;
voxel_fill_pct=1;
spec {type=LeabraLayerSpec: spec=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs["Input_Output"]$$: };
};
Layer_Group @.gp["Hippocampus"] {
name="Hippocampus";
el_typ=LeabraLayer;
el_def=0;
pos {x=0: y=0: z=0: };
pos2d {x=0: y=64: };
max_disp_size {x=27: y=20: z=3: };
max_disp_size2d {x=30: y=129: };
LeabraLayer @["EC_in"] {
name="EC_in";
desc=;
flags=0;
layer_type=HIDDEN;
pos {x=13: y=0: z=0: };
pos2d {x=0: y=0: };
disp_scale=1;
un_geom {x=1: y=8: n_not_xy=0: n=8: };
unit_groups=0;
virt_groups=1;
gp_geom {x=1: y=1: n_not_xy=0: n=1: };
gp_spc {x=1: y=1: };
flat_geom {x=1: y=8: n_not_xy=0: n=8: };
disp_geom {x=1: y=8: n_not_xy=0: n=8: };
scaled_disp_geom {x=1: y=8: n_not_xy=0: n=1: };
projections {
name="projections";
el_typ=LeabraPrjn;
el_def=0;
LeabraPrjn @["Fm_EC_out"] {
name="Fm_EC_out";
off=0;
disp=1;
from_type=CUSTOM;
from=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["EC_out"]$;
spec {type=OneToOnePrjnSpec: spec=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["OneToOne"]$$: };
con_type=LeabraCon;
recvcons_type=LeabraRecvCons;
sendcons_type=LeabraSendCons;
con_spec {type=HippoEncoderConSpec: spec=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_out_EC_in"]$$: };
recv_idx=0;
send_idx=1;
recv_n=1;
send_n=1;
projected=1;
direction=DIR_UNKNOWN;
prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
trg_netin_rel=-1;
};
LeabraPrjn @["Fm_Input"] {
name="Fm_Input";
off=0;
disp=1;
from_type=CUSTOM;
from=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers["Input"]$$;
spec {type=OneToOnePrjnSpec: spec=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["OneToOne"]$: };
con_type=LeabraCon;
recvcons_type=LeabraRecvCons;
sendcons_type=LeabraSendCons;
con_spec {type=LeabraConSpec: spec=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["Input_EC_in"]$$: };
recv_idx=1;
send_idx=0;
recv_n=1;
send_n=1;
projected=1;
direction=DIR_UNKNOWN;
prjn_clr {r=1: g=0.9: b=0.5: a=1: };
trg_netin_rel=-1;
};
};
send_prjns {
name="send_prjns";
el_typ=LeabraPrjn;
el_def=0;
Projection_Group @. = [0] = LeabraPrjn .projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["DG"].projections["Fm_EC_in"];
Projection_Group @. = [1] = LeabraPrjn .projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["CA3"].projections["Fm_EC_in"];
Projection_Group @. = [2] = LeabraPrjn .projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["CA1"].projections["Fm_EC_in"];
};
units {
name="units";
el_typ=LeabraUnit;
el_def=0;
pos {x=0: y=0: z=0: };
output_name=;
};
unit_spec {type=LeabraUnitSpec: spec=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
dmem_dist=DMEM_DIST_DEFAULT;
dist {
fm_input=-1;
fm_output=-1;
};
units_lesioned=0;
gp_unit_names_4d=0;
brain_area=".*/.*/.*/.*/Hippocampus entorhinal cortex";
voxel_fill_pct=1;
spec {type=ECinLayerSpec: spec=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["EC_out"].children["EC_in"]$: };
};
LeabraLayer @["EC_out"] {
UserDataItem_List @*(.user_data_) {
name="UserDataItem_List_73";
el_typ=UserDataItem;
el_def=0;
UserDataItem @["enc_sse"] {
name="enc_sse";
value 6 0=0;
val_type_fixed=0;
};
UserDataItem @["enc_norm_err"] {
name="enc_norm_err";
value 6 0=0;
val_type_fixed=0;
};
};
name="EC_out";
desc=;
flags=0;
layer_type=TARGET;
pos {x=26: y=0: z=0: };
pos2d {x=0: y=64: };
disp_scale=1;
un_geom {x=1: y=8: n_not_xy=0: n=8: };
unit_groups=0;
virt_groups=0;
gp_geom {x=1: y=1: n_not_xy=0: n=1: };
gp_spc {x=1: y=1: };
flat_geom {x=1: y=8: n_not_xy=0: n=8: };
disp_geom {x=1: y=8: n_not_xy=0: n=8: };
scaled_disp_geom {x=1: y=8: n_not_xy=0: n=1: };
projections {
name="projections";
el_typ=LeabraPrjn;
el_def=0;
LeabraPrjn @["Fm_CA1"] {
name="Fm_CA1";
off=0;
disp=1;
from_type=CUSTOM;
from=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["CA1"]$$;
spec {type=SymmetricPrjnSpec: spec=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["SymmetricPrjnSpec"]$$: };
con_type=LeabraCon;
recvcons_type=LeabraRecvCons;
sendcons_type=LeabraSendCons;
con_spec {type=HippoEncoderConSpec: spec=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["CA1_EC_out"]$: };
recv_idx=0;
send_idx=0;
recv_n=1;
send_n=1;
projected=1;
direction=DIR_UNKNOWN;
prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
trg_netin_rel=-1;
};
};
send_prjns {
name="send_prjns";
el_typ=LeabraPrjn;
el_def=0;
Projection_Group @. = [0] = LeabraPrjn .projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["EC_in"].projections["Fm_EC_out"];
Projection_Group @. = [1] = LeabraPrjn .projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["CA1"].projections["Fm_EC_out"];
};
units {
name="units";
el_typ=LeabraUnit;
el_def=0;
pos {x=0: y=0: z=0: };
output_name=;
};
unit_spec {type=LeabraUnitSpec: spec=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
dmem_dist=DMEM_DIST_DEFAULT;
dist {
fm_input=-1;
fm_output=-1;
};
units_lesioned=0;
gp_unit_names_4d=0;
brain_area=".*/.*/.*/.*/Hippocampus entorhinal cortex";
voxel_fill_pct=1;
spec {type=ECoutLayerSpec: spec=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["EC_out"]$: };
};
LeabraLayer @["DG"] {
name="DG";
desc=;
flags=0;
layer_type=HIDDEN;
pos {x=0: y=0: z=1: };
pos2d {x=0: y=89: };
disp_scale=1;
un_geom {x=20: y=20: n_not_xy=0: n=400: };
unit_groups=0;
virt_groups=1;
gp_geom {x=1: y=1: n_not_xy=0: n=1: };
gp_spc {x=1: y=1: };
flat_geom {x=20: y=20: n_not_xy=0: n=400: };
disp_geom {x=20: y=20: n_not_xy=0: n=400: };
scaled_disp_geom {x=20: y=20: n_not_xy=0: n=1: };
projections {
name="projections";
el_typ=LeabraPrjn;
el_def=0;
LeabraPrjn @["Fm_EC_in"] {
name="Fm_EC_in";
off=0;
disp=1;
from_type=CUSTOM;
from=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["EC_in"]$$;
spec {type=UniformRndPrjnSpec: spec=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["RandomPerfPath"]$$: };
con_type=LeabraCon;
recvcons_type=LeabraRecvCons;
sendcons_type=LeabraSendCons;
con_spec {type=XCalCHLConSpec: spec=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["PerfPath"]$$: };
recv_idx=0;
send_idx=2;
recv_n=1;
send_n=1;
projected=1;
direction=DIR_UNKNOWN;
prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
trg_netin_rel=-1;
};
};
send_prjns {
name="send_prjns";
el_typ=LeabraPrjn;
el_def=0;
Projection_Group @. = [0] = LeabraPrjn .projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["CA3"].projections["Fm_DG"];
};
units {
name="units";
el_typ=LeabraUnit;
el_def=0;
pos {x=0: y=0: z=0: };
output_name=;
};
unit_spec {type=LeabraUnitSpec: spec=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
dmem_dist=DMEM_DIST_DEFAULT;
dist {
fm_input=-1;
fm_output=-1;
};
units_lesioned=0;
gp_unit_names_4d=0;
brain_area=".*/.*/.*/.*/Hippocampus dentate gyrus";
voxel_fill_pct=1;
spec {type=LeabraLayerSpec: spec=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["DG"]$$: };
};
LeabraLayer @["CA3"] {
name="CA3";
desc=;
flags=0;
layer_type=HIDDEN;
pos {x=3: y=0: z=2: };
pos2d {x=3: y=121: };
disp_scale=1;
un_geom {x=10: y=8: n_not_xy=0: n=80: };
unit_groups=0;
virt_groups=1;
gp_geom {x=1: y=1: n_not_xy=0: n=1: };
gp_spc {x=1: y=1: };
flat_geom {x=10: y=8: n_not_xy=0: n=80: };
disp_geom {x=10: y=8: n_not_xy=0: n=80: };
scaled_disp_geom {x=10: y=8: n_not_xy=0: n=1: };
projections {
name="projections";
el_typ=LeabraPrjn;
el_def=0;
LeabraPrjn @["Fm_EC_in"] {
name="Fm_EC_in";
off=0;
disp=1;
from_type=CUSTOM;
from=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["EC_in"]$;
spec {type=UniformRndPrjnSpec: spec=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["RandomPerfPath"]$: };
con_type=LeabraCon;
recvcons_type=LeabraRecvCons;
sendcons_type=LeabraSendCons;
con_spec {type=XCalCHLConSpec: spec=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["PerfPath"]$: };
recv_idx=0;
send_idx=1;
recv_n=1;
send_n=1;
projected=1;
direction=DIR_UNKNOWN;
prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
trg_netin_rel=-1;
};
LeabraPrjn @["Fm_DG"] {
name="Fm_DG";
off=0;
disp=1;
from_type=CUSTOM;
from=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["DG"]$$;
spec {type=UniformRndPrjnSpec: spec=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["UniformRndMossy"]$$: };
con_type=LeabraCon;
recvcons_type=LeabraRecvCons;
sendcons_type=LeabraSendCons;
con_spec {type=XCalCHLConSpec: spec=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["Mossy"]$$: };
recv_idx=1;
send_idx=0;
recv_n=1;
send_n=1;
projected=1;
direction=DIR_UNKNOWN;
prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
trg_netin_rel=-1;
};
LeabraPrjn @["Fm_CA3"] {
name="Fm_CA3";
off=0;
disp=1;
from_type=SELF;
from=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["CA3"]$$;
spec {type=FullPrjnSpec: spec=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$$: };
con_type=LeabraCon;
recvcons_type=LeabraRecvCons;
sendcons_type=LeabraSendCons;
con_spec {type=XCalCHLConSpec: spec=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["CA3_CA3"]$$: };
recv_idx=2;
send_idx=1;
recv_n=1;
send_n=1;
projected=1;
direction=DIR_UNKNOWN;
prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
trg_netin_rel=-1;
};
};
send_prjns {
name="send_prjns";
el_typ=LeabraPrjn;
el_def=0;
Projection_Group @. = [0] = LeabraPrjn .projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["CA3"].projections["Fm_CA3"];
Projection_Group @. = [1] = LeabraPrjn .projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["CA1"].projections["Fm_CA3"];
};
units {
name="units";
el_typ=LeabraUnit;
el_def=0;
pos {x=0: y=0: z=0: };
output_name=;
};
unit_spec {type=LeabraUnitSpec: spec=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
dmem_dist=DMEM_DIST_DEFAULT;
dist {
fm_input=-1;
fm_output=-1;
};
units_lesioned=0;
gp_unit_names_4d=0;
brain_area=".*/.*/.*/.*/Hippocampus cornu ammonis";
voxel_fill_pct=1;
spec {type=CA3LayerSpec: spec=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["CA3"]$$: };
};
LeabraLayer @["CA1"] {
name="CA1";
desc=;
flags=0;
layer_type=HIDDEN;
pos {x=16: y=0: z=2: };
pos2d {x=20: y=116: };
disp_scale=1;
un_geom {x=10: y=10: n_not_xy=0: n=100: };
unit_groups=0;
virt_groups=1;
gp_geom {x=1: y=1: n_not_xy=0: n=1: };
gp_spc {x=1: y=1: };
flat_geom {x=10: y=10: n_not_xy=0: n=100: };
disp_geom {x=10: y=10: n_not_xy=0: n=100: };
scaled_disp_geom {x=10: y=10: n_not_xy=0: n=1: };
projections {
name="projections";
el_typ=LeabraPrjn;
el_def=0;
LeabraPrjn @["Fm_EC_in"] {
name="Fm_EC_in";
off=0;
disp=1;
from_type=CUSTOM;
from=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["EC_in"]$;
spec {type=FullPrjnSpec: spec=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
con_type=LeabraCon;
recvcons_type=LeabraRecvCons;
sendcons_type=LeabraSendCons;
con_spec {type=HippoEncoderConSpec: spec=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_in_CA1"]$: };
recv_idx=0;
send_idx=0;
recv_n=1;
send_n=1;
projected=1;
direction=DIR_UNKNOWN;
prjn_clr {r=1: g=0.8980393: b=0.4980392: a=1: };
trg_netin_rel=-1;
};
LeabraPrjn @["Fm_EC_out"] {
name="Fm_EC_out";
off=0;
disp=1;
from_type=CUSTOM;
from=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["EC_out"]$;
spec {type=FullPrjnSpec: spec=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
con_type=LeabraCon;
recvcons_type=LeabraRecvCons;
sendcons_type=LeabraSendCons;
con_spec {type=HippoEncoderConSpec: spec=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["EC_CA1ConSpecs"].children["EC_out_CA1"]$: };
recv_idx=1;
send_idx=0;
recv_n=1;
send_n=1;
projected=1;
direction=DIR_UNKNOWN;
prjn_clr {r=1: g=0.9: b=0.5: a=1: };
trg_netin_rel=-1;
};
LeabraPrjn @["Fm_CA3"] {
name="Fm_CA3";
off=0;
disp=1;
from_type=CUSTOM;
from=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["CA3"]$;
spec {type=FullPrjnSpec: spec=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"].gp["HippoPrjns"]["FullPrjn"]$: };
con_type=LeabraCon;
recvcons_type=LeabraRecvCons;
sendcons_type=LeabraSendCons;
con_spec {type=XCalCHLConSpec: spec=.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["HippoConSpecs"].children["CA3_CA1"]$$: };
recv_idx=2;
send_idx=0;
recv_n=1;
send_n=1;
projected=1;
direction=DIR_UNKNOWN;
prjn_clr {r=1: g=0.8980393: b=0.4941177: a=1: };
trg_netin_rel=-1;
};
};
send_prjns {
name="send_prjns";
el_typ=LeabraPrjn;
el_def=0;
Projection_Group @. = [0] = LeabraPrjn .projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].layers.gp["Hippocampus"]["EC_out"].projections["Fm_CA1"];
};
units {
name="units";
el_typ=LeabraUnit;
el_def=0;
pos {x=0: y=0: z=0: };
output_name=;
};
unit_spec {type=LeabraUnitSpec: spec=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["HippoUnitSpec"]$: };
dmem_dist=DMEM_DIST_DEFAULT;
dist {
fm_input=-1;
fm_output=-1;
};
units_lesioned=0;
gp_unit_names_4d=0;
brain_area=".*/.*/.*/.*/Hippocampus cornu ammonis";
voxel_fill_pct=1;
spec {type=CA1LayerSpec: spec=$.projects["Schapiro_etal_hippocampus_model_exercise"].networks["SLnet_pairs"].specs.gp["HippoSpecs"]["HippoLayerSpec"].children["CA1"]$: };
};
};
};
weights {
name="weights";
el_typ=Weights;
el_def=0;
};
flags=0;
auto_build=AUTO_BUILD;
brain_atlas_name=;
train_mode=TRAIN;
wt_update=ON_LINE;
small_batch_n=10;
sse_unit_avg=0;
sse_sqrt=0;
cnt_err_tol=0;
compute_prerr=0;
threads {
run_time {name="": s_used=0: n_used=0: };
sync_time {name="": s_used=0: n_used=0: };
total_time {name="": s_used=0: n_used=0: };
n_wake_in_sync=0;
run_time_pct=0;
sync_time_pct=0;
wake_in_sync_pct=0;
interleave=1;
ignore_lay_sync=0;
};
dmem_sync_level=DMEM_SYNC_NETWORK;
dmem_nprocs=1;
usr1_save_fmt=FULL_NET;
wt_save_fmt=TEXT;
n_units=604;
n_cons=19296;
max_prjns=3;
max_disp_size {x=27: y=20: z=3: };
max_disp_size2d {x=30: y=193: };
learn_rule=CTLEABRA_XCAL;
ti_mode=0;
phase_order=MINUS_PLUS;
no_plus_test=1;
sequence_init=DO_NOTHING;
phase_max=1;
time_inc=1;
cycle_max=80;
mid_minus_cycle=-1;
min_cycles=50;
min_cycles_phase2=0;
dwt_norm_enabled=0;
ct_time {
use=1;
minus=80;
plus=20;
inhib=1;
n_avg_only_epcs=0;
total_cycles=101;
inhib_start=100;
};
ct_sravg {
manual=0;
start=60;
end=1;
interval=1;
plus_s_st=19;
plus_s_only=0;
force_con=0;
};
ct_sin_i {
start=30;
duration=20;
n_pi=2;
burst_i=0;
trough_i=0;
};
ct_fin_i {
start=20;
end=25;
inhib_i=0;
};
ct_lrn_trig {
plus_lrn_cyc=-1;
davg_dt=0.1;
davg_s_dt=0.05;
davg_m_dt=0.03;
davg_l_dt=0.0005;
thr_min=0;
thr_max=0.5;
loc_max_cyc=8;
loc_max_dec=0.01;
lrn_delay=40;
lrn_refract=100;
davg_l_init=0;
davg_max_init=0.001;
davg_time=10;
davg_s_time=20;
davg_m_time=33.33334;
davg_l_time=2000;
lrn_delay_inc=0.025;
lrn_refract_inc=0.01;
};
lrn_trig {
davg=0;
davg_s=0;
davg_m=0;
davg_smd=0;
davg_l=0;
davg_max=0.001;
cyc_fm_inc=0;
cyc_fm_dec=0;
loc_max=0;
lrn_max=0;
lrn_trig=0;
lrn=0;
};
net_misc {
cyc_syn_dep=0;
syn_dep_int=20;
};
maxda_stopcrit=-1;
trg_max_act_stopcrit=1;
norew_val=0.5;
off_errs=1;
on_errs=1;
cos_err_lrn_thr=-1;
cos_diff_on=0;
cos_diff_auto=1;
};
};
};
